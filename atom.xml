<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liucekai.github.io/"/>
  <updated>2020-06-09T01:13:00.000Z</updated>
  <id>https://liucekai.github.io/</id>
  
  <author>
    <name>CeKai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAD的应用</title>
    <link href="https://liucekai.github.io/2020/06/09/CAD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://liucekai.github.io/2020/06/09/CAD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-06-09T01:13:00.000Z</published>
    <updated>2020-06-09T01:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CAD技术应用简介"><a href="#CAD技术应用简介" class="headerlink" title="CAD技术应用简介"></a>CAD技术应用简介</h3><p>CAD技术主要运用于强电工程设计和弱电工程设计<a id="more"></a></p><h4 id="强电工程设计（380-220V）"><a href="#强电工程设计（380-220V）" class="headerlink" title="强电工程设计（380/220V）"></a>强电工程设计（380/220V）</h4><p>变配电系统、动力配电系统、照明配电系统、防雷接地系统、备用电源系统</p><h4 id="弱电工程设计-220V-50HZ以下"><a href="#弱电工程设计-220V-50HZ以下" class="headerlink" title="弱电工程设计(220V/50HZ以下)"></a>弱电工程设计(220V/50HZ以下)</h4><p>计算机网络工程原理图、拓扑图、系统图和施工设计图等</p><p>综合布线系统工程原理图、系统图和施工图等</p><p>语音系统工程原理图、系统图和施工图等</p><p>物联网系统工程原理图、系统图和施工图等</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CAD技术应用简介&quot;&gt;&lt;a href=&quot;#CAD技术应用简介&quot; class=&quot;headerlink&quot; title=&quot;CAD技术应用简介&quot;&gt;&lt;/a&gt;CAD技术应用简介&lt;/h3&gt;&lt;p&gt;CAD技术主要运用于强电工程设计和弱电工程设计
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hostmonitor的使用（ensp环境下）</title>
    <link href="https://liucekai.github.io/2020/06/06/hostmonitor%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://liucekai.github.io/2020/06/06/hostmonitor%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-06T03:37:36.000Z</published>
    <updated>2020-06-06T03:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信…<a id="more"></a></p><p>拖动一个cloud进入环境中，与sw1相连(这里的cloud就可以当作是监控软件)</p><p>设置如下</p><p><img src="https://liucekai.github.io/images/monitor1.png" alt=""></p><ol><li>选择UDP接口</li><li>点击增加</li><li>选择我们的环回网卡（别忘了提前设置环回网卡的ip地址与我们的实验环境相对应）</li><li>点击增加</li></ol><p><img src="https://liucekai.github.io/images/monitor2.png" alt=""></p><p>出口编号为2，点击双向通道，点击增加.</p><p>与sw1相连的g0/0/7口划入access口.</p><p><img src="https://liucekai.github.io/images/monitor3.png" alt=""></p><p>可以通信sw1、2345678</p><p><img src="https://liucekai.github.io/images/monitor4.png" alt=""></p><p><img src="https://liucekai.github.io/images/monitor5.png" alt=""></p><p>但不能通信出口路由（需要配置回包路由）</p><p><img src="https://liucekai.github.io/images/monitor6.png" alt=""></p><p>并且本机也需要增加一条缺省，因为在访问与环回网卡不一致的网段时本机有可能选择其他网卡，所以为了确保本机一直使用环回网卡访问，增加一条缺省（本机即监控软件）</p><p><img src="https://liucekai.github.io/images/monitor7.png" alt=""></p><p>所有的设备都能与cloud即本机即监控软件通信了，添加设备之后才不会显示有问题</p><p><img src="https://liucekai.github.io/images/monitor8.png" alt=""></p><p>可以添加的设备类型有很多，这里不一一列举</p><p><img src="https://liucekai.github.io/images/monitor9.png" alt=""></p><p><img src="https://liucekai.github.io/images/monitor10.png" alt=""></p><p>这样就可以实现监控，并且在出现不通信时可以及时反馈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信…
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sever2008-DNS服务器配置</title>
    <link href="https://liucekai.github.io/2020/06/05/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://liucekai.github.io/2020/06/05/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-06-05T01:00:00.000Z</published>
    <updated>2020-06-05T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ul><li>掌握DNS的安装与配置</li><li>掌握DNF正向查询和反向查询的功能和配置方法<a id="more"></a></li></ul><p><strong>建立正向区域（通过域名解析IP）</strong></p><p>区域名称即你希望被访问的域名，如baidu.com</p><p><img src="https://liucekai.github.io/images/dns-1.png" alt=""></p><p><strong>新建主机</strong></p><p>即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。</p><p>所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的)</p><p><img src="https://liucekai.github.io/images/dns-2.png" alt=""></p><p><strong>建立反向区域（通过IP解析域名）</strong></p><p><img src="https://liucekai.github.io/images/dns-3.png" alt=""></p><p>建立之后更新PTR，反向区域列表则会出现相应的反向指针</p><p><img src="https://liucekai.github.io/images/dns-4.png" alt=""></p><p>为了测试，建立一个对应的web网站</p><p><img src="https://liucekai.github.io/images/dns-6.png" alt=""></p><p>并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求</p><p>通过管理工具打开高级安全防火墙进行配置：新建规则-&gt;所有程序-&gt;协议类型：TCP-&gt;本地端口为特定端口：80-&gt;远程端口为所有端口-&gt;下一步</p><p><strong>测试</strong></p><p>克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址</p><p><img src="https://liucekai.github.io/images/dns-5.png" alt=""></p><p>访问</p><p><img src="https://liucekai.github.io/images/dns-7.png" alt=""></p><p><img src="https://liucekai.github.io/images/dns-8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要求：&quot;&gt;&lt;a href=&quot;#要求：&quot; class=&quot;headerlink&quot; title=&quot;要求：&quot;&gt;&lt;/a&gt;要求：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;掌握DNS的安装与配置&lt;/li&gt;
&lt;li&gt;掌握DNF正向查询和反向查询的功能和配置方法
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>server2008-Web和ftp服务器基本配置</title>
    <link href="https://liucekai.github.io/2020/06/04/server%202008/"/>
    <id>https://liucekai.github.io/2020/06/04/server%202008/</id>
    <published>2020-06-04T02:00:00.000Z</published>
    <updated>2020-06-04T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web服务器配置"><a href="#Web服务器配置" class="headerlink" title="Web服务器配置"></a>Web服务器配置</h2><p><strong>配置之前需要先安装（在服务器管理器上添加角色）</strong><a id="more"></a></p><ul><li><h4 id="基本配置：网站名称、物理路径（主目录）"><a href="#基本配置：网站名称、物理路径（主目录）" class="headerlink" title="基本配置：网站名称、物理路径（主目录）"></a>基本配置：网站名称、物理路径（主目录）</h4><p><img src="https://liucekai.github.io/images/08-1.png" alt=""></p><p>路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致</p><p><img src="https://liucekai.github.io/images/08-2.png" alt=""></p><p>绑定设置域名（即主机名），也可以绑定ip地址</p></li><li><h4 id="文档配置：默认文档、也可以添加，删除（主页）"><a href="#文档配置：默认文档、也可以添加，删除（主页）" class="headerlink" title="文档配置：默认文档、也可以添加，删除（主页）"></a>文档配置：默认文档、也可以添加，删除（主页）</h4><p><img src="https://liucekai.github.io/images/08-3.png" alt=""></p><p>想用别的默认文档当网站主页可以自己添加</p></li><li><h4 id="身份验证配置：属于安全配置，一般设匿名身份验证"><a href="#身份验证配置：属于安全配置，一般设匿名身份验证" class="headerlink" title="身份验证配置：属于安全配置，一般设匿名身份验证"></a>身份验证配置：属于安全配置，一般设匿名身份验证</h4><p><img src="https://liucekai.github.io/images/08-4.png" alt=""></p></li><li><h4 id="IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围"><a href="#IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围" class="headerlink" title="IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围"></a>IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围</h4><p><img src="https://liucekai.github.io/images/08-5.png" alt=""></p></li></ul><p>可以添加或删除IP规则</p><p><img src="https://liucekai.github.io/images/08-6.png" alt=""></p><p>输入环回地址或者本机IP访问也是一样</p><p><img src="https://liucekai.github.io/images/08-7.png" alt=""></p><hr><h2 id="FTP服务器配置"><a href="#FTP服务器配置" class="headerlink" title="FTP服务器配置"></a>FTP服务器配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果在添加web角色时勾选了ftp服务，则不需要重复添加，如果没有勾选，则在“角色”里找到“角色服务”点击“添加角色服务”</p><p><img src="https://liucekai.github.io/images/ftp-1.png" alt=""></p><p>我是已经添加过了，所以可以看到</p><p>接着打开IIS管理器，可以看到我们之前创建的web网站，然后新建ftp站点</p><p><img src="https://liucekai.github.io/images/ftp-2.png" alt=""></p><p><img src="https://liucekai.github.io/images/ftp-3.png" alt=""></p><p>物理路径作为你ftp站点的根目录</p><p><img src="https://liucekai.github.io/images/ftp-4.png" alt=""></p><p>ftp站点不需要SSL</p><p><img src="https://liucekai.github.io/images/ftp-5.png" alt=""></p><p>如果是公共下载站，允许匿名登录，这里先勾上（之后可以再次配置）</p><p>创建好了之后，为了方便测试，给我们之前指定的物理路径c:ftproot下新建一个“新建文本文档”，里面内容是“ftproot”</p><p>切换到克隆机上，浏览器内输入<a href="ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址）">ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址）</a></p><p>发现可以访问（忘截图）</p><p>第二种测试方法，使用专门的ftp工具</p><p>第三种测试方法，cmd命令行输入 ftp 192.168.16.128即可连接上</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://liucekai.github.io/images/ftp-6.png" alt=""></p><ul><li><h5 id="ip地址和域限制"><a href="#ip地址和域限制" class="headerlink" title="ip地址和域限制"></a>ip地址和域限制</h5></li></ul><p>效果和web的一样，指定ip或ip域允许访问或不能访问，当某Ip被拒绝时，访问ftp会被要求输入用户名和密码（因为我们安装站点时支持匿名访问和身份验证访问），但无论输入什么都不能访问，因为被限制了</p><ul><li><h5 id="SSL设置"><a href="#SSL设置" class="headerlink" title="SSL设置"></a>SSL设置</h5></li><li><h5 id="FTP当前会话"><a href="#FTP当前会话" class="headerlink" title="FTP当前会话"></a>FTP当前会话</h5></li></ul><p><img src="https://liucekai.github.io/images/ftp-7.png" alt=""></p><p>可以显示当前连接的用户的信息</p><ul><li><h5 id="身份验证设置"><a href="#身份验证设置" class="headerlink" title="身份验证设置"></a>身份验证设置</h5></li></ul><p>如果该ftp站点不是作为一个下载站，而是一个公司内部的共享站，则取消匿名访问，只设置身份验证访问</p><p>如果这样的话，那么由于我们是一个域环境中的服务器，那么关于ftp用户的创建，需要在我们的域当中去完成</p><h6 id="ftp用户创建"><a href="#ftp用户创建" class="headerlink" title="ftp用户创建"></a>ftp用户创建</h6><p>用户创建之前，你得保证你的计算机已经添加好了”Active directory域服务“角色并且在该角色中创建和了一个域，详情参考<a href="https://blog.51cto.com/12476193/2123191" target="_blank" rel="noopener">https://blog.51cto.com/12476193/2123191</a></p><p>域创建好之后，创建用户</p><p><img src="https://liucekai.github.io/images/ftp-8.png" alt=""></p><p><img src="https://liucekai.github.io/images/ftp-9.png" alt=""></p><p>创建好之后，在ftproot下创建两个对应用户名的文件夹ftp1和ftp2，里面分别放ftp1文本和ftp2文本。</p><p>克隆机访问</p><p><img src="https://liucekai.github.io/images/ftp-10.png" alt=""></p><p><img src="https://liucekai.github.io/images/ftp-11.png" alt=""></p><p>登录用户ftp1发现，可以看到ftproot下所有文件，这样是不安全的，一个用户可以访问到其他用户的文件夹，所以我们要设置<strong>用户隔离</strong></p><p>在设置用户隔离之前，先阅读”用户隔离帮助“</p><p><img src="https://liucekai.github.io/images/ftp-12.png" alt=""></p><p>所以我们需要删除原来创建的ftp1和ftp2文件夹，在ftproot下创建一个cekai文件夹（因为我创建域的域名就叫cekai，打开active directory用户和计算机可以看到），然后再分别创建ftp1和ftp2文件夹，里面放置文件</p><p>之后再到IIS里设置用户隔离</p><p><img src="https://liucekai.github.io/images/ftp-13.png" alt=""></p><p>克隆机访问</p><p><img src="https://liucekai.github.io/images/ftp-14.png" alt=""></p><p>成功隔离</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web服务器配置&quot;&gt;&lt;a href=&quot;#Web服务器配置&quot; class=&quot;headerlink&quot; title=&quot;Web服务器配置&quot;&gt;&lt;/a&gt;Web服务器配置&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;配置之前需要先安装（在服务器管理器上添加角色）&lt;/strong&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>redhat基本操作</title>
    <link href="https://liucekai.github.io/2020/06/03/redhat%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://liucekai.github.io/2020/06/03/redhat%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-03T11:37:36.000Z</published>
    <updated>2020-06-03T11:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redhat基本操作"><a href="#redhat基本操作" class="headerlink" title="redhat基本操作"></a>redhat基本操作</h2><p>Init 3 进入非图形化界面</p><p>Startx 进入图形化界面</p><p>Init 5 进入图形化界面<a id="more"></a></p><p>Vim /etc/inittab编辑开机默认界面：</p><p>Id:5:initdefault 改成 Id:3:initdefault</p><p>:Wq!保存，Reboot重启，随后开机就是非图形化界面了</p><p><img src="https://liucekai.github.io/images/r1-1.png" alt=""></p><p> root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$</p><p>Pwd显示当前目录</p><p>最前面的/表示根目录</p><p>Cd 进入某目录（必须是完整的路径，即绝对路径）</p><p><img src="https://liucekai.github.io/images/r1-2.png" alt=""></p><p>除非在对应的路径下配合.一起用，相对路径（而且./可以省略）</p><p><img src="https://liucekai.github.io/images/r1-3.png" alt=""></p><p>Cd ..返回上一级目录，..表示上一级，.表示当前</p><p>Cd -表示回到上一次待的位置</p><p><img src="https://liucekai.github.io/images/r1-4.png" alt=""></p><p>Cp复制，mv移动/剪切（Mv还有重命名的功能）</p><p><img src="https://liucekai.github.io/images/r1-5.png" alt=""></p><p><img src="https://liucekai.github.io/images/r1-6.png" alt=""></p><p>Rm删除文件  rm -fr强制删除文件和文件夹</p><p><img src="https://liucekai.github.io/images/r1-7.png" alt=""></p><p>*表示所有</p><p><img src="https://liucekai.github.io/images/r1-8.png" alt=""></p><p>Shutdown -h 20二十分钟后关机</p><p>Shutdown -c取消关机</p><p><img src="https://liucekai.github.io/images/r1-9.png" alt=""></p><p>~表示root目录，即家目录</p><p>Ls 显示当前目录的内容</p><p>Init 5：切换为图形化界面</p><p><img src="https://liucekai.github.io/images/r1-10.png" alt=""></p><p>不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹</p><p>Mkdir在当前位置新建文件夹</p><p><img src="https://liucekai.github.io/images/r1-11.png" alt=""></p><p>Touch 1  创建文件1</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;redhat基本操作&quot;&gt;&lt;a href=&quot;#redhat基本操作&quot; class=&quot;headerlink&quot; title=&quot;redhat基本操作&quot;&gt;&lt;/a&gt;redhat基本操作&lt;/h2&gt;&lt;p&gt;Init 3 进入非图形化界面&lt;/p&gt;
&lt;p&gt;Startx 进入图形化界面&lt;/p&gt;
&lt;p&gt;Init 5 进入图形化界面
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1000人冗余型企业网</title>
    <link href="https://liucekai.github.io/2020/06/02/1000%E4%BA%BA%E5%86%97%E4%BD%99%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91/"/>
    <id>https://liucekai.github.io/2020/06/02/1000%E4%BA%BA%E5%86%97%E4%BD%99%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91/</id>
    <published>2020-06-02T12:30:00.000Z</published>
    <updated>2020-06-09T07:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li><p>确保分支可以访问总部</p></li><li><p>企业内网划分多个vlan</p></li><li><p>出口配置NAT</p></li><li><p>禁止vlan5访问外网</p></li><li><p>所有设备，在任何位置都能telnet远程管理<a id="more"></a></p></li><li><p>设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡</p></li><li><p>所有用户均为自动获取ip地址，并配置相关dhcp安全技术</p></li><li><p>一定程度上实现负载均衡\分担、链路冗余</p></li><li><p>在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问</p></li></ul><hr><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul><li><p>减少广播域大小，提高网络稳定性</p></li><li><p>减少设备收敛时间、将stp优化</p></li><li><p>提高内网设备安全性</p></li><li><p>acl合理控制</p></li><li><p>设备尽量实现负载均衡\分担、链路冗余详细方案</p></li></ul><hr><h2 id="拓扑展示"><a href="#拓扑展示" class="headerlink" title="拓扑展示"></a>拓扑展示</h2><p><img src="https://liucekai.github.io/images/tp1000.png" alt=""></p><hr><h2 id="详细方案"><a href="#详细方案" class="headerlink" title="详细方案"></a>详细方案</h2><h3 id="步骤一：底层eth-trunk-、vlan（含修剪）、trunk"><a href="#步骤一：底层eth-trunk-、vlan（含修剪）、trunk" class="headerlink" title="步骤一：底层eth-trunk 、vlan（含修剪）、trunk"></a>步骤一：底层eth-trunk 、vlan（含修剪）、trunk</h3><p><strong>eth-trunk配置：</strong></p><p><strong>SW1</strong></p><p><code>Int eth-trunk 2</code></p><p><code>mode lacp-static</code></p><p><code>trunkport g0/0/2</code></p><p><code>trunkport g0/0/3</code></p><p><strong>SW2</strong></p><p><code>Int eth-trunk 2</code></p><p><code>mode lacp-static</code></p><p><code>trunkport g0/0/2</code></p><p><code>trunkport g0/0/1</code></p><p><strong>SW3</strong></p><p><code>Int eth-trunk 1</code></p><p><code>mode lacp-static</code></p><p><code>trunkport e0/0/4</code></p><p><code>trunkport e0/0/5</code></p><p><strong>SW6</strong></p><p><code>Int eth-trunk 1</code></p><p><code>mode lacp-static</code></p><p><code>trunkport e0/0/1</code></p><p><code>trunkport e0/0/3</code></p><p><strong>Vlan、trunk配置（一号楼）</strong></p><p><strong>SW5:</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Ethernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 999</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 2</code></p><p><strong>SW6:</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Eth-Trunk1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 3 999</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 3</code></p><p><strong>SW3:</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Eth-Trunk1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 3 999</code></p><p><code>interface Ethernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围）</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 3 999</code></p><p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p><p><code>interface Ethernet0/0/3</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 999</code></p><p><strong>vlan、trunk配置（2号楼）</strong></p><p><strong>SW7</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Ethernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 999</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 4</code></p><p><code>interface Ethernet0/0/3</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 5</code></p><p><strong>SW4</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Ethernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 999</code></p><p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 999</code></p><p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p><p><code>interface Ethernet0/0/3</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 99</code></p><p><strong>SW8</strong></p><p><code>vlan batch 2 to 5 200 999</code></p><p><code>interface Ethernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 200 999</code></p><p><code>interface Ethernet0/0/2</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 200 999</code></p><p><code>interface Ethernet0/0/3</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 200</code></p><p><code>interface Ethernet0/0/4</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 200</code></p><p><strong>SW1</strong></p><p><code>vlan batch 2 to 5 200 800 999</code>（vlan 800是用于access口的，vlan只能从属一个access口）</p><p><code>interface Eth-Trunk2</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p><p> <code>mode lacp-static</code></p><p><code>interface GigabitEthernet0/0/1</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 3 999</code></p><p><code>interface GigabitEthernet0/0/4</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 999</code></p><p><code>interface GigabitEthernet0/0/5</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 200 999</code></p><p><code>interface GigabitEthernet0/0/6</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 800</code></p><p><strong>SW2</strong></p><p>Vlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801）</p><p><code>interface Eth-Trunk2</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p><p> <code>mode lacp-static</code></p><p><code>interface GigabitEthernet0/0/3</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 200 999</code></p><p><code>interface GigabitEthernet0/0/4</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 4 to 5 999</code></p><p><code>interface GigabitEthernet0/0/5</code></p><p> <code>port link-type trunk</code></p><p> <code>port trunk allow-pass vlan 2 to 3 999</code></p><p><code>interface GigabitEthernet0/0/6</code></p><p> <code>port link-type access</code></p><p> <code>port default vlan 801</code></p><hr><h3 id="步骤二：MSTP（二层冗余）"><a href="#步骤二：MSTP（二层冗余）" class="headerlink" title="步骤二：MSTP（二层冗余）"></a>步骤二：MSTP（二层冗余）</h3><p>（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果）</p><p><strong>SW1</strong></p><p><strong>全局模式下</strong></p><p><code>stp region-configuration（启用stp，进入STP配置）</code></p><p> <code>region-name aa（设置MSTP的域名为aa）</code></p><p> <code>revision-level 1（设置MSTP修订版本号为1）</code></p><p> <code>instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1）</code></p><p> <code>instance 2 vlan 4 to 5（将vlan 4 5映射到实例2）</code></p><p> <code>active region-configuration（激活以上的配置）</code></p><p><strong>由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略</strong></p><p><strong>设置优先级</strong></p><p><strong>SW1</strong></p><p><strong>全局模式下</strong>   </p><p><img src="https://liucekai.github.io/images/b2-3.png" alt="b2-3"></p><p><code>stp instance 1 root primary（把SW1设置为实例1的根桥）</code></p><p><code>stp instance 2 root secondary（把SW1设置为实例2的备份桥）</code></p><p><strong>SW2</strong></p><p><code>stp instance 1 root secondary</code></p><p><code>stp instance 2 root primary</code></p><p>可以实现vlan 2 3 200的流量从sw1往上走</p><p>Vlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡</p><p>检查</p><p>发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过）</p><p><img src="https://liucekai.github.io/images/b2-1.jpg" alt="b2-1"></p><p>SW4也达到预期</p><p><img src="https://liucekai.github.io/images/b2-2.png" alt="b2-2"></p><hr><h3 id="步骤三：VRRP（三层冗余）"><a href="#步骤三：VRRP（三层冗余）" class="headerlink" title="步骤三：VRRP（三层冗余）"></a>步骤三：VRRP（三层冗余）</h3><p><strong>（这一步包含svi了）</strong></p><p><strong>VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信</strong></p><p><strong>SW1</strong></p><p><code>interface Vlanif2</code></p><p> <code>ip address 192.168.2.254 255.255.255.0</code></p><p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p><p> <code>vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p><p><code>interface Vlanif3</code></p><p> <code>ip address 192.168.3.254 255.255.255.0</code></p><p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p><p> <code>vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p><p><code>interface Vlanif4</code></p><p> <code>ip address 192.168.4.254 255.255.255.0</code></p><p> <code>vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级）</code></p><p><code>interface Vlanif5</code></p><p> <code>ip address 192.168.5.254 255.255.255.0</code></p><p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p><p><code>interface Vlanif200</code></p><p> <code>ip address 192.168.200.254 255.255.255.0</code></p><p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p><p> <code>vrrp vrid 200 priority 105</code></p><p><strong>SW2</strong></p><p><code>interface Vlanif2</code></p><p> <code>ip address 192.168.2.253 255.255.255.0</code></p><p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p><p><code>interface Vlanif3</code></p><p> <code>ip address 192.168.3.253 255.255.255.0</code></p><p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p><p><code>interface Vlanif4</code></p><p> <code>ip address 192.168.4.253 255.255.255.0</code></p><p> <code>vrrp vrid 4 virtual-ip 192.168.4.1</code></p><p> <code>vrrp vrid 4 priority 105</code></p><p><code>interface Vlanif5</code></p><p> <code>ip address 192.168.5.253 255.255.255.0</code></p><p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p><p> <code>vrrp vrid 5 priority 105</code></p><p><code>interface Vlanif200</code></p><p> <code>ip address 192.168.200.253 255.255.255.0</code></p><p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p><p><img src="https://liucekai.github.io/images/b3-1.png" alt=""></p><p><img src="https://liucekai.github.io/images/b3-2.png" alt=""></p><p>达到了预期</p><p>因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。</p><p><strong>检查</strong></p><p>还没做dhcp，先用静态ip检测一下:</p><p><img src="https://liucekai.github.io/images/b3-3.png" alt=""></p><p><img src="https://liucekai.github.io/images/b3-4.png" alt=""></p><p><img src="https://liucekai.github.io/images/b3-5.png" alt=""></p><p><strong>补：vlan800和vlan801从属access口的ip配置</strong>:</p><p><code>interface Vlanif800</code></p><p> <code>ip address 192.168.12.2 255.255.255.0</code></p><p><code>interface Vlanif801</code></p><p> <code>ip address 192.168.23.2 255.255.255.0</code></p><hr><h3 id="步骤四：BFD（检测引擎假死）"><a href="#步骤四：BFD（检测引擎假死）" class="headerlink" title="步骤四：BFD（检测引擎假死）"></a>步骤四：BFD（检测引擎假死）</h3><p>引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来</p><p>本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上</p><p><strong>在sw1和r1分别创建bfd并命名为bb</strong></p><p><strong>SW1</strong></p><p><code>[全局]Bfd</code></p><p><code>[bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto</code></p><p><code>Commit（bb是取名）</code></p><p><strong>R1</strong></p><p><code>[全局]bfd</code></p><p><code>[bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto</code></p><p> <code>commit</code></p><p><strong>检查</strong></p><p><img src="https://liucekai.github.io/images/b4-1.png" alt=""></p><p><img src="https://liucekai.github.io/images/b4-2.png" alt=""></p><p><strong>bb上的track：**</strong></p><p><code>interface Vlanif2</code></p><p><code>vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口}</code></p><p><code>vrrp vrid 2 track bfd-session session-name bb（track上联口）</code></p><p><code>interface Vlanif3</code></p><p><code>vrrp vrid 3 track interface GigabitEthernet0/0/1</code></p><p><code>vrrp vrid 3 track bfd-session session-name bb</code></p><p><code>interface Vlanif200</code></p><p><code>vrrp vrid 200 track interface GigabitEthernet0/0/1</code></p><p><code>vrrp vrid 200 track bfd-session session-name bb</code></p><p><strong>（这些几乎一样的配置可以通过刷脚本去配）</strong></p><p><strong>在sw2和r1分别创建bfd并命名为cc</strong></p><p><strong>Sw2</strong></p><p><code>bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto</code></p><p> <code>commit</code></p><p><strong>R1</strong></p><p><code>bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto</code></p><p> <code>commit</code></p><p><strong>检查</strong></p><p><img src="https://liucekai.github.io/images/b4-3.png" alt=""></p><p><code>interface Vlanif4</code></p><p><code>vrrp vrid 4 track interface GigabitEthernet0/0/4</code></p><p><code>vrrp vrid 4 track bfd-session session-name cc</code></p><p><code>interface Vlanif5</code></p><p><code>vrrp vrid 5 track interface GigabitEthernet0/0/4</code></p><p><code>vrrp vrid 5 track bfd-session session-name cc</code></p><hr><h3 id="步骤五：OSPF、NAT"><a href="#步骤五：OSPF、NAT" class="headerlink" title="步骤五：OSPF、NAT"></a>步骤五：OSPF、NAT</h3><h4 id="①-ospf"><a href="#①-ospf" class="headerlink" title="① ospf"></a><strong>① ospf</strong></h4><p>先查看有哪些直连网段</p><p>发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里</p><p><img src="https://liucekai.github.io/images/b5-1.png" alt=""></p><p><strong>SW1</strong></p><p><code>ospf 1</code> </p><p><code>area 0.0.0.0</code></p><p>  <code>network 192.168.2.0 0.0.0.255</code></p><p>  <code>network 192.168.3.0 0.0.0.255</code></p><p>  <code>network 192.168.4.0 0.0.0.255</code></p><p>  <code>network 192.168.5.0 0.0.0.255</code></p><p>  <code>network 192.168.200.0 0.0.0.255</code></p><p>  <code>network 192.168.12.0 0.0.0.255</code></p><p><img src="https://liucekai.github.io/images/b5-2.png" alt=""></p><p><strong>Sw2</strong></p><p><code>ospf 1</code></p><p><code>area 0.0.0.0</code></p><p> <code>network 192.168.2.0 0.0.0.255</code></p><p> <code>network 192.168.3.0 0.0.0.255</code></p><p> <code>network 192.168.4.0 0.0.0.255</code></p><p> <code>network 192.168.5.0 0.0.0.255</code></p><p> <code>network 192.168.200.0 0.0.0.255</code></p><p> <code>network 192.168.12.0 0.0.0.255</code></p><p>给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\联通R\分支R4以及R4的网关）</p><p>完了查看R1接口</p><p><img src="https://liucekai.github.io/images/b5-3.png" alt=""></p><p><strong>注意</strong>：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略</p><p>R4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了</p><p><img src="https://liucekai.github.io/images/b5-4.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-5.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-6.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-7.png" alt=""></p><p>再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：<code>ip route-static 0.0.0.0 0.0.0.0 192.168.200.1</code>）</p><p><img src="https://liucekai.github.io/images/b5-8.png" alt=""></p><p>做完ospf之后，用户访问分支、服务器都没问题</p><hr><h4 id="②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）"><a href="#②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）" class="headerlink" title="②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）"></a><strong>②NAT</strong>（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）</h4><p><strong>R2、R3、R5运行rip：</strong></p><p><strong>R2</strong></p><p><code>rip 1</code></p><p> <code>version 2（版本号为2）</code></p><p> <code>network 12.0.0.0（宣告主类，这里为A类）</code></p><p> <code>network 25.0.0.0</code></p><p><strong>R3</strong></p><p><code>rip 1</code></p><p> <code>version 2</code></p><p> <code>network 13.0.0.0</code></p><p> <code>network 35.0.0.0</code></p><p><strong>R5</strong></p><p><code>rip 1</code></p><p> <code>version 2</code></p><p> <code>network 25.0.0.0</code></p><p> <code>network 35.0.0.0</code></p><p> <code>network 5.0.0.0</code></p><p>做完rip之后，查看电信路由器，发现已经<strong>学到了R5的路由</strong></p><p><img src="https://liucekai.github.io/images/b5-9.png" alt=""></p><p>可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题</p><p><img src="https://liucekai.github.io/images/b5-10.png" alt=""></p><p>电信ping联通</p><p><img src="https://liucekai.github.io/images/b5-11.png" alt=""></p><p>此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证.</p><p>用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条</p><p><strong>Sw1</strong></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1</code></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选）</code></p><p><strong>发送到Sw2时</strong></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1</code></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65</code></p><p>有了到出口路由的缺省，还需要出口路由到运营商的缺省</p><p><strong>R1</strong></p><p><strong>联通的缺省</strong></p><p>ip route-static 0.0.0.0 0.0.0.0 13.1.1.2</p><p><strong>电信的</strong></p><p>ip route-static 0.0.0.0 0.0.0.0 12.1.1.2</p><p>即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去</p><p><img src="https://liucekai.github.io/images/b5-12.png" alt=""></p><p><strong>Nat之easy ip</strong></p><p><code>acl 2000</code></p><p><code>rule permit source 192.168.0.0 0.0.255.255（）</code></p><p><code>interface GigabitEthernet1/0/0</code></p><p><code>nat outbound 2000</code></p><p><code>interface GigabitEthernet0/0/2</code></p><p><code>nat outbound 2000</code></p><p><img src="https://liucekai.github.io/images/b5-13.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-14.png" alt=""></p><p>检测是否能到达外网并且路线是否能按照我们预想的走。</p><p>能到外网</p><p><img src="https://liucekai.github.io/images/b5-15.png" alt=""></p><p>但是tracert有点bug（模拟器的问题）</p><p><img src="https://liucekai.github.io/images/b5-16.png" alt=""></p><p>原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由</p><p><img src="https://liucekai.github.io/images/b5-17.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-18.png" alt=""></p><p>优化一下试试</p><p>对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1</p><p>对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2</p><p><img src="https://liucekai.github.io/images/b5-19.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-20.png" alt=""></p><p>优化之后，可以看到只有一条路由</p><p><img src="https://liucekai.github.io/images/b5-21.png" alt=""></p><p>测试发现还是有问题</p><p><img src="https://liucekai.github.io/images/b5-22.png" alt=""></p><p><strong>这里先留个问题</strong></p><p>起码路线是对的</p><p><img src="https://liucekai.github.io/images/b5-23.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-24.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-25.png" alt=""></p><p>检测冗余效果，去掉一些链路</p><p><img src="https://liucekai.github.io/images/b5-26.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-27.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-28.png" alt=""></p><p>这里收敛时间较长，后面优化一下</p><p><img src="https://liucekai.github.io/images/b5-29.png" alt=""></p><p><img src="https://liucekai.github.io/images/b5-30.png" alt=""></p><hr><h3 id="步骤六：DHCP中继（服务器做地址池）"><a href="#步骤六：DHCP中继（服务器做地址池）" class="headerlink" title="步骤六：DHCP中继（服务器做地址池）"></a>步骤六：DHCP中继（服务器做地址池）</h3><p><code>dhcp enable</code></p><p><code>ip pool vlan2</code></p><p> <code>gateway-list 192.168.2.1</code></p><p> <code>network 192.168.2.0 mask 255.255.255.0</code></p><p> <code>dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址）</code></p><p><strong>一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置）</strong></p><p><code>excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需）</code></p><p>通过刷脚本配置其他池（别忘了排除）</p><p><img src="https://liucekai.github.io/images/b6-1.png" alt=""></p><p>接着在<strong>接口下启用dhcp</strong>（现实情况中不需要，直接用windows服务器或linux服务器做就行）</p><p><code>interface Ethernet0/0/0</code></p><p><code>dhcp select global</code></p><p>这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继</p><p><strong>Sw1上</strong></p><p><code>dhcp enable</code></p><p><code>interface Vlanif2</code></p><p><code>dhcp select relay</code></p><p> <code>dhcp relay server-ip 192.168.200.3</code></p><p> 同样配置其他vlanif接口345，略</p><p>接着就可以了</p><p><img src="https://liucekai.github.io/images/b6-2.png" alt=""></p><p><img src="https://liucekai.github.io/images/b6-3.png" alt=""></p><p>在本项目中<strong>用服务器做地址池</strong>的好处有，<strong>支持备份</strong>，即使两台核心有一台挂了，一样可以拿到地址。</p><p><strong>Dhcp安全技术</strong>：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备</p><p>（如TP-Link）扰乱我们的地址分配服务</p><p>在用户接入层交换机配置如下</p><p><strong>SW5</strong></p><p><code>[JR_sw5]dhcp enable</code> </p><p><code>[JR_sw5]dhcp snooping enable</code></p><p><code>[JR_sw5]int vlanif 2</code></p><p><code>[JR_sw5-Vlanif2]dhcp snooping enable</code></p><p><code>[JR_sw5]int e0/0/1</code></p><p><code>[JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任)</code></p><p><strong>SW6</strong></p><p><code>[JR_sw6]dhcp enable</code> </p><p><code>[JR_sw6]dhcp snooping enable</code></p><p><code>[JR_sw6]int vlanif 3</code></p><p><code>[JR_sw6-Vlanif3]dhcp snooping enable</code></p><p><code>[JR_sw5]int eth-trunk 1</code></p><p><code>[JR_sw5-eth-trunk-1]dhcp snooping trusted</code></p><p><strong>SW7</strong></p><p><code>[JR_sw7]dhcp enable</code> </p><p><code>[JR_sw7]dhcp snooping enable</code></p><p><code>[JR_sw7]int vlanif 4</code></p><p><code>[JR_sw7-Vlanif4]dhcp snooping enable</code></p><p><code>[JR_sw7]int vlanif 5</code></p><p><code>[JR_sw7-Vlanif5]dhcp snooping enable</code></p><p><code>[JR_sw7]int e0/0/1</code></p><p><code>[JR_sw7-Ethernet0/0/1]dhcp snooping trusted</code></p><p><img src="https://liucekai.github.io/images/b6-4.png" alt=""></p><hr><h3 id="步骤七：NAT—Server（服务器端口映射）"><a href="#步骤七：NAT—Server（服务器端口映射）" class="headerlink" title="步骤七：NAT—Server（服务器端口映射）"></a>步骤七：NAT—Server（服务器端口映射）</h3><p>因为要求映射到联通公网，所以在<strong>R1</strong>的<strong>g1/0/0口</strong>上配置映射</p><p><code>interface GigabitEthernet1/0/0</code></p><p><code>nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface</code></p><p>也可以写成该接口ip地址13.1.1.1）</p><p>配置服务器的基本配置</p><p><img src="https://liucekai.github.io/images/b7-1.png" alt=""></p><p><strong>为了测试，在外网添加一个客户端</strong></p><p>IP7.7.7.7</p><p>网关7.7.7.1配置在<strong>R5</strong>上</p><p><img src="https://liucekai.github.io/images/b7-2.png" alt=""></p><hr><h3 id="步骤八：ACL访问控制列表"><a href="#步骤八：ACL访问控制列表" class="headerlink" title="步骤八：ACL访问控制列表"></a>步骤八：ACL访问控制列表</h3><p><code>acl number 3005 （3000之后都是高级acl）</code> </p><p> <code>rule 5 permit ip source 192.168.5.0 0.0.0.255 destination 192.168.0.0 0.0.255.255 （先允许该vlan的用户能访问公司内网）</code></p><p> <code>rule 10 deny ip source 192.168.5.0 0.0.0.255 （再拒绝该vlan访问所有，这样搭配上一条的效果就是除了内网的地址其他什么都不能访问。）</code></p><p>出口路由器的入接口下启用acl（注意：一定是入接口，不能是出口，因为出口有nat转换，报文到出口的时候，是先进行nat转换再进行acl匹配的，转换了之后就没法与acl匹配了，源地址改变不受acl约束了，acl就不会起作用，所以一定是在入接口启用acl,并且该项目有两个入接口，两个都启用</p><p><img src="https://liucekai.github.io/images/b8-1.png" alt=""></p><p><code>[R1]int g0/0/1</code></p><p><code>[R1-GigabitEthernet0/0/1] traffic-filter inbound acl 3005</code></p><p><code>[R1]int g0/0/0</code></p><p><code>[R1-GigabitEthernet0/0/0] traffic-filter inbound acl 3005</code></p><p><img src="https://liucekai.github.io/images/b8-2.png" alt=""></p><hr><h3 id="步骤九：telnet远程管理配置"><a href="#步骤九：telnet远程管理配置" class="headerlink" title="步骤九：telnet远程管理配置"></a>步骤九：telnet远程管理配置</h3><p><strong>所有内网的交换机、路由器上都得配置telnet账户密码及模式</strong></p><p><strong>sw1~sw8、R1、分支R4都得配如下</strong></p><p><code>aaa</code></p><p><code>local-user hcie privilege level 3 password cipher 123</code></p><p><code>local-user hcie service-type telnet</code> </p><p><code>quit</code></p><p><code>user-interface vty 0 4</code></p><p><code>authentication-mode aaa</code></p><p><code>protocol inbound telnet</code></p><p>然后三层设备R1R4不用配管理IP，因为路由器的接口上全是Ip,任何一个都可以被telnet连接上，也不用配回包缺省，我们之前已经做好了三层之间的路由（ospf）</p><p>三层sw1和sw2分别配上管理IP和虚拟的公共管理网关IP（所有设备管理流量的网关）</p><p><img src="https://liucekai.github.io/images/b9-1.png" alt=""></p><p><img src="https://liucekai.github.io/images/b9-2.png" alt=""></p><p><strong>配二层交换机的管理IP及回包的缺省</strong></p><p><strong>Sw3</strong></p><p><code>interface Vlanif999</code></p><p> <code>ip address 192.168.255.3 255.255.255.0</code></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.255.1</code></p><p><strong>如果不配置这条缺省，当这台设备需要被管理的时候，客户端发来的包他是没办法发回去的，因为该二层设备没有回到核心上的路由</strong></p><p><strong>SW4</strong></p><p><code>interface Vlanif999</code></p><p> <code>ip address 192.168.255.4 255.255.255.0</code></p><p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.255.1</code></p><p><strong>SW5 6 7 8 几乎都一样，只是ip不一样</strong></p><p>由于模拟器的Pc不支持telnet，所以只能用dhcp路由器来测试一下</p><p><img src="https://liucekai.github.io/images/b9-3.png" alt=""></p><p><img src="https://liucekai.github.io/images/b9-4.png" alt=""></p><p><u><strong>注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1</strong></u></p><hr><h3 id="步骤十：stp优化相关技术"><a href="#步骤十：stp优化相关技术" class="headerlink" title="步骤十：stp优化相关技术"></a>步骤十：stp优化相关技术</h3><p>①  在各接入交换机上的所有下联口（除了上联口之外的e口）启用边缘端口</p><p><strong>Sw5</strong>（用批量分组去划分）</p><p><code>[JR_sw5]port-group group-member e0/0/2 to e0/0/22</code> </p><p><code>[JR_sw5-port-group]stp edged-port enable</code></p><p><strong>Sw6、7、8略</strong></p><p>② 两核心上联路由器的这两个接口取消stp的功能，以免接口down或up影响stp收敛</p><p><code>[HX_sw1]int g0/0/6</code></p><p><code>[HX_sw1-GigabitEthernet0/0/6]stp disable</code></p><p><code>[HX_sw2]int g0/0/6</code></p><p><code>[HX_sw2-GigabitEthernet0/0/6]stp disable</code></p><p>③ 把eth-trunk链路的cost值配成静态的，避免某条链路down了之后重新计算cost值</p><p>先查看原来cost默认是多少</p><p><img src="https://liucekai.github.io/images/b10-1.png" alt=""></p><p>所以我们就静态成10000，保持一致</p><p><strong>Eth-trunk2：sw1—sw2</strong></p><p><strong>Sw1</strong></p><p><code>[HX_sw1]int Eth-Trunk 2</code></p><p><code>[HX_sw1-Eth-Trunk2]stp instance 1 cos</code> </p><p><code>[HX_sw1-Eth-Trunk2]stp instance 1 cost 10000（注意我们mstp是有两个实例的，别忘了这一点）</code></p><p><code>[HX_sw1-Eth-Trunk2]stp instance 2 cost 10000</code></p><p><strong>Sw2</strong></p><p><code>[HX_sw2]int Eth-Trunk 2</code></p><p><code>[HX_sw2-Eth-Trunk2]stp ins</code> </p><p><code>[HX_sw2-Eth-Trunk2]stp instance 1 cos</code> </p><p><code>[HX_sw2-Eth-Trunk2]stp instance 1 cost 10000</code></p><p><code>[HX_sw2-Eth-Trunk2]stp instance 2 cost 10000</code></p><p><strong>Eth-trunk1：sw5—sw6</strong></p><p><img src="https://liucekai.github.io/images/b10-2.png" alt=""></p><p><strong>Sw3</strong></p><p><code>[HJ_sw3]int Eth-Trunk 1</code></p><p><code>[HJ_sw3-Eth-Trunk1]stp instance 1 cost 99999</code></p><p><code>[HJ_sw3-Eth-Trunk1]stp instance 2 cost 99999</code></p><p> <strong>Sw6</strong>.</p><p><code>[JR_sw6]int Eth-Trunk 1</code></p><p><code>[JR_sw6-Eth-Trunk1]stp cost 99999(sw6没有配置mstp)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;确保分支可以访问总部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;企业内网划分多个vlan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出口配置NAT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁止vlan5访问外网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有设备，在任何位置都能telnet远程管理
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>园区网</title>
    <link href="https://liucekai.github.io/2020/06/02/hello-world/"/>
    <id>https://liucekai.github.io/2020/06/02/hello-world/</id>
    <published>2020-06-02T05:37:36.000Z</published>
    <updated>2020-06-02T05:37:36.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一个博客</title>
    <link href="https://liucekai.github.io/2020/06/02/test-my-site/"/>
    <id>https://liucekai.github.io/2020/06/02/test-my-site/</id>
    <published>2020-06-02T05:37:36.000Z</published>
    <updated>2020-06-02T05:37:36.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>综合布线</title>
    <link href="https://liucekai.github.io/2020/06/02/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF/"/>
    <id>https://liucekai.github.io/2020/06/02/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF/</id>
    <published>2020-06-02T05:37:36.000Z</published>
    <updated>2020-06-02T05:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="智能大厦简介"><a href="#智能大厦简介" class="headerlink" title="智能大厦简介"></a>智能大厦简介</h3><p>智能在于5A（automatic 自动）</p><p>BA楼宇自动化：系统集成、楼宇自控系统</p><p>OA办公自动化：集成管理系统、触摸查询</p><p>FA消防自动化：消防报警系统、背景音乐系统…<a id="more"></a></p><p>SA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统</p><p><strong>CA通信自动化</strong>：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、<strong>综合布线系统</strong></p><p><strong>虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合</strong></p><hr><h3 id="综合布线系统—子系统"><a href="#综合布线系统—子系统" class="headerlink" title="综合布线系统—子系统"></a>综合布线系统—子系统</h3><h4 id="工作区子系统（服务区子系统）"><a href="#工作区子系统（服务区子系统）" class="headerlink" title="工作区子系统（服务区子系统）"></a>工作区子系统（服务区子系统）</h4><p>由跳线与信息插座所连接的终端设备组成</p><p>信息插座：墙面型、地面型、桌面型等</p><p>终端设备：电话机、计算机、传真机、报警探头、摄像机、监视器、各种传感器件、各种音响设备</p><h4 id="水平子系统（配线子系统）"><a href="#水平子系统（配线子系统）" class="headerlink" title="水平子系统（配线子系统）"></a>水平子系统（配线子系统）</h4><p>工作区信息插座模块、模块到楼层管理间的连接缆线、配线架、跳线等组成，实现<strong>工作区与管理间之间的连接</strong></p><h4 id="管理间子系统"><a href="#管理间子系统" class="headerlink" title="管理间子系统"></a>管理间子系统</h4><h4 id="垂直子系统（干线子系统）"><a href="#垂直子系统（干线子系统）" class="headerlink" title="垂直子系统（干线子系统）"></a>垂直子系统（干线子系统）</h4><p>用于连接管理间子系统与设备间子系统，</p><p>注意事项：</p><p>垂直子系统使用光缆</p><p>垂直子系统应为星型拓扑结构垂直子系统干线光缆的拐弯处不要用直角拐弯</p><p>干线电缆和光缆布线的交接不应超过两次</p><p>从楼层配线到建筑群配线架之间只应有一个配线架</p><h4 id="设备间子系统"><a href="#设备间子系统" class="headerlink" title="设备间子系统"></a>设备间子系统</h4><h4 id="进线间子系统"><a href="#进线间子系统" class="headerlink" title="进线间子系统"></a>进线间子系统</h4><h4 id="建筑群子系统"><a href="#建筑群子系统" class="headerlink" title="建筑群子系统"></a>建筑群子系统</h4><hr><h3 id="综合布线系统—线缆"><a href="#综合布线系统—线缆" class="headerlink" title="综合布线系统—线缆"></a>综合布线系统—线缆</h3><h4 id="双绞线的数据传输"><a href="#双绞线的数据传输" class="headerlink" title="双绞线的数据传输"></a><strong>双绞线的数据传输</strong></h4><p>1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）</p><p><img src="https://liucekai.github.io/images/zh1.png" alt=""></p><h4 id="T568A和T568B线序"><a href="#T568A和T568B线序" class="headerlink" title="T568A和T568B线序"></a>T568A和T568B线序</h4><p>图</p><h4 id="直通线缆、交叉线缆应用场景（以前）"><a href="#直通线缆、交叉线缆应用场景（以前）" class="headerlink" title="直通线缆、交叉线缆应用场景（以前）"></a>直通线缆、交叉线缆应用场景（以前）</h4><p>​        直通线缆                              交叉线缆</p><p>交换机&lt;—&gt;路由器              交换机&lt;—&gt;交换机</p><p>交换机&lt;—&gt;PC                     交换机&lt;—&gt;集线器</p><p>交换机&lt;—&gt;服务器              集线器&lt;—&gt;路由器</p><p>集线器&lt;—&gt;PC                     路由器&lt;—&gt;路由器</p><p>集线器&lt;—&gt;服务器              路由器&lt;—&gt;PC</p><p>​                                             PC&lt;—&gt;PC</p><p>图</p><p><u><strong>现在随着技术的发展，新一代的网络设备，比如三层交换机之间可以支持直通电缆，路由器之间也可以支持直通电缆了</strong></u><u><strong>，甚至路由器和pc也可以</strong></u></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;智能大厦简介&quot;&gt;&lt;a href=&quot;#智能大厦简介&quot; class=&quot;headerlink&quot; title=&quot;智能大厦简介&quot;&gt;&lt;/a&gt;智能大厦简介&lt;/h3&gt;&lt;p&gt;智能在于5A（automatic 自动）&lt;/p&gt;
&lt;p&gt;BA楼宇自动化：系统集成、楼宇自控系统&lt;/p&gt;
&lt;p&gt;OA办公自动化：集成管理系统、触摸查询&lt;/p&gt;
&lt;p&gt;FA消防自动化：消防报警系统、背景音乐系统…
    
    </summary>
    
    
    
  </entry>
  
</feed>
