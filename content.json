{"meta":{"title":"Hexo","subtitle":"","description":"","author":"CeKai","url":"https://liucekai.github.io","root":"/"},"pages":[{}],"posts":[{"title":"sever2008-DNS服务器配置","date":"2020-06-05T01:00:00.000Z","path":"2020/06/05/DNS服务器配置/","text":"要求： 掌握DNS的安装与配置 掌握DNF正向查询和反向查询的功能和配置方法 建立正向区域（通过域名解析IP） 区域名称即你希望被访问的域名，如baidu.com 新建主机 即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。 所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的) 建立反向区域（通过IP解析域名） 建立之后更新PTR，反向区域列表则会出现相应的反向指针 为了测试，建立一个对应的web网站 并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求 通过管理工具打开高级安全防火墙进行配置：新建规则-&gt;所有程序-&gt;协议类型：TCP-&gt;本地端口为特定端口：80-&gt;远程端口为所有端口-&gt;下一步 测试 克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址 访问","raw":"---\ntitle: sever2008-DNS服务器配置\ndate: 2020-06-05 9:00:00\n---\n\n### 要求：\n\n- 掌握DNS的安装与配置\n- 掌握DNF正向查询和反向查询的功能和配置方法<!-- more -->\n\n**建立正向区域（通过域名解析IP）**\n\n区域名称即你希望被访问的域名，如baidu.com\n\n![](https://liucekai.github.io/images/dns-1.png)\n\n**新建主机**\n\n即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。\n\n所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的)\n\n![](https://liucekai.github.io/images/dns-2.png)\n\n**建立反向区域（通过IP解析域名）**\n\n![](https://liucekai.github.io/images/dns-3.png)\n\n建立之后更新PTR，反向区域列表则会出现相应的反向指针\n\n![](https://liucekai.github.io/images/dns-4.png)\n\n为了测试，建立一个对应的web网站\n\n![](https://liucekai.github.io/images/dns-6.png)\n\n并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求\n\n通过管理工具打开高级安全防火墙进行配置：新建规则->所有程序->协议类型：TCP->本地端口为特定端口：80->远程端口为所有端口->下一步\n\n**测试**\n\n克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址\n\n![](https://liucekai.github.io/images/dns-5.png)\n\n访问\n\n![](https://liucekai.github.io/images/dns-7.png)\n\n![](https://liucekai.github.io/images/dns-8.png)","content":"<h3 id=\"要求：\"><a href=\"#要求：\" class=\"headerlink\" title=\"要求：\"></a>要求：</h3><ul>\n<li>掌握DNS的安装与配置</li>\n<li>掌握DNF正向查询和反向查询的功能和配置方法<a id=\"more\"></a></li>\n</ul>\n<p><strong>建立正向区域（通过域名解析IP）</strong></p>\n<p>区域名称即你希望被访问的域名，如baidu.com</p>\n<p><img src=\"https://liucekai.github.io/images/dns-1.png\" alt=\"\"></p>\n<p><strong>新建主机</strong></p>\n<p>即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。</p>\n<p>所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的)</p>\n<p><img src=\"https://liucekai.github.io/images/dns-2.png\" alt=\"\"></p>\n<p><strong>建立反向区域（通过IP解析域名）</strong></p>\n<p><img src=\"https://liucekai.github.io/images/dns-3.png\" alt=\"\"></p>\n<p>建立之后更新PTR，反向区域列表则会出现相应的反向指针</p>\n<p><img src=\"https://liucekai.github.io/images/dns-4.png\" alt=\"\"></p>\n<p>为了测试，建立一个对应的web网站</p>\n<p><img src=\"https://liucekai.github.io/images/dns-6.png\" alt=\"\"></p>\n<p>并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求</p>\n<p>通过管理工具打开高级安全防火墙进行配置：新建规则-&gt;所有程序-&gt;协议类型：TCP-&gt;本地端口为特定端口：80-&gt;远程端口为所有端口-&gt;下一步</p>\n<p><strong>测试</strong></p>\n<p>克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址</p>\n<p><img src=\"https://liucekai.github.io/images/dns-5.png\" alt=\"\"></p>\n<p>访问</p>\n<p><img src=\"https://liucekai.github.io/images/dns-7.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/dns-8.png\" alt=\"\"></p>\n","slug":"DNS服务器配置","updated":"2020-06-05T04:52:30.777Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/05/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/","excerpt":"要求： 掌握DNS的安装与配置 掌握DNF正向查询和反向查询的功能和配置方法","categories":[],"tags":[]},{"title":"server2008-Web服务器基本配置","date":"2020-06-04T02:00:00.000Z","path":"2020/06/04/server 2008/","text":"Web服务器配置配置之前需要先安装（在服务器管理器上添加角色） 基本配置：网站名称、物理路径（主目录） 路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致 绑定设置域名（即主机名），也可以绑定ip地址 文档配置：默认文档、也可以添加，删除（主页） 想用别的默认文档当网站主页可以自己添加 身份验证配置：属于安全配置，一般设匿名身份验证 IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围 可以添加或删除IP规则 输入环回地址或者本机IP访问也是一样","raw":"---\ntitle: server2008-Web服务器基本配置\ndate: 2020-06-04 10:00:00\n\n---\n\n## Web服务器配置\n\n**配置之前需要先安装（在服务器管理器上添加角色）**<!-- more -->\n\n- #### 基本配置：网站名称、物理路径（主目录）\n\n  ![](https://liucekai.github.io/images/08-1.png)\n\n  路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致\n\n  ![](https://liucekai.github.io/images/08-2.png)\n\n  绑定设置域名（即主机名），也可以绑定ip地址\n\n- #### 文档配置：默认文档、也可以添加，删除（主页）\n\n  ![](https://liucekai.github.io/images/08-3.png)\n\n  想用别的默认文档当网站主页可以自己添加\n\n- #### 身份验证配置：属于安全配置，一般设匿名身份验证\n\n  ![](https://liucekai.github.io/images/08-4.png)\n\n- #### IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\n\n  ![](https://liucekai.github.io/images/08-5.png)\n\n可以添加或删除IP规则\n\n![](https://liucekai.github.io/images/08-6.png)\n\n输入环回地址或者本机IP访问也是一样\n\n![](https://liucekai.github.io/images/08-7.png)","content":"<h2 id=\"Web服务器配置\"><a href=\"#Web服务器配置\" class=\"headerlink\" title=\"Web服务器配置\"></a>Web服务器配置</h2><p><strong>配置之前需要先安装（在服务器管理器上添加角色）</strong><a id=\"more\"></a></p>\n<ul>\n<li><h4 id=\"基本配置：网站名称、物理路径（主目录）\"><a href=\"#基本配置：网站名称、物理路径（主目录）\" class=\"headerlink\" title=\"基本配置：网站名称、物理路径（主目录）\"></a>基本配置：网站名称、物理路径（主目录）</h4><p><img src=\"https://liucekai.github.io/images/08-1.png\" alt=\"\"></p>\n<p>路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致</p>\n<p><img src=\"https://liucekai.github.io/images/08-2.png\" alt=\"\"></p>\n<p>绑定设置域名（即主机名），也可以绑定ip地址</p>\n</li>\n<li><h4 id=\"文档配置：默认文档、也可以添加，删除（主页）\"><a href=\"#文档配置：默认文档、也可以添加，删除（主页）\" class=\"headerlink\" title=\"文档配置：默认文档、也可以添加，删除（主页）\"></a>文档配置：默认文档、也可以添加，删除（主页）</h4><p><img src=\"https://liucekai.github.io/images/08-3.png\" alt=\"\"></p>\n<p>想用别的默认文档当网站主页可以自己添加</p>\n</li>\n<li><h4 id=\"身份验证配置：属于安全配置，一般设匿名身份验证\"><a href=\"#身份验证配置：属于安全配置，一般设匿名身份验证\" class=\"headerlink\" title=\"身份验证配置：属于安全配置，一般设匿名身份验证\"></a>身份验证配置：属于安全配置，一般设匿名身份验证</h4><p><img src=\"https://liucekai.github.io/images/08-4.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\"><a href=\"#IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\" class=\"headerlink\" title=\"IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\"></a>IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围</h4><p><img src=\"https://liucekai.github.io/images/08-5.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>可以添加或删除IP规则</p>\n<p><img src=\"https://liucekai.github.io/images/08-6.png\" alt=\"\"></p>\n<p>输入环回地址或者本机IP访问也是一样</p>\n<p><img src=\"https://liucekai.github.io/images/08-7.png\" alt=\"\"></p>\n","slug":"server 2008","updated":"2020-06-05T02:53:45.673Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/04/server%202008/","excerpt":"Web服务器配置配置之前需要先安装（在服务器管理器上添加角色）","categories":[],"tags":[]},{"title":"redhat基本操作","date":"2020-06-03T11:37:36.000Z","path":"2020/06/03/redhat基本操作/","text":"redhat基本操作Init 3 进入非图形化界面 Startx 进入图形化界面 Init 5 进入图形化界面 Vim /etc/inittab编辑开机默认界面： Id:5:initdefault 改成 Id:3:initdefault :Wq!保存，Reboot重启，随后开机就是非图形化界面了 root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$ Pwd显示当前目录 最前面的/表示根目录 Cd 进入某目录（必须是完整的路径，即绝对路径） 除非在对应的路径下配合.一起用，相对路径（而且./可以省略） Cd ..返回上一级目录，..表示上一级，.表示当前 Cd -表示回到上一次待的位置 Cp复制，mv移动/剪切（Mv还有重命名的功能） Rm删除文件 rm -fr强制删除文件和文件夹 *表示所有 Shutdown -h 20二十分钟后关机 Shutdown -c取消关机 ~表示root目录，即家目录 Ls 显示当前目录的内容 Init 5：切换为图形化界面 不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹 Mkdir在当前位置新建文件夹 Touch 1 创建文件1","raw":"---\ntitle: redhat基本操作\ndate: 2020-06-03 19:37:36\n---\n\n\n\n## redhat基本操作\n\nInit 3 进入非图形化界面\n\nStartx 进入图形化界面\n\nInit 5 进入图形化界面<!-- more -->\n\nVim /etc/inittab编辑开机默认界面：\n\nId:5:initdefault 改成 Id:3:initdefault\n\n:Wq!保存，Reboot重启，随后开机就是非图形化界面了\n\n![](https://liucekai.github.io/images/r1-1.png)\n\n root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$\n\nPwd显示当前目录\n\n最前面的/表示根目录\n\nCd 进入某目录（必须是完整的路径，即绝对路径）\n\n![](https://liucekai.github.io/images/r1-2.png)\n\n除非在对应的路径下配合.一起用，相对路径（而且./可以省略）\n\n![](https://liucekai.github.io/images/r1-3.png)\n\nCd ..返回上一级目录，..表示上一级，.表示当前\n\nCd -表示回到上一次待的位置\n\n![](https://liucekai.github.io/images/r1-4.png)\n\nCp复制，mv移动/剪切（Mv还有重命名的功能）\n\n![](https://liucekai.github.io/images/r1-5.png)\n\n![](https://liucekai.github.io/images/r1-6.png)\n\nRm删除文件  rm -fr强制删除文件和文件夹\n\n![](https://liucekai.github.io/images/r1-7.png)\n\n*表示所有\n\n![](https://liucekai.github.io/images/r1-8.png)\n\nShutdown -h 20二十分钟后关机\n\nShutdown -c取消关机\n\n![](https://liucekai.github.io/images/r1-9.png)\n\n~表示root目录，即家目录\n\nLs 显示当前目录的内容\n\nInit 5：切换为图形化界面\n\n![](https://liucekai.github.io/images/r1-10.png)\n\n不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹\n\n\n\nMkdir在当前位置新建文件夹\n\n![](https://liucekai.github.io/images/r1-11.png)\n\nTouch 1  创建文件1","content":"<h2 id=\"redhat基本操作\"><a href=\"#redhat基本操作\" class=\"headerlink\" title=\"redhat基本操作\"></a>redhat基本操作</h2><p>Init 3 进入非图形化界面</p>\n<p>Startx 进入图形化界面</p>\n<p>Init 5 进入图形化界面<a id=\"more\"></a></p>\n<p>Vim /etc/inittab编辑开机默认界面：</p>\n<p>Id:5:initdefault 改成 Id:3:initdefault</p>\n<p>:Wq!保存，Reboot重启，随后开机就是非图形化界面了</p>\n<p><img src=\"https://liucekai.github.io/images/r1-1.png\" alt=\"\"></p>\n<p> root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$</p>\n<p>Pwd显示当前目录</p>\n<p>最前面的/表示根目录</p>\n<p>Cd 进入某目录（必须是完整的路径，即绝对路径）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-2.png\" alt=\"\"></p>\n<p>除非在对应的路径下配合.一起用，相对路径（而且./可以省略）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-3.png\" alt=\"\"></p>\n<p>Cd ..返回上一级目录，..表示上一级，.表示当前</p>\n<p>Cd -表示回到上一次待的位置</p>\n<p><img src=\"https://liucekai.github.io/images/r1-4.png\" alt=\"\"></p>\n<p>Cp复制，mv移动/剪切（Mv还有重命名的功能）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-5.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/r1-6.png\" alt=\"\"></p>\n<p>Rm删除文件  rm -fr强制删除文件和文件夹</p>\n<p><img src=\"https://liucekai.github.io/images/r1-7.png\" alt=\"\"></p>\n<p>*表示所有</p>\n<p><img src=\"https://liucekai.github.io/images/r1-8.png\" alt=\"\"></p>\n<p>Shutdown -h 20二十分钟后关机</p>\n<p>Shutdown -c取消关机</p>\n<p><img src=\"https://liucekai.github.io/images/r1-9.png\" alt=\"\"></p>\n<p>~表示root目录，即家目录</p>\n<p>Ls 显示当前目录的内容</p>\n<p>Init 5：切换为图形化界面</p>\n<p><img src=\"https://liucekai.github.io/images/r1-10.png\" alt=\"\"></p>\n<p>不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹</p>\n<p>Mkdir在当前位置新建文件夹</p>\n<p><img src=\"https://liucekai.github.io/images/r1-11.png\" alt=\"\"></p>\n<p>Touch 1  创建文件1</p>\n","slug":"redhat基本操作","updated":"2020-06-04T05:23:12.561Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/03/redhat%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"redhat基本操作Init 3 进入非图形化界面 Startx 进入图形化界面 Init 5 进入图形化界面","categories":[],"tags":[]},{"title":"1000人冗余型企业网","date":"2020-06-02T12:30:00.000Z","path":"2020/06/02/1000人冗余型企业网/","text":"需求分析 确保分支可以访问总部 企业内网划分多个vlan 出口配置NAT 禁止vlan5访问外网 所有设备，在任何位置都能telnet远程管理 设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡 所有用户均为自动获取ip地址，并配置相关dhcp安全技术 一定程度上实现负载均衡\\分担、链路冗余 在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问 设计原则 减少广播域大小，提高网络稳定性 减少设备收敛时间、将stp优化 提高内网设备安全性 acl合理控制 设备尽量实现负载均衡\\分担、链路冗余详细方案 详细方案步骤一：底层eth-trunk 、vlan（含修剪）、trunketh-trunk配置： SW1 Int eth-trunk 2 mode lacp-static trunkport g0/0/2 trunkport g0/0/3 SW2 Int eth-trunk 2 mode lacp-static trunkport g0/0/2 trunkport g0/0/1 SW3 Int eth-trunk 1 mode lacp-static trunkport e0/0/4 trunkport e0/0/5 SW6 Int eth-trunk 1 mode lacp-static trunkport e0/0/1 trunkport e0/0/3 Vlan、trunk配置（一号楼） SW5: vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 999 interface Ethernet0/0/2 port link-type access port default vlan 2 SW6: vlan batch 2 to 5 200 999 interface Eth-Trunk1 port link-type trunk port trunk allow-pass vlan 3 999 interface Ethernet0/0/2 port link-type access port default vlan 3 SW3: vlan batch 2 to 5 200 999 interface Eth-Trunk1 port link-type trunk port trunk allow-pass vlan 3 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围） interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 2 to 3 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/3 port link-type trunk port trunk allow-pass vlan 2 999 vlan、trunk配置（2号楼） SW7 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface Ethernet0/0/2 port link-type access port default vlan 4 interface Ethernet0/0/3 port link-type access port default vlan 5 SW4 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 4 to 5 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 4 to 5 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/3 port link-type trunk port trunk allow-pass vlan 4 to 5 99 SW8 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 200 999 interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 200 999 interface Ethernet0/0/3 port link-type access port default vlan 200 interface Ethernet0/0/4 port link-type access port default vlan 200 SW1 vlan batch 2 to 5 200 800 999（vlan 800是用于access口的，vlan只能从属一个access口） interface Eth-Trunk2 port link-type trunk port trunk allow-pass vlan 2 to 5 200 999 mode lacp-static interface GigabitEthernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 to 3 999 interface GigabitEthernet0/0/4 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface GigabitEthernet0/0/5 port link-type trunk port trunk allow-pass vlan 200 999 interface GigabitEthernet0/0/6 port link-type access port default vlan 800 SW2 Vlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801） interface Eth-Trunk2 port link-type trunk port trunk allow-pass vlan 2 to 5 200 999 mode lacp-static interface GigabitEthernet0/0/3 port link-type trunk port trunk allow-pass vlan 200 999 interface GigabitEthernet0/0/4 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface GigabitEthernet0/0/5 port link-type trunk port trunk allow-pass vlan 2 to 3 999 interface GigabitEthernet0/0/6 port link-type access port default vlan 801 步骤二：MSTP（二层冗余）（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果） SW1 全局模式下 stp region-configuration（启用stp，进入STP配置） region-name aa（设置MSTP的域名为aa） revision-level 1（设置MSTP修订版本号为1） instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1） instance 2 vlan 4 to 5（将vlan 4 5映射到实例2） active region-configuration（激活以上的配置） 由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略 设置优先级 SW1 全局模式下 stp instance 1 root primary（把SW1设置为实例1的根桥） stp instance 2 root secondary（把SW1设置为实例2的备份桥） SW2 stp instance 1 root secondary stp instance 2 root primary 可以实现vlan 2 3 200的流量从sw1往上走 Vlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡 检查 发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过） SW4也达到预期 步骤三：VRRP（三层冗余）（这一步包含svi了） VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信 SW1 interface Vlanif2 ip address 192.168.2.254 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.2.1 vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器） interface Vlanif3 ip address 192.168.3.254 255.255.255.0 vrrp vrid 3 virtual-ip 192.168.3.1 vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器） interface Vlanif4 ip address 192.168.4.254 255.255.255.0 vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级） interface Vlanif5 ip address 192.168.5.254 255.255.255.0 vrrp vrid 5 virtual-ip 192.168.5.1 interface Vlanif200 ip address 192.168.200.254 255.255.255.0 vrrp vrid 200 virtual-ip 192.168.200.1 vrrp vrid 200 priority 105 SW2 interface Vlanif2 ip address 192.168.2.253 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.2.1 interface Vlanif3 ip address 192.168.3.253 255.255.255.0 vrrp vrid 3 virtual-ip 192.168.3.1 interface Vlanif4 ip address 192.168.4.253 255.255.255.0 vrrp vrid 4 virtual-ip 192.168.4.1 vrrp vrid 4 priority 105 interface Vlanif5 ip address 192.168.5.253 255.255.255.0 vrrp vrid 5 virtual-ip 192.168.5.1 vrrp vrid 5 priority 105 interface Vlanif200 ip address 192.168.200.253 255.255.255.0 vrrp vrid 200 virtual-ip 192.168.200.1 达到了预期 因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。 检查 还没做dhcp，先用静态ip检测一下: 补：vlan800和vlan801从属access口的ip配置: interface Vlanif800 ip address 192.168.12.2 255.255.255.0 interface Vlanif801 ip address 192.168.23.2 255.255.255.0 步骤四：BFD（检测引擎假死）引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来 本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上 在sw1和r1分别创建bfd并命名为bb SW1 [全局]Bfd [bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto Commit（bb是取名） R1 [全局]bfd [bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto commit 检查 bb上的track：** interface Vlanif2 vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口} vrrp vrid 2 track bfd-session session-name bb（track上联口） interface Vlanif3 vrrp vrid 3 track interface GigabitEthernet0/0/1 vrrp vrid 3 track bfd-session session-name bb `` interface Vlanif200 vrrp vrid 200 track interface GigabitEthernet0/0/1 vrrp vrid 200 track bfd-session session-name bb （这些几乎一样的配置可以通过刷脚本去配） 在sw2和r1分别创建bfd并命名为cc Sw2 bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto commit R1 bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto commit 检查 interface Vlanif4 vrrp vrid 4 track interface GigabitEthernet0/0/4 vrrp vrid 4 track bfd-session session-name cc interface Vlanif5 vrrp vrid 5 track interface GigabitEthernet0/0/4 vrrp vrid 5 track bfd-session session-name cc 步骤五：OSPF、NAT① ospf先查看有哪些直连网段 发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里 SW1 ospf 1 area 0.0.0.0 network 192.168.2.0 0.0.0.255 network 192.168.3.0 0.0.0.255 network 192.168.4.0 0.0.0.255 network 192.168.5.0 0.0.0.255 network 192.168.200.0 0.0.0.255 network 192.168.12.0 0.0.0.255 Sw2 ospf 1 area 0.0.0.0 network 192.168.2.0 0.0.0.255 network 192.168.3.0 0.0.0.255 network 192.168.4.0 0.0.0.255 network 192.168.5.0 0.0.0.255 network 192.168.200.0 0.0.0.255 network 192.168.12.0 0.0.0.255 给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关） 完了查看R1接口 注意：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略 R4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了 再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：ip route-static 0.0.0.0 0.0.0.0 192.168.200.1） 做完ospf之后，用户访问分支、服务器都没问题 ②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）R2、R3、R5运行rip： R2 rip 1 version 2（版本号为2） network 12.0.0.0（宣告主类，这里为A类） network 25.0.0.0 R3 rip 1 version 2 network 13.0.0.0 network 35.0.0.0 R5 rip 1 version 2 network 25.0.0.0 network 35.0.0.0 network 5.0.0.0 做完rip之后，查看电信路由器，发现已经学到了R5的路由 可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题 电信ping联通 此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证. 用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条 Sw1 ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选） 发送到Sw2时 ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65 有了到出口路由的缺省，还需要出口路由到运营商的缺省 R1 联通的缺省 ip route-static 0.0.0.0 0.0.0.0 13.1.1.2 电信的 ip route-static 0.0.0.0 0.0.0.0 12.1.1.2 即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去 Nat之easy ip acl 2000 rule permit source 192.168.0.0 0.0.255.255（） interface GigabitEthernet1/0/0 nat outbound 2000 interface GigabitEthernet0/0/2 nat outbound 2000 检测是否能到达外网并且路线是否能按照我们预想的走。 能到外网 但是tracert有点bug（模拟器的问题） 原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由 优化一下试试 对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1 对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2 优化之后，可以看到只有一条路由 测试发现还是有问题 这里先留个问题 起码路线是对的 检测冗余效果，去掉一些链路 这里收敛时间较长，后面优化一下 步骤六：DHCP中继（服务器做地址池）dhcp enable ip pool vlan2 gateway-list 192.168.2.1 network 192.168.2.0 mask 255.255.255.0 dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址） 一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置） excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需） 通过刷脚本配置其他池（别忘了排除） 接着在接口下启用dhcp（现实情况中不需要，直接用windows服务器或linux服务器做就行） interface Ethernet0/0/0 dhcp select global 这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继 Sw1上 dhcp enable interface Vlanif2 dhcp select relay dhcp relay server-ip 192.168.200.3 同样配置其他vlanif接口345，略 接着就可以了 在本项目中用服务器做地址池的好处有，支持备份，即使两台核心有一台挂了，一样可以拿到地址。 Dhcp安全技术：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备 （如TP-Link）扰乱我们的地址分配服务 在用户接入层交换机配置如下 SW5 [JR_sw5]dhcp enable [JR_sw5]dhcp snooping enable [JR_sw5]int vlanif 2 [JR_sw5-Vlanif2]dhcp snooping enable [JR_sw5]int e0/0/1 [JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任) SW6 [JR_sw6]dhcp enable [JR_sw6]dhcp snooping enable [JR_sw6]int vlanif 3 [JR_sw6-Vlanif3]dhcp snooping enable [JR_sw5]int eth-trunk 1 [JR_sw5-eth-trunk-1]dhcp snooping trusted SW7 [JR_sw7]dhcp enable [JR_sw7]dhcp snooping enable [JR_sw7]int vlanif 4 [JR_sw7-Vlanif4]dhcp snooping enable [JR_sw7]int vlanif 5 [JR_sw7-Vlanif5]dhcp snooping enable [JR_sw7]int e0/0/1 [JR_sw7-Ethernet0/0/1]dhcp snooping trusted 步骤七：NAT—Server（服务器端口映射）因为要求映射到联通公网，所以在R1的g1/0/0口上配置映射 interface GigabitEthernet1/0/0 nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface 也可以写成该接口ip地址13.1.1.1） 配置服务器的基本配置 为了测试，在外网添加一个客户端 IP7.7.7.7 网关7.7.7.1配置在R5上 步骤八：ACL访问控制列表 步骤九：telnet远程管理配置 步骤十：stp优化相关技术","raw":"---\ntitle: 1000人冗余型企业网\ndate: 2020-06-2 20:30:00\n\n---\n\n## 需求分析\n\n- 确保分支可以访问总部\n\n- 企业内网划分多个vlan\n\n- 出口配置NAT\n\n- 禁止vlan5访问外网\n\n- 所有设备，在任何位置都能telnet远程管理<!-- more -->\n\n- 设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡\n\n- 所有用户均为自动获取ip地址，并配置相关dhcp安全技术\n\n- 一定程度上实现负载均衡\\分担、链路冗余\n\n- 在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问\n\n------\n\n## 设计原则\n\n- 减少广播域大小，提高网络稳定性\n\n- 减少设备收敛时间、将stp优化\n\n- 提高内网设备安全性\n\n- acl合理控制\n\n- 设备尽量实现负载均衡\\分担、链路冗余详细方案\n\n------\n\n## 详细方案\n\n### 步骤一：底层eth-trunk 、vlan（含修剪）、trunk\n\n**eth-trunk配置：**\n\n**SW1**\n\n`Int eth-trunk 2`\n\n`mode lacp-static`\n\n`trunkport g0/0/2`\n\n`trunkport g0/0/3`\n\n**SW2**\n\n`Int eth-trunk 2`\n\n`mode lacp-static`\n\n`trunkport g0/0/2`\n\n`trunkport g0/0/1`\n\n**SW3**\n\n`Int eth-trunk 1`\n\n`mode lacp-static`\n\n`trunkport e0/0/4`\n\n`trunkport e0/0/5`\n\n**SW6**\n\n`Int eth-trunk 1`\n\n`mode lacp-static`\n\n`trunkport e0/0/1`\n\n`trunkport e0/0/3`\n\n**Vlan、trunk配置（一号楼）**\n\n**SW5:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 2`\n\n**SW6:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Eth-Trunk1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 3 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 3`\n\n**SW3:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Eth-Trunk1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 3 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围）`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 999`\n\n**vlan、trunk配置（2号楼）**\n\n**SW7**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 4`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type access`\n\n `port default vlan 5`\n\n \n\n**SW4**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 99`\n\n**SW8**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type access`\n\n `port default vlan 200`\n\n\n\n`interface Ethernet0/0/4`\n\n `port link-type access`\n\n `port default vlan 200`\n\n**SW1**\n\n`vlan batch 2 to 5 200 800 999`（vlan 800是用于access口的，vlan只能从属一个access口）\n\n\n\n`interface Eth-Trunk2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 5 200 999`\n\n `mode lacp-static`\n\n\n\n`interface GigabitEthernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n\n\n`interface GigabitEthernet0/0/4`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface GigabitEthernet0/0/5`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface GigabitEthernet0/0/6`\n\n `port link-type access`\n\n `port default vlan 800`\n\n**SW2**\n\nVlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801）\n\n\n\n`interface Eth-Trunk2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 5 200 999`\n\n `mode lacp-static`\n\n\n\n`interface GigabitEthernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface GigabitEthernet0/0/4`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface GigabitEthernet0/0/5`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n\n\n`interface GigabitEthernet0/0/6`\n\n `port link-type access`\n\n `port default vlan 801`\n\n------\n\n### 步骤二：MSTP（二层冗余）\n\n（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果）\n\n**SW1**\n\n**全局模式下**\n\n`stp region-configuration（启用stp，进入STP配置）`\n\n `region-name aa（设置MSTP的域名为aa）`\n\n `revision-level 1（设置MSTP修订版本号为1）`\n\n `instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1）`\n\n `instance 2 vlan 4 to 5（将vlan 4 5映射到实例2）`\n\n `active region-configuration（激活以上的配置）`\n\n**由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略**\n\n \n\n \n\n**设置优先级**\n\n**SW1**\n\n**全局模式下**   \n\n![b2-3](https://liucekai.github.io/images/b2-3.png)\n\n`stp instance 1 root primary（把SW1设置为实例1的根桥）`\n\n`stp instance 2 root secondary（把SW1设置为实例2的备份桥）`\n\n**SW2**\n\n`stp instance 1 root secondary`\n\n`stp instance 2 root primary`\n\n可以实现vlan 2 3 200的流量从sw1往上走\n\nVlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡\n\n检查\n\n发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过）\n\n![b2-1](https://liucekai.github.io/images/b2-1.jpg)\n\nSW4也达到预期\n\n![b2-2](https://liucekai.github.io/images/b2-2.png)\n\n\n\n------\n\n### 步骤三：VRRP（三层冗余）\n\n**（这一步包含svi了）**\n\n**VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信**\n\n**SW1**\n\n`interface Vlanif2`\n\n `ip address 192.168.2.254 255.255.255.0`\n\n `vrrp vrid 2 virtual-ip 192.168.2.1`\n\n `vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器）`\n\n\n\n`interface Vlanif3`\n\n `ip address 192.168.3.254 255.255.255.0`\n\n `vrrp vrid 3 virtual-ip 192.168.3.1`\n\n `vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器）`\n\n\n\n`interface Vlanif4`\n\n `ip address 192.168.4.254 255.255.255.0`\n\n `vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级）`\n\n\n\n`interface Vlanif5`\n\n `ip address 192.168.5.254 255.255.255.0`\n\n `vrrp vrid 5 virtual-ip 192.168.5.1`\n\n\n\n`interface Vlanif200`\n\n `ip address 192.168.200.254 255.255.255.0`\n\n `vrrp vrid 200 virtual-ip 192.168.200.1`\n\n `vrrp vrid 200 priority 105`\n\n \n\n**SW2**\n\n`interface Vlanif2`\n\n `ip address 192.168.2.253 255.255.255.0`\n\n `vrrp vrid 2 virtual-ip 192.168.2.1`\n\n\n\n`interface Vlanif3`\n\n `ip address 192.168.3.253 255.255.255.0`\n\n `vrrp vrid 3 virtual-ip 192.168.3.1`\n\n\n\n`interface Vlanif4`\n\n `ip address 192.168.4.253 255.255.255.0`\n\n `vrrp vrid 4 virtual-ip 192.168.4.1`\n\n `vrrp vrid 4 priority 105`\n\n\n\n`interface Vlanif5`\n\n `ip address 192.168.5.253 255.255.255.0`\n\n `vrrp vrid 5 virtual-ip 192.168.5.1`\n\n `vrrp vrid 5 priority 105`\n\n\n\n`interface Vlanif200`\n\n `ip address 192.168.200.253 255.255.255.0`\n\n `vrrp vrid 200 virtual-ip 192.168.200.1`\n\n![](https://liucekai.github.io/images/b3-1.png)\n\n![](https://liucekai.github.io/images/b3-2.png)\n\n达到了预期\n\n因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。\n\n**检查**\n\n还没做dhcp，先用静态ip检测一下:\n\n![](https://liucekai.github.io/images/b3-3.png)\n\n![](https://liucekai.github.io/images/b3-4.png)\n\n![](https://liucekai.github.io/images/b3-5.png)\n\n**补：vlan800和vlan801从属access口的ip配置**:\n\n`interface Vlanif800`\n\n `ip address 192.168.12.2 255.255.255.0`\n\n`interface Vlanif801`\n\n `ip address 192.168.23.2 255.255.255.0`\n\n------\n\n### 步骤四：BFD（检测引擎假死）\n\n引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来\n\n本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上\n\n**在sw1和r1分别创建bfd并命名为bb**\n\n**SW1**\n\n`[全局]Bfd`\n\n`[bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto`\n\n`Commit（bb是取名）`\n\n**R1**\n\n`[全局]bfd`\n\n`[bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto`\n\n `commit`\n\n**检查**\n\n![](https://liucekai.github.io/images/b4-1.png)\n\n![](https://liucekai.github.io/images/b4-2.png)\n\n**bb上的track：****\n\n`interface Vlanif2`\n\n`vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口}`\n\n`vrrp vrid 2 track bfd-session session-name bb（track上联口）`\n\n\n\n`interface Vlanif3`\n\n`vrrp vrid 3 track interface GigabitEthernet0/0/1`\n\n`vrrp vrid 3 track bfd-session session-name bb`\n\n`` \n\n`interface Vlanif200`\n\n`vrrp vrid 200 track interface GigabitEthernet0/0/1`\n\n`vrrp vrid 200 track bfd-session session-name bb`\n\n**（这些几乎一样的配置可以通过刷脚本去配）**\n\n**在sw2和r1分别创建bfd并命名为cc**\n\n**Sw2**\n\n`bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto`\n\n `commit`\n\n**R1**\n\n`bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto`\n\n `commit`\n\n**检查**\n\n![](https://liucekai.github.io/images/b4-3.png)\n\n`interface Vlanif4`\n\n`vrrp vrid 4 track interface GigabitEthernet0/0/4`\n\n`vrrp vrid 4 track bfd-session session-name cc`\n\n\n\n`interface Vlanif5`\n\n`vrrp vrid 5 track interface GigabitEthernet0/0/4`\n\n`vrrp vrid 5 track bfd-session session-name cc`\n\n------\n\n### 步骤五：OSPF、NAT\n\n#### **① ospf**\n\n先查看有哪些直连网段\n\n发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里\n\n![](https://liucekai.github.io/images/b5-1.png)\n\n**SW1**\n\n`ospf 1` \n\n`area 0.0.0.0`\n\n  `network 192.168.2.0 0.0.0.255`\n\n  `network 192.168.3.0 0.0.0.255`\n\n  `network 192.168.4.0 0.0.0.255`\n\n  `network 192.168.5.0 0.0.0.255`\n\n  `network 192.168.200.0 0.0.0.255`\n\n  `network 192.168.12.0 0.0.0.255`\n\n![](https://liucekai.github.io/images/b5-2.png)\n\n**Sw2**\n\n`ospf 1`\n\n`area 0.0.0.0`\n\n `network 192.168.2.0 0.0.0.255`\n\n `network 192.168.3.0 0.0.0.255`\n\n `network 192.168.4.0 0.0.0.255`\n\n `network 192.168.5.0 0.0.0.255`\n\n `network 192.168.200.0 0.0.0.255`\n\n `network 192.168.12.0 0.0.0.255`\n\n给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关）\n\n完了查看R1接口\n\n![](https://liucekai.github.io/images/b5-3.png)\n\n**注意**：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略\n\nR4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了\n\n![](https://liucekai.github.io/images/b5-4.png)\n\n![](https://liucekai.github.io/images/b5-5.png)\n\n![](https://liucekai.github.io/images/b5-6.png)\n\n![](https://liucekai.github.io/images/b5-7.png)\n\n再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：`ip route-static 0.0.0.0 0.0.0.0 192.168.200.1`）\n\n![](https://liucekai.github.io/images/b5-8.png)\n\n做完ospf之后，用户访问分支、服务器都没问题\n\n------\n\n#### **②NAT**（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\n\n**R2、R3、R5运行rip：**\n\n**R2**\n\n`rip 1`\n\n `version 2（版本号为2）`\n\n `network 12.0.0.0（宣告主类，这里为A类）`\n\n `network 25.0.0.0`\n\n**R3**\n\n`rip 1`\n\n `version 2`\n\n `network 13.0.0.0`\n\n `network 35.0.0.0`\n\n**R5**\n\n`rip 1`\n\n `version 2`\n\n `network 25.0.0.0`\n\n `network 35.0.0.0`\n\n `network 5.0.0.0`\n\n做完rip之后，查看电信路由器，发现已经学到了R5的路由\n\n![](https://liucekai.github.io/images/b5-9.png)\n\n可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题\n\n![](https://liucekai.github.io/images/b5-10.png)\n\n电信ping联通\n\n![](https://liucekai.github.io/images/b5-11.png)\n\n此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证.\n\n用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条\n\n**Sw1**\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.12.1`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选）`\n\n**发送到Sw2时**\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.23.1`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65`\n\n有了到出口路由的缺省，还需要出口路由到运营商的缺省\n\n**R1**\n\n**联通的缺省**\n\nip route-static 0.0.0.0 0.0.0.0 13.1.1.2\n\n**电信的**\n\nip route-static 0.0.0.0 0.0.0.0 12.1.1.2\n\n即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去\n\n![](https://liucekai.github.io/images/b5-12.png)\n\n**Nat之easy ip**\n\n`acl 2000`\n\n`rule permit source 192.168.0.0 0.0.255.255（）`\n\n`interface GigabitEthernet1/0/0`\n\n`nat outbound 2000`\n\n`interface GigabitEthernet0/0/2`\n\n`nat outbound 2000`\n\n![](https://liucekai.github.io/images/b5-13.png)\n\n![](https://liucekai.github.io/images/b5-14.png)\n\n检测是否能到达外网并且路线是否能按照我们预想的走。\n\n能到外网\n\n![](https://liucekai.github.io/images/b5-15.png)\n\n但是tracert有点bug（模拟器的问题）\n\n![](https://liucekai.github.io/images/b5-16.png)\n\n原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由\n\n![](https://liucekai.github.io/images/b5-17.png)\n\n![](https://liucekai.github.io/images/b5-18.png)\n\n优化一下试试\n\n对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1\n\n对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2\n\n![](https://liucekai.github.io/images/b5-19.png)\n\n![](https://liucekai.github.io/images/b5-20.png)\n\n优化之后，可以看到只有一条路由\n\n![](https://liucekai.github.io/images/b5-21.png)\n\n测试发现还是有问题\n\n![](https://liucekai.github.io/images/b5-22.png)\n\n**这里先留个问题**\n\n起码路线是对的\n\n![](https://liucekai.github.io/images/b5-23.png)\n\n![](https://liucekai.github.io/images/b5-24.png)\n\n![](https://liucekai.github.io/images/b5-25.png)\n\n检测冗余效果，去掉一些链路\n\n![](https://liucekai.github.io/images/b5-26.png)\n\n![](https://liucekai.github.io/images/b5-27.png)\n\n![](https://liucekai.github.io/images/b5-28.png)\n\n这里收敛时间较长，后面优化一下\n\n![](https://liucekai.github.io/images/b5-29.png)\n\n![](https://liucekai.github.io/images/b5-30.png)\n\n------\n\n### 步骤六：DHCP中继（服务器做地址池）\n\n`dhcp enable`\n\n`ip pool vlan2`\n\n `gateway-list 192.168.2.1`\n\n `network 192.168.2.0 mask 255.255.255.0`\n\n `dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址）`\n\n**一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置）**\n\n`excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需）`\n\n通过刷脚本配置其他池（别忘了排除）\n\n![](https://liucekai.github.io/images/b6-1.png)\n\n接着在**接口下启用dhcp**（现实情况中不需要，直接用windows服务器或linux服务器做就行）\n\n`interface Ethernet0/0/0`\n\n`dhcp select global`\n\n这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继\n\n**Sw1上**\n\n`dhcp enable`\n\n`interface Vlanif2`\n\n`dhcp select relay`\n\n `dhcp relay server-ip 192.168.200.3`\n\n 同样配置其他vlanif接口345，略\n\n接着就可以了\n\n![](https://liucekai.github.io/images/b6-2.png)\n\n![](https://liucekai.github.io/images/b6-3.png)\n\n在本项目中**用服务器做地址池**的好处有，**支持备份**，即使两台核心有一台挂了，一样可以拿到地址。\n\n**Dhcp安全技术**：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备\n\n（如TP-Link）扰乱我们的地址分配服务\n\n在用户接入层交换机配置如下\n\n**SW5**\n\n`[JR_sw5]dhcp enable` \n\n`[JR_sw5]dhcp snooping enable`\n\n`[JR_sw5]int vlanif 2`\n\n`[JR_sw5-Vlanif2]dhcp snooping enable`\n\n`[JR_sw5]int e0/0/1`\n\n`[JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任)`\n\n**SW6**\n\n`[JR_sw6]dhcp enable` \n\n`[JR_sw6]dhcp snooping enable`\n\n`[JR_sw6]int vlanif 3`\n\n`[JR_sw6-Vlanif3]dhcp snooping enable`\n\n`[JR_sw5]int eth-trunk 1`\n\n`[JR_sw5-eth-trunk-1]dhcp snooping trusted`\n\n**SW7**\n\n`[JR_sw7]dhcp enable` \n\n`[JR_sw7]dhcp snooping enable`\n\n`[JR_sw7]int vlanif 4`\n\n`[JR_sw7-Vlanif4]dhcp snooping enable`\n\n`[JR_sw7]int vlanif 5`\n\n`[JR_sw7-Vlanif5]dhcp snooping enable`\n\n`[JR_sw7]int e0/0/1`\n\n`[JR_sw7-Ethernet0/0/1]dhcp snooping trusted`\n\n![](https://liucekai.github.io/images/b6-4.png)\n\n------\n\n### 步骤七：NAT—Server（服务器端口映射）\n\n因为要求映射到联通公网，所以在**R1**的**g1/0/0口**上配置映射\n\n`interface GigabitEthernet1/0/0`\n\n`nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface`\n\n也可以写成该接口ip地址13.1.1.1）\n\n配置服务器的基本配置\n\n![](https://liucekai.github.io/images/b7-1.png)\n\n**为了测试，在外网添加一个客户端**\n\nIP7.7.7.7\n\n网关7.7.7.1配置在**R5**上\n\n![](https://liucekai.github.io/images/b7-2.png)\n\n------\n\n### 步骤八：ACL访问控制列表\n\n------\n\n### 步骤九：telnet远程管理配置\n\n------\n\n### 步骤十：stp优化相关技术\n\n\n\n","content":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ul>\n<li><p>确保分支可以访问总部</p>\n</li>\n<li><p>企业内网划分多个vlan</p>\n</li>\n<li><p>出口配置NAT</p>\n</li>\n<li><p>禁止vlan5访问外网</p>\n</li>\n<li><p>所有设备，在任何位置都能telnet远程管理<a id=\"more\"></a></p>\n</li>\n<li><p>设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡</p>\n</li>\n<li><p>所有用户均为自动获取ip地址，并配置相关dhcp安全技术</p>\n</li>\n<li><p>一定程度上实现负载均衡\\分担、链路冗余</p>\n</li>\n<li><p>在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><ul>\n<li><p>减少广播域大小，提高网络稳定性</p>\n</li>\n<li><p>减少设备收敛时间、将stp优化</p>\n</li>\n<li><p>提高内网设备安全性</p>\n</li>\n<li><p>acl合理控制</p>\n</li>\n<li><p>设备尽量实现负载均衡\\分担、链路冗余详细方案</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"详细方案\"><a href=\"#详细方案\" class=\"headerlink\" title=\"详细方案\"></a>详细方案</h2><h3 id=\"步骤一：底层eth-trunk-、vlan（含修剪）、trunk\"><a href=\"#步骤一：底层eth-trunk-、vlan（含修剪）、trunk\" class=\"headerlink\" title=\"步骤一：底层eth-trunk 、vlan（含修剪）、trunk\"></a>步骤一：底层eth-trunk 、vlan（含修剪）、trunk</h3><p><strong>eth-trunk配置：</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>Int eth-trunk 2</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport g0/0/2</code></p>\n<p><code>trunkport g0/0/3</code></p>\n<p><strong>SW2</strong></p>\n<p><code>Int eth-trunk 2</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport g0/0/2</code></p>\n<p><code>trunkport g0/0/1</code></p>\n<p><strong>SW3</strong></p>\n<p><code>Int eth-trunk 1</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport e0/0/4</code></p>\n<p><code>trunkport e0/0/5</code></p>\n<p><strong>SW6</strong></p>\n<p><code>Int eth-trunk 1</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport e0/0/1</code></p>\n<p><code>trunkport e0/0/3</code></p>\n<p><strong>Vlan、trunk配置（一号楼）</strong></p>\n<p><strong>SW5:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 2</code></p>\n<p><strong>SW6:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Eth-Trunk1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 3 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 3</code></p>\n<p><strong>SW3:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Eth-Trunk1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 3 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围）</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 999</code></p>\n<p><strong>vlan、trunk配置（2号楼）</strong></p>\n<p><strong>SW7</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 4</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 5</code></p>\n<p><strong>SW4</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 99</code></p>\n<p><strong>SW8</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 200</code></p>\n<p><code>interface Ethernet0/0/4</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 200</code></p>\n<p><strong>SW1</strong></p>\n<p><code>vlan batch 2 to 5 200 800 999</code>（vlan 800是用于access口的，vlan只能从属一个access口）</p>\n<p><code>interface Eth-Trunk2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p>\n<p> <code>mode lacp-static</code></p>\n<p><code>interface GigabitEthernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>interface GigabitEthernet0/0/4</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface GigabitEthernet0/0/5</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface GigabitEthernet0/0/6</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 800</code></p>\n<p><strong>SW2</strong></p>\n<p>Vlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801）</p>\n<p><code>interface Eth-Trunk2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p>\n<p> <code>mode lacp-static</code></p>\n<p><code>interface GigabitEthernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface GigabitEthernet0/0/4</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface GigabitEthernet0/0/5</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>interface GigabitEthernet0/0/6</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 801</code></p>\n<hr>\n<h3 id=\"步骤二：MSTP（二层冗余）\"><a href=\"#步骤二：MSTP（二层冗余）\" class=\"headerlink\" title=\"步骤二：MSTP（二层冗余）\"></a>步骤二：MSTP（二层冗余）</h3><p>（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果）</p>\n<p><strong>SW1</strong></p>\n<p><strong>全局模式下</strong></p>\n<p><code>stp region-configuration（启用stp，进入STP配置）</code></p>\n<p> <code>region-name aa（设置MSTP的域名为aa）</code></p>\n<p> <code>revision-level 1（设置MSTP修订版本号为1）</code></p>\n<p> <code>instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1）</code></p>\n<p> <code>instance 2 vlan 4 to 5（将vlan 4 5映射到实例2）</code></p>\n<p> <code>active region-configuration（激活以上的配置）</code></p>\n<p><strong>由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略</strong></p>\n<p><strong>设置优先级</strong></p>\n<p><strong>SW1</strong></p>\n<p><strong>全局模式下</strong>   </p>\n<p><img src=\"https://liucekai.github.io/images/b2-3.png\" alt=\"b2-3\"></p>\n<p><code>stp instance 1 root primary（把SW1设置为实例1的根桥）</code></p>\n<p><code>stp instance 2 root secondary（把SW1设置为实例2的备份桥）</code></p>\n<p><strong>SW2</strong></p>\n<p><code>stp instance 1 root secondary</code></p>\n<p><code>stp instance 2 root primary</code></p>\n<p>可以实现vlan 2 3 200的流量从sw1往上走</p>\n<p>Vlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡</p>\n<p>检查</p>\n<p>发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过）</p>\n<p><img src=\"https://liucekai.github.io/images/b2-1.jpg\" alt=\"b2-1\"></p>\n<p>SW4也达到预期</p>\n<p><img src=\"https://liucekai.github.io/images/b2-2.png\" alt=\"b2-2\"></p>\n<hr>\n<h3 id=\"步骤三：VRRP（三层冗余）\"><a href=\"#步骤三：VRRP（三层冗余）\" class=\"headerlink\" title=\"步骤三：VRRP（三层冗余）\"></a>步骤三：VRRP（三层冗余）</h3><p><strong>（这一步包含svi了）</strong></p>\n<p><strong>VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p> <code>ip address 192.168.2.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p>\n<p> <code>vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p>\n<p><code>interface Vlanif3</code></p>\n<p> <code>ip address 192.168.3.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p>\n<p> <code>vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p>\n<p><code>interface Vlanif4</code></p>\n<p> <code>ip address 192.168.4.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级）</code></p>\n<p><code>interface Vlanif5</code></p>\n<p> <code>ip address 192.168.5.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p>\n<p><code>interface Vlanif200</code></p>\n<p> <code>ip address 192.168.200.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p>\n<p> <code>vrrp vrid 200 priority 105</code></p>\n<p><strong>SW2</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p> <code>ip address 192.168.2.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p>\n<p><code>interface Vlanif3</code></p>\n<p> <code>ip address 192.168.3.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p>\n<p><code>interface Vlanif4</code></p>\n<p> <code>ip address 192.168.4.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 4 virtual-ip 192.168.4.1</code></p>\n<p> <code>vrrp vrid 4 priority 105</code></p>\n<p><code>interface Vlanif5</code></p>\n<p> <code>ip address 192.168.5.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p>\n<p> <code>vrrp vrid 5 priority 105</code></p>\n<p><code>interface Vlanif200</code></p>\n<p> <code>ip address 192.168.200.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p>\n<p><img src=\"https://liucekai.github.io/images/b3-1.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-2.png\" alt=\"\"></p>\n<p>达到了预期</p>\n<p>因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。</p>\n<p><strong>检查</strong></p>\n<p>还没做dhcp，先用静态ip检测一下:</p>\n<p><img src=\"https://liucekai.github.io/images/b3-3.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-4.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-5.png\" alt=\"\"></p>\n<p><strong>补：vlan800和vlan801从属access口的ip配置</strong>:</p>\n<p><code>interface Vlanif800</code></p>\n<p> <code>ip address 192.168.12.2 255.255.255.0</code></p>\n<p><code>interface Vlanif801</code></p>\n<p> <code>ip address 192.168.23.2 255.255.255.0</code></p>\n<hr>\n<h3 id=\"步骤四：BFD（检测引擎假死）\"><a href=\"#步骤四：BFD（检测引擎假死）\" class=\"headerlink\" title=\"步骤四：BFD（检测引擎假死）\"></a>步骤四：BFD（检测引擎假死）</h3><p>引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来</p>\n<p>本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上</p>\n<p><strong>在sw1和r1分别创建bfd并命名为bb</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>[全局]Bfd</code></p>\n<p><code>[bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto</code></p>\n<p><code>Commit（bb是取名）</code></p>\n<p><strong>R1</strong></p>\n<p><code>[全局]bfd</code></p>\n<p><code>[bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>检查</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b4-1.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b4-2.png\" alt=\"\"></p>\n<p><strong>bb上的track：**</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p><code>vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口}</code></p>\n<p><code>vrrp vrid 2 track bfd-session session-name bb（track上联口）</code></p>\n<p><code>interface Vlanif3</code></p>\n<p><code>vrrp vrid 3 track interface GigabitEthernet0/0/1</code></p>\n<p><code>vrrp vrid 3 track bfd-session session-name bb</code></p>\n<p>`` </p>\n<p><code>interface Vlanif200</code></p>\n<p><code>vrrp vrid 200 track interface GigabitEthernet0/0/1</code></p>\n<p><code>vrrp vrid 200 track bfd-session session-name bb</code></p>\n<p><strong>（这些几乎一样的配置可以通过刷脚本去配）</strong></p>\n<p><strong>在sw2和r1分别创建bfd并命名为cc</strong></p>\n<p><strong>Sw2</strong></p>\n<p><code>bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>R1</strong></p>\n<p><code>bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>检查</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b4-3.png\" alt=\"\"></p>\n<p><code>interface Vlanif4</code></p>\n<p><code>vrrp vrid 4 track interface GigabitEthernet0/0/4</code></p>\n<p><code>vrrp vrid 4 track bfd-session session-name cc</code></p>\n<p><code>interface Vlanif5</code></p>\n<p><code>vrrp vrid 5 track interface GigabitEthernet0/0/4</code></p>\n<p><code>vrrp vrid 5 track bfd-session session-name cc</code></p>\n<hr>\n<h3 id=\"步骤五：OSPF、NAT\"><a href=\"#步骤五：OSPF、NAT\" class=\"headerlink\" title=\"步骤五：OSPF、NAT\"></a>步骤五：OSPF、NAT</h3><h4 id=\"①-ospf\"><a href=\"#①-ospf\" class=\"headerlink\" title=\"① ospf\"></a><strong>① ospf</strong></h4><p>先查看有哪些直连网段</p>\n<p>发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里</p>\n<p><img src=\"https://liucekai.github.io/images/b5-1.png\" alt=\"\"></p>\n<p><strong>SW1</strong></p>\n<p><code>ospf 1</code> </p>\n<p><code>area 0.0.0.0</code></p>\n<p>  <code>network 192.168.2.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.3.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.4.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.5.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.200.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.12.0 0.0.0.255</code></p>\n<p><img src=\"https://liucekai.github.io/images/b5-2.png\" alt=\"\"></p>\n<p><strong>Sw2</strong></p>\n<p><code>ospf 1</code></p>\n<p><code>area 0.0.0.0</code></p>\n<p> <code>network 192.168.2.0 0.0.0.255</code></p>\n<p> <code>network 192.168.3.0 0.0.0.255</code></p>\n<p> <code>network 192.168.4.0 0.0.0.255</code></p>\n<p> <code>network 192.168.5.0 0.0.0.255</code></p>\n<p> <code>network 192.168.200.0 0.0.0.255</code></p>\n<p> <code>network 192.168.12.0 0.0.0.255</code></p>\n<p>给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关）</p>\n<p>完了查看R1接口</p>\n<p><img src=\"https://liucekai.github.io/images/b5-3.png\" alt=\"\"></p>\n<p><strong>注意</strong>：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略</p>\n<p>R4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了</p>\n<p><img src=\"https://liucekai.github.io/images/b5-4.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-5.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-6.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-7.png\" alt=\"\"></p>\n<p>再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：<code>ip route-static 0.0.0.0 0.0.0.0 192.168.200.1</code>）</p>\n<p><img src=\"https://liucekai.github.io/images/b5-8.png\" alt=\"\"></p>\n<p>做完ospf之后，用户访问分支、服务器都没问题</p>\n<hr>\n<h4 id=\"②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\"><a href=\"#②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\" class=\"headerlink\" title=\"②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\"></a><strong>②NAT</strong>（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）</h4><p><strong>R2、R3、R5运行rip：</strong></p>\n<p><strong>R2</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2（版本号为2）</code></p>\n<p> <code>network 12.0.0.0（宣告主类，这里为A类）</code></p>\n<p> <code>network 25.0.0.0</code></p>\n<p><strong>R3</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2</code></p>\n<p> <code>network 13.0.0.0</code></p>\n<p> <code>network 35.0.0.0</code></p>\n<p><strong>R5</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2</code></p>\n<p> <code>network 25.0.0.0</code></p>\n<p> <code>network 35.0.0.0</code></p>\n<p> <code>network 5.0.0.0</code></p>\n<p>做完rip之后，查看电信路由器，发现已经学到了R5的路由</p>\n<p><img src=\"https://liucekai.github.io/images/b5-9.png\" alt=\"\"></p>\n<p>可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题</p>\n<p><img src=\"https://liucekai.github.io/images/b5-10.png\" alt=\"\"></p>\n<p>电信ping联通</p>\n<p><img src=\"https://liucekai.github.io/images/b5-11.png\" alt=\"\"></p>\n<p>此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证.</p>\n<p>用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条</p>\n<p><strong>Sw1</strong></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选）</code></p>\n<p><strong>发送到Sw2时</strong></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65</code></p>\n<p>有了到出口路由的缺省，还需要出口路由到运营商的缺省</p>\n<p><strong>R1</strong></p>\n<p><strong>联通的缺省</strong></p>\n<p>ip route-static 0.0.0.0 0.0.0.0 13.1.1.2</p>\n<p><strong>电信的</strong></p>\n<p>ip route-static 0.0.0.0 0.0.0.0 12.1.1.2</p>\n<p>即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去</p>\n<p><img src=\"https://liucekai.github.io/images/b5-12.png\" alt=\"\"></p>\n<p><strong>Nat之easy ip</strong></p>\n<p><code>acl 2000</code></p>\n<p><code>rule permit source 192.168.0.0 0.0.255.255（）</code></p>\n<p><code>interface GigabitEthernet1/0/0</code></p>\n<p><code>nat outbound 2000</code></p>\n<p><code>interface GigabitEthernet0/0/2</code></p>\n<p><code>nat outbound 2000</code></p>\n<p><img src=\"https://liucekai.github.io/images/b5-13.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-14.png\" alt=\"\"></p>\n<p>检测是否能到达外网并且路线是否能按照我们预想的走。</p>\n<p>能到外网</p>\n<p><img src=\"https://liucekai.github.io/images/b5-15.png\" alt=\"\"></p>\n<p>但是tracert有点bug（模拟器的问题）</p>\n<p><img src=\"https://liucekai.github.io/images/b5-16.png\" alt=\"\"></p>\n<p>原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由</p>\n<p><img src=\"https://liucekai.github.io/images/b5-17.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-18.png\" alt=\"\"></p>\n<p>优化一下试试</p>\n<p>对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1</p>\n<p>对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2</p>\n<p><img src=\"https://liucekai.github.io/images/b5-19.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-20.png\" alt=\"\"></p>\n<p>优化之后，可以看到只有一条路由</p>\n<p><img src=\"https://liucekai.github.io/images/b5-21.png\" alt=\"\"></p>\n<p>测试发现还是有问题</p>\n<p><img src=\"https://liucekai.github.io/images/b5-22.png\" alt=\"\"></p>\n<p><strong>这里先留个问题</strong></p>\n<p>起码路线是对的</p>\n<p><img src=\"https://liucekai.github.io/images/b5-23.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-24.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-25.png\" alt=\"\"></p>\n<p>检测冗余效果，去掉一些链路</p>\n<p><img src=\"https://liucekai.github.io/images/b5-26.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-27.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-28.png\" alt=\"\"></p>\n<p>这里收敛时间较长，后面优化一下</p>\n<p><img src=\"https://liucekai.github.io/images/b5-29.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-30.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤六：DHCP中继（服务器做地址池）\"><a href=\"#步骤六：DHCP中继（服务器做地址池）\" class=\"headerlink\" title=\"步骤六：DHCP中继（服务器做地址池）\"></a>步骤六：DHCP中继（服务器做地址池）</h3><p><code>dhcp enable</code></p>\n<p><code>ip pool vlan2</code></p>\n<p> <code>gateway-list 192.168.2.1</code></p>\n<p> <code>network 192.168.2.0 mask 255.255.255.0</code></p>\n<p> <code>dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址）</code></p>\n<p><strong>一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置）</strong></p>\n<p><code>excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需）</code></p>\n<p>通过刷脚本配置其他池（别忘了排除）</p>\n<p><img src=\"https://liucekai.github.io/images/b6-1.png\" alt=\"\"></p>\n<p>接着在<strong>接口下启用dhcp</strong>（现实情况中不需要，直接用windows服务器或linux服务器做就行）</p>\n<p><code>interface Ethernet0/0/0</code></p>\n<p><code>dhcp select global</code></p>\n<p>这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继</p>\n<p><strong>Sw1上</strong></p>\n<p><code>dhcp enable</code></p>\n<p><code>interface Vlanif2</code></p>\n<p><code>dhcp select relay</code></p>\n<p> <code>dhcp relay server-ip 192.168.200.3</code></p>\n<p> 同样配置其他vlanif接口345，略</p>\n<p>接着就可以了</p>\n<p><img src=\"https://liucekai.github.io/images/b6-2.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b6-3.png\" alt=\"\"></p>\n<p>在本项目中<strong>用服务器做地址池</strong>的好处有，<strong>支持备份</strong>，即使两台核心有一台挂了，一样可以拿到地址。</p>\n<p><strong>Dhcp安全技术</strong>：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备</p>\n<p>（如TP-Link）扰乱我们的地址分配服务</p>\n<p>在用户接入层交换机配置如下</p>\n<p><strong>SW5</strong></p>\n<p><code>[JR_sw5]dhcp enable</code> </p>\n<p><code>[JR_sw5]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int vlanif 2</code></p>\n<p><code>[JR_sw5-Vlanif2]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int e0/0/1</code></p>\n<p><code>[JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任)</code></p>\n<p><strong>SW6</strong></p>\n<p><code>[JR_sw6]dhcp enable</code> </p>\n<p><code>[JR_sw6]dhcp snooping enable</code></p>\n<p><code>[JR_sw6]int vlanif 3</code></p>\n<p><code>[JR_sw6-Vlanif3]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int eth-trunk 1</code></p>\n<p><code>[JR_sw5-eth-trunk-1]dhcp snooping trusted</code></p>\n<p><strong>SW7</strong></p>\n<p><code>[JR_sw7]dhcp enable</code> </p>\n<p><code>[JR_sw7]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int vlanif 4</code></p>\n<p><code>[JR_sw7-Vlanif4]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int vlanif 5</code></p>\n<p><code>[JR_sw7-Vlanif5]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int e0/0/1</code></p>\n<p><code>[JR_sw7-Ethernet0/0/1]dhcp snooping trusted</code></p>\n<p><img src=\"https://liucekai.github.io/images/b6-4.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤七：NAT—Server（服务器端口映射）\"><a href=\"#步骤七：NAT—Server（服务器端口映射）\" class=\"headerlink\" title=\"步骤七：NAT—Server（服务器端口映射）\"></a>步骤七：NAT—Server（服务器端口映射）</h3><p>因为要求映射到联通公网，所以在<strong>R1</strong>的<strong>g1/0/0口</strong>上配置映射</p>\n<p><code>interface GigabitEthernet1/0/0</code></p>\n<p><code>nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface</code></p>\n<p>也可以写成该接口ip地址13.1.1.1）</p>\n<p>配置服务器的基本配置</p>\n<p><img src=\"https://liucekai.github.io/images/b7-1.png\" alt=\"\"></p>\n<p><strong>为了测试，在外网添加一个客户端</strong></p>\n<p>IP7.7.7.7</p>\n<p>网关7.7.7.1配置在<strong>R5</strong>上</p>\n<p><img src=\"https://liucekai.github.io/images/b7-2.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤八：ACL访问控制列表\"><a href=\"#步骤八：ACL访问控制列表\" class=\"headerlink\" title=\"步骤八：ACL访问控制列表\"></a>步骤八：ACL访问控制列表</h3><hr>\n<h3 id=\"步骤九：telnet远程管理配置\"><a href=\"#步骤九：telnet远程管理配置\" class=\"headerlink\" title=\"步骤九：telnet远程管理配置\"></a>步骤九：telnet远程管理配置</h3><hr>\n<h3 id=\"步骤十：stp优化相关技术\"><a href=\"#步骤十：stp优化相关技术\" class=\"headerlink\" title=\"步骤十：stp优化相关技术\"></a>步骤十：stp优化相关技术</h3>","slug":"1000人冗余型企业网","updated":"2020-06-05T09:27:54.822Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/1000%E4%BA%BA%E5%86%97%E4%BD%99%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91/","excerpt":"需求分析 确保分支可以访问总部 企业内网划分多个vlan 出口配置NAT 禁止vlan5访问外网 所有设备，在任何位置都能telnet远程管理","categories":[],"tags":[]},{"title":"园区网","date":"2020-06-02T05:37:36.000Z","path":"2020/06/02/hello-world/","text":"","raw":"---\ntitle: 园区网\ndate: 2020-06-02 13:37:36\n\n---\n\n\n","content":"","slug":"hello-world","updated":"2020-06-02T12:30:52.699Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/hello-world/","excerpt":"","categories":[],"tags":[]},{"title":"综合布线","date":"2020-06-02T05:37:36.000Z","path":"2020/06/02/综合布线/","text":"智能大厦简介智能在于5A（automatic 自动） BA楼宇自动化：系统集成、楼宇自控系统 OA办公自动化：集成管理系统、触摸查询 FA消防自动化：消防报警系统、背景音乐系统 SA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统 CA通信自动化：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、综合布线系统 虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合 综合布线系统—线双绞线的数据传输 1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）","raw":"---\ntitle: 综合布线\ndate: 2020-06-02 13:37:36\n---\n\n### 智能大厦简介\n\n智能在于5A（automatic 自动）\n\nBA楼宇自动化：系统集成、楼宇自控系统\n\nOA办公自动化：集成管理系统、触摸查询\n\nFA消防自动化：消防报警系统、背景音乐系统\n\nSA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统\n\n**CA通信自动化**：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、**综合布线系统**\n\n**虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合**\n\n------\n\n### 综合布线系统---线\n\n**双绞线的数据传输**\n\n1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）\n\n![](https://liucekai.github.io/images/zh1.png)","content":"<h3 id=\"智能大厦简介\"><a href=\"#智能大厦简介\" class=\"headerlink\" title=\"智能大厦简介\"></a>智能大厦简介</h3><p>智能在于5A（automatic 自动）</p>\n<p>BA楼宇自动化：系统集成、楼宇自控系统</p>\n<p>OA办公自动化：集成管理系统、触摸查询</p>\n<p>FA消防自动化：消防报警系统、背景音乐系统</p>\n<p>SA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统</p>\n<p><strong>CA通信自动化</strong>：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、<strong>综合布线系统</strong></p>\n<p><strong>虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合</strong></p>\n<hr>\n<h3 id=\"综合布线系统—线\"><a href=\"#综合布线系统—线\" class=\"headerlink\" title=\"综合布线系统—线\"></a>综合布线系统—线</h3><p><strong>双绞线的数据传输</strong></p>\n<p>1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）</p>\n<p><img src=\"https://liucekai.github.io/images/zh1.png\" alt=\"\"></p>\n","slug":"综合布线","updated":"2020-06-05T08:17:59.848Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF/","excerpt":"","categories":[],"tags":[]},{"title":"我的第一个博客","date":"2020-06-02T05:37:36.000Z","path":"2020/06/02/test-my-site/","text":"","raw":"---\ntitle: 我的第一个博客\ndate: 2020-06-02 13:37:36\ntags:\n---\n","content":"","slug":"test-my-site","updated":"2020-06-02T12:30:19.445Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/test-my-site/","excerpt":"","categories":[],"tags":[]}],"categories":[],"tags":[]}