{"meta":{"title":"Hexo","subtitle":"","description":"","author":"CeKai","url":"https://liucekai.github.io","root":"/"},"pages":[{}],"posts":[{"title":"sever2008-打印服务器配置","date":"2020-06-12T01:18:36.000Z","path":"2020/06/12/打印服务器配置/","text":"要求： 安装打印服务器 连接共享打印机 管理打印服务器 添加打印机服务角色和其他服务器的添加一样 安装打印机 找到你要安的打印机型号 一定选择共享，因为这是个作为同一个域里的共享打印机，公司内部用的 安装网络共享打印机（客户端上）如果出现需要验证身份且失败的情况 尝试解决：https://www.cnblogs.com/gyzhouyong/p/5016923.html 结果还是不行，待解决","raw":"---\ntitle: sever2008-打印服务器配置\ndate: 2020-06-12 09:18:36\nupdate: 2020-06-12 11:30:36\n---\n\n### 要求：\n\n- 安装打印服务器\n- 连接共享打印机\n- 管理打印服务器<!-- more -->\n\n#### 添加打印机服务角色\n\n和其他服务器的添加一样\n\n![](https://liucekai.github.io/images/dy-1.png)\n\n#### 安装打印机\n\n![](https://liucekai.github.io/images/dy-2.png)\n\n![](https://liucekai.github.io/images/dy-3.png)\n\n找到你要安的打印机型号\n\n![](https://liucekai.github.io/images/dy-4.png)\n\n一定选择共享，因为这是个作为同一个域里的共享打印机，公司内部用的\n\n![](https://liucekai.github.io/images/dy-5.png)\n\n![](https://liucekai.github.io/images/dy-6.png)\n\n#### 安装网络共享打印机（客户端上）\n\n如果出现需要验证身份且失败的情况\n\n![](https://liucekai.github.io/images/dy-7.png)\n\n尝试解决：https://www.cnblogs.com/gyzhouyong/p/5016923.html\n\n结果还是不行，待解决","content":"<h3 id=\"要求：\"><a href=\"#要求：\" class=\"headerlink\" title=\"要求：\"></a>要求：</h3><ul>\n<li>安装打印服务器</li>\n<li>连接共享打印机</li>\n<li>管理打印服务器<a id=\"more\"></a></li>\n</ul>\n<h4 id=\"添加打印机服务角色\"><a href=\"#添加打印机服务角色\" class=\"headerlink\" title=\"添加打印机服务角色\"></a>添加打印机服务角色</h4><p>和其他服务器的添加一样</p>\n<p><img src=\"https://liucekai.github.io/images/dy-1.png\" alt=\"\"></p>\n<h4 id=\"安装打印机\"><a href=\"#安装打印机\" class=\"headerlink\" title=\"安装打印机\"></a>安装打印机</h4><p><img src=\"https://liucekai.github.io/images/dy-2.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/dy-3.png\" alt=\"\"></p>\n<p>找到你要安的打印机型号</p>\n<p><img src=\"https://liucekai.github.io/images/dy-4.png\" alt=\"\"></p>\n<p>一定选择共享，因为这是个作为同一个域里的共享打印机，公司内部用的</p>\n<p><img src=\"https://liucekai.github.io/images/dy-5.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/dy-6.png\" alt=\"\"></p>\n<h4 id=\"安装网络共享打印机（客户端上）\"><a href=\"#安装网络共享打印机（客户端上）\" class=\"headerlink\" title=\"安装网络共享打印机（客户端上）\"></a>安装网络共享打印机（客户端上）</h4><p>如果出现需要验证身份且失败的情况</p>\n<p><img src=\"https://liucekai.github.io/images/dy-7.png\" alt=\"\"></p>\n<p>尝试解决：<a href=\"https://www.cnblogs.com/gyzhouyong/p/5016923.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gyzhouyong/p/5016923.html</a></p>\n<p>结果还是不行，待解决</p>\n","slug":"打印服务器配置","updated":"2020-06-12T01:18:36.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/12/%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/","excerpt":"要求： 安装打印服务器 连接共享打印机 管理打印服务器","categories":[],"tags":[]},{"title":"CAD的应用","date":"2020-06-09T01:13:00.000Z","path":"2020/06/09/CAD的应用/","text":"CAD技术应用简介CAD技术主要运用于强电工程设计和弱电工程设计 强电工程设计（380/220V）变配电系统、动力配电系统、照明配电系统、防雷接地系统、备用电源系统 弱电工程设计(220V/50HZ以下)计算机网络工程原理图、拓扑图、系统图和施工设计图等 综合布线系统工程原理图、系统图和施工图等 语音系统工程原理图、系统图和施工图等 物联网系统工程原理图、系统图和施工图等","raw":"---\ntitle: CAD的应用\ndate: 2020-06-09 09:13:00\n\n---\n\n### CAD技术应用简介\n\nCAD技术主要运用于强电工程设计和弱电工程设计<!-- more -->\n\n#### 强电工程设计（380/220V）\n\n变配电系统、动力配电系统、照明配电系统、防雷接地系统、备用电源系统\n\n#### 弱电工程设计(220V/50HZ以下)\n\n计算机网络工程原理图、拓扑图、系统图和施工设计图等\n\n综合布线系统工程原理图、系统图和施工图等\n\n语音系统工程原理图、系统图和施工图等\n\n物联网系统工程原理图、系统图和施工图等","content":"<h3 id=\"CAD技术应用简介\"><a href=\"#CAD技术应用简介\" class=\"headerlink\" title=\"CAD技术应用简介\"></a>CAD技术应用简介</h3><p>CAD技术主要运用于强电工程设计和弱电工程设计<a id=\"more\"></a></p>\n<h4 id=\"强电工程设计（380-220V）\"><a href=\"#强电工程设计（380-220V）\" class=\"headerlink\" title=\"强电工程设计（380/220V）\"></a>强电工程设计（380/220V）</h4><p>变配电系统、动力配电系统、照明配电系统、防雷接地系统、备用电源系统</p>\n<h4 id=\"弱电工程设计-220V-50HZ以下\"><a href=\"#弱电工程设计-220V-50HZ以下\" class=\"headerlink\" title=\"弱电工程设计(220V/50HZ以下)\"></a>弱电工程设计(220V/50HZ以下)</h4><p>计算机网络工程原理图、拓扑图、系统图和施工设计图等</p>\n<p>综合布线系统工程原理图、系统图和施工图等</p>\n<p>语音系统工程原理图、系统图和施工图等</p>\n<p>物联网系统工程原理图、系统图和施工图等</p>\n","slug":"CAD的应用","updated":"2020-06-09T01:13:00.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/09/CAD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"CAD技术应用简介CAD技术主要运用于强电工程设计和弱电工程设计","categories":[],"tags":[]},{"title":"hostmonitor的使用（ensp环境下）","date":"2020-06-06T03:37:36.000Z","path":"2020/06/06/hostmonitor的使用/","text":"要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信… 拖动一个cloud进入环境中，与sw1相连(这里的cloud就可以当作是监控软件) 设置如下 选择UDP接口 点击增加 选择我们的环回网卡（别忘了提前设置环回网卡的ip地址与我们的实验环境相对应） 点击增加 出口编号为2，点击双向通道，点击增加. 与sw1相连的g0/0/7口划入access口. 可以通信sw1、2345678 但不能通信出口路由（需要配置回包路由） 并且本机也需要增加一条缺省，因为在访问与环回网卡不一致的网段时本机有可能选择其他网卡，所以为了确保本机一直使用环回网卡访问，增加一条缺省（本机即监控软件） 所有的设备都能与cloud即本机即监控软件通信了，添加设备之后才不会显示有问题 可以添加的设备类型有很多，这里不一一列举 这样就可以实现监控，并且在出现不通信时可以及时反馈","raw":"---\ntitle: hostmonitor的使用（ensp环境下）\ndate: 2020-06-06 11:37:36\n\n---\n\n要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信...<!-- more -->\n\n拖动一个cloud进入环境中，与sw1相连(这里的cloud就可以当作是监控软件)\n\n设置如下\n\n![](https://liucekai.github.io/images/monitor1.png)\n\n1. 选择UDP接口\n2. 点击增加\n3. 选择我们的环回网卡（别忘了提前设置环回网卡的ip地址与我们的实验环境相对应）\n4. 点击增加\n\n![](https://liucekai.github.io/images/monitor2.png)\n\n出口编号为2，点击双向通道，点击增加.\n\n与sw1相连的g0/0/7口划入access口.\n\n![](https://liucekai.github.io/images/monitor3.png)\n\n可以通信sw1、2345678\n\n![](https://liucekai.github.io/images/monitor4.png)\n\n![](https://liucekai.github.io/images/monitor5.png)\n\n但不能通信出口路由（需要配置回包路由）\n\n![](https://liucekai.github.io/images/monitor6.png)\n\n并且本机也需要增加一条缺省，因为在访问与环回网卡不一致的网段时本机有可能选择其他网卡，所以为了确保本机一直使用环回网卡访问，增加一条缺省（本机即监控软件）\n\n![](https://liucekai.github.io/images/monitor7.png)\n\n所有的设备都能与cloud即本机即监控软件通信了，添加设备之后才不会显示有问题\n\n![](https://liucekai.github.io/images/monitor8.png)\n\n可以添加的设备类型有很多，这里不一一列举\n\n![](https://liucekai.github.io/images/monitor9.png)\n\n![](https://liucekai.github.io/images/monitor10.png)\n\n这样就可以实现监控，并且在出现不通信时可以及时反馈","content":"<p>要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信…<a id=\"more\"></a></p>\n<p>拖动一个cloud进入环境中，与sw1相连(这里的cloud就可以当作是监控软件)</p>\n<p>设置如下</p>\n<p><img src=\"https://liucekai.github.io/images/monitor1.png\" alt=\"\"></p>\n<ol>\n<li>选择UDP接口</li>\n<li>点击增加</li>\n<li>选择我们的环回网卡（别忘了提前设置环回网卡的ip地址与我们的实验环境相对应）</li>\n<li>点击增加</li>\n</ol>\n<p><img src=\"https://liucekai.github.io/images/monitor2.png\" alt=\"\"></p>\n<p>出口编号为2，点击双向通道，点击增加.</p>\n<p>与sw1相连的g0/0/7口划入access口.</p>\n<p><img src=\"https://liucekai.github.io/images/monitor3.png\" alt=\"\"></p>\n<p>可以通信sw1、2345678</p>\n<p><img src=\"https://liucekai.github.io/images/monitor4.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/monitor5.png\" alt=\"\"></p>\n<p>但不能通信出口路由（需要配置回包路由）</p>\n<p><img src=\"https://liucekai.github.io/images/monitor6.png\" alt=\"\"></p>\n<p>并且本机也需要增加一条缺省，因为在访问与环回网卡不一致的网段时本机有可能选择其他网卡，所以为了确保本机一直使用环回网卡访问，增加一条缺省（本机即监控软件）</p>\n<p><img src=\"https://liucekai.github.io/images/monitor7.png\" alt=\"\"></p>\n<p>所有的设备都能与cloud即本机即监控软件通信了，添加设备之后才不会显示有问题</p>\n<p><img src=\"https://liucekai.github.io/images/monitor8.png\" alt=\"\"></p>\n<p>可以添加的设备类型有很多，这里不一一列举</p>\n<p><img src=\"https://liucekai.github.io/images/monitor9.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/monitor10.png\" alt=\"\"></p>\n<p>这样就可以实现监控，并且在出现不通信时可以及时反馈</p>\n","slug":"hostmonitor的使用","updated":"2020-06-06T03:37:36.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/06/hostmonitor%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"要想实现模拟环境与监控软件互相通信，我们得让我们计算机中的lookback环回网卡作为中介，因为监控软件与我们的网卡能通信，而我们需要让lookback与模拟环境通信…","categories":[],"tags":[]},{"title":"sever2008-DNS服务器配置","date":"2020-06-05T01:00:00.000Z","path":"2020/06/05/DNS服务器配置/","text":"要求： 掌握DNS的安装与配置 掌握DNF正向查询和反向查询的功能和配置方法 建立正向区域（通过域名解析IP） 区域名称即你希望被访问的域名，如baidu.com 新建主机 即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。 所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的) 建立反向区域（通过IP解析域名） 建立之后更新PTR，反向区域列表则会出现相应的反向指针 为了测试，建立一个对应的web网站 并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求 通过管理工具打开高级安全防火墙进行配置：新建规则-&gt;所有程序-&gt;协议类型：TCP-&gt;本地端口为特定端口：80-&gt;远程端口为所有端口-&gt;下一步 测试 克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址 访问","raw":"---\ntitle: sever2008-DNS服务器配置\ndate: 2020-06-05 9:00:00\n---\n\n### 要求：\n\n- 掌握DNS的安装与配置\n- 掌握DNF正向查询和反向查询的功能和配置方法<!-- more -->\n\n**建立正向区域（通过域名解析IP）**\n\n区域名称即你希望被访问的域名，如baidu.com\n\n![](https://liucekai.github.io/images/dns-1.png)\n\n**新建主机**\n\n即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。\n\n所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的)\n\n![](https://liucekai.github.io/images/dns-2.png)\n\n**建立反向区域（通过IP解析域名）**\n\n![](https://liucekai.github.io/images/dns-3.png)\n\n建立之后更新PTR，反向区域列表则会出现相应的反向指针\n\n![](https://liucekai.github.io/images/dns-4.png)\n\n为了测试，建立一个对应的web网站\n\n![](https://liucekai.github.io/images/dns-6.png)\n\n并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求\n\n通过管理工具打开高级安全防火墙进行配置：新建规则->所有程序->协议类型：TCP->本地端口为特定端口：80->远程端口为所有端口->下一步\n\n**测试**\n\n克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址\n\n![](https://liucekai.github.io/images/dns-5.png)\n\n访问\n\n![](https://liucekai.github.io/images/dns-7.png)\n\n![](https://liucekai.github.io/images/dns-8.png)","content":"<h3 id=\"要求：\"><a href=\"#要求：\" class=\"headerlink\" title=\"要求：\"></a>要求：</h3><ul>\n<li>掌握DNS的安装与配置</li>\n<li>掌握DNF正向查询和反向查询的功能和配置方法<a id=\"more\"></a></li>\n</ul>\n<p><strong>建立正向区域（通过域名解析IP）</strong></p>\n<p>区域名称即你希望被访问的域名，如baidu.com</p>\n<p><img src=\"https://liucekai.github.io/images/dns-1.png\" alt=\"\"></p>\n<p><strong>新建主机</strong></p>\n<p>即你刚刚建立区域需要绑定的Web服务器的主机，在网络互通的情况下，当别人访问一个域名，请求发送时首先交给该域名所在的DNS服务器去解析成ip地址然后交给对应的web或ftp服务器。</p>\n<p>所以这里的Ip地址输入Web或ftp服务器的地址(由于该实验DNS服务器和Web服务器在同一台虚拟机上，所以是填入本虚拟机ip，实际生活中dns主机和web主机一般是分开的)</p>\n<p><img src=\"https://liucekai.github.io/images/dns-2.png\" alt=\"\"></p>\n<p><strong>建立反向区域（通过IP解析域名）</strong></p>\n<p><img src=\"https://liucekai.github.io/images/dns-3.png\" alt=\"\"></p>\n<p>建立之后更新PTR，反向区域列表则会出现相应的反向指针</p>\n<p><img src=\"https://liucekai.github.io/images/dns-4.png\" alt=\"\"></p>\n<p>为了测试，建立一个对应的web网站</p>\n<p><img src=\"https://liucekai.github.io/images/dns-6.png\" alt=\"\"></p>\n<p>并且注意，防火墙要增加一个入站规则，因为默认情况下会拒绝外网用户的请求</p>\n<p>通过管理工具打开高级安全防火墙进行配置：新建规则-&gt;所有程序-&gt;协议类型：TCP-&gt;本地端口为特定端口：80-&gt;远程端口为所有端口-&gt;下一步</p>\n<p><strong>测试</strong></p>\n<p>克隆的虚拟机做客户端，修改该网络的首选dns服务器为我们的dns主机ip地址</p>\n<p><img src=\"https://liucekai.github.io/images/dns-5.png\" alt=\"\"></p>\n<p>访问</p>\n<p><img src=\"https://liucekai.github.io/images/dns-7.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/dns-8.png\" alt=\"\"></p>\n","slug":"DNS服务器配置","updated":"2020-06-05T01:00:00.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/05/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/","excerpt":"要求： 掌握DNS的安装与配置 掌握DNF正向查询和反向查询的功能和配置方法","categories":[],"tags":[]},{"title":"server2008-Web和ftp服务器基本配置","date":"2020-06-04T02:00:00.000Z","path":"2020/06/04/server 2008/","text":"Web服务器配置配置之前需要先安装（在服务器管理器上添加角色） 基本配置：网站名称、物理路径（主目录） 路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致 绑定设置域名（即主机名），也可以绑定ip地址 文档配置：默认文档、也可以添加，删除（主页） 想用别的默认文档当网站主页可以自己添加 身份验证配置：属于安全配置，一般设匿名身份验证 IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围 可以添加或删除IP规则 输入环回地址或者本机IP访问也是一样 FTP服务器配置安装如果在添加web角色时勾选了ftp服务，则不需要重复添加，如果没有勾选，则在“角色”里找到“角色服务”点击“添加角色服务” 我是已经添加过了，所以可以看到 接着打开IIS管理器，可以看到我们之前创建的web网站，然后新建ftp站点 物理路径作为你ftp站点的根目录 ftp站点不需要SSL 如果是公共下载站，允许匿名登录，这里先勾上（之后可以再次配置） 创建好了之后，为了方便测试，给我们之前指定的物理路径c:ftproot下新建一个“新建文本文档”，里面内容是“ftproot” 切换到克隆机上，浏览器内输入ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址） 发现可以访问（忘截图） 第二种测试方法，使用专门的ftp工具 第三种测试方法，cmd命令行输入 ftp 192.168.16.128即可连接上 配置 ip地址和域限制 效果和web的一样，指定ip或ip域允许访问或不能访问，当某Ip被拒绝时，访问ftp会被要求输入用户名和密码（因为我们安装站点时支持匿名访问和身份验证访问），但无论输入什么都不能访问，因为被限制了 SSL设置 FTP当前会话 可以显示当前连接的用户的信息 身份验证设置 如果该ftp站点不是作为一个下载站，而是一个公司内部的共享站，则取消匿名访问，只设置身份验证访问 如果这样的话，那么由于我们是一个域环境中的服务器，那么关于ftp用户的创建，需要在我们的域当中去完成 ftp用户创建用户创建之前，你得保证你的计算机已经添加好了”Active directory域服务“角色并且在该角色中创建和了一个域，详情参考https://blog.51cto.com/12476193/2123191 域创建好之后，创建用户 创建好之后，在ftproot下创建两个对应用户名的文件夹ftp1和ftp2，里面分别放ftp1文本和ftp2文本。 克隆机访问 登录用户ftp1发现，可以看到ftproot下所有文件，这样是不安全的，一个用户可以访问到其他用户的文件夹，所以我们要设置用户隔离 在设置用户隔离之前，先阅读”用户隔离帮助“ 所以我们需要删除原来创建的ftp1和ftp2文件夹，在ftproot下创建一个cekai文件夹（因为我创建域的域名就叫cekai，打开active directory用户和计算机可以看到），然后再分别创建ftp1和ftp2文件夹，里面放置文件 之后再到IIS里设置用户隔离 克隆机访问 成功隔离","raw":"---\ntitle: server2008-Web和ftp服务器基本配置\ndate: 2020-06-04 10:00:00\n\n---\n\n## Web服务器配置\n\n**配置之前需要先安装（在服务器管理器上添加角色）**<!-- more -->\n\n- #### 基本配置：网站名称、物理路径（主目录）\n\n  ![](https://liucekai.github.io/images/08-1.png)\n\n  路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致\n\n  ![](https://liucekai.github.io/images/08-2.png)\n\n  绑定设置域名（即主机名），也可以绑定ip地址\n\n- #### 文档配置：默认文档、也可以添加，删除（主页）\n\n  ![](https://liucekai.github.io/images/08-3.png)\n\n  想用别的默认文档当网站主页可以自己添加\n\n- #### 身份验证配置：属于安全配置，一般设匿名身份验证\n\n  ![](https://liucekai.github.io/images/08-4.png)\n\n- #### IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\n\n  ![](https://liucekai.github.io/images/08-5.png)\n\n可以添加或删除IP规则\n\n![](https://liucekai.github.io/images/08-6.png)\n\n输入环回地址或者本机IP访问也是一样\n\n![](https://liucekai.github.io/images/08-7.png)\n\n\n\n------\n\n## FTP服务器配置\n\n### 安装\n\n如果在添加web角色时勾选了ftp服务，则不需要重复添加，如果没有勾选，则在“角色”里找到“角色服务”点击“添加角色服务”\n\n![](https://liucekai.github.io/images/ftp-1.png)\n\n我是已经添加过了，所以可以看到\n\n接着打开IIS管理器，可以看到我们之前创建的web网站，然后新建ftp站点\n\n![](https://liucekai.github.io/images/ftp-2.png)\n\n![](https://liucekai.github.io/images/ftp-3.png)\n\n物理路径作为你ftp站点的根目录\n\n![](https://liucekai.github.io/images/ftp-4.png)\n\nftp站点不需要SSL\n\n![](https://liucekai.github.io/images/ftp-5.png)\n\n如果是公共下载站，允许匿名登录，这里先勾上（之后可以再次配置）\n\n创建好了之后，为了方便测试，给我们之前指定的物理路径c:ftproot下新建一个“新建文本文档”，里面内容是“ftproot”\n\n切换到克隆机上，浏览器内输入ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址）\n\n发现可以访问（忘截图）\n\n第二种测试方法，使用专门的ftp工具\n\n第三种测试方法，cmd命令行输入 ftp 192.168.16.128即可连接上\n\n### 配置\n\n![](https://liucekai.github.io/images/ftp-6.png)\n\n- ##### ip地址和域限制\n\n效果和web的一样，指定ip或ip域允许访问或不能访问，当某Ip被拒绝时，访问ftp会被要求输入用户名和密码（因为我们安装站点时支持匿名访问和身份验证访问），但无论输入什么都不能访问，因为被限制了\n\n- ##### SSL设置\n\n- ##### FTP当前会话\n\n![](https://liucekai.github.io/images/ftp-7.png)\n\n可以显示当前连接的用户的信息\n\n- ##### 身份验证设置\n\n如果该ftp站点不是作为一个下载站，而是一个公司内部的共享站，则取消匿名访问，只设置身份验证访问\n\n如果这样的话，那么由于我们是一个域环境中的服务器，那么关于ftp用户的创建，需要在我们的域当中去完成\n\n###### ftp用户创建\n\n用户创建之前，你得保证你的计算机已经添加好了”Active directory域服务“角色并且在该角色中创建和了一个域，详情参考https://blog.51cto.com/12476193/2123191\n\n域创建好之后，创建用户\n\n![](https://liucekai.github.io/images/ftp-8.png)\n\n![](https://liucekai.github.io/images/ftp-9.png)\n\n创建好之后，在ftproot下创建两个对应用户名的文件夹ftp1和ftp2，里面分别放ftp1文本和ftp2文本。\n\n克隆机访问\n\n![](https://liucekai.github.io/images/ftp-10.png)\n\n![](https://liucekai.github.io/images/ftp-11.png)\n\n登录用户ftp1发现，可以看到ftproot下所有文件，这样是不安全的，一个用户可以访问到其他用户的文件夹，所以我们要设置**用户隔离**\n\n在设置用户隔离之前，先阅读”用户隔离帮助“\n\n![](https://liucekai.github.io/images/ftp-12.png)\n\n所以我们需要删除原来创建的ftp1和ftp2文件夹，在ftproot下创建一个cekai文件夹（因为我创建域的域名就叫cekai，打开active directory用户和计算机可以看到），然后再分别创建ftp1和ftp2文件夹，里面放置文件\n\n之后再到IIS里设置用户隔离\n\n![](https://liucekai.github.io/images/ftp-13.png)\n\n克隆机访问\n\n![](https://liucekai.github.io/images/ftp-14.png)\n\n成功隔离","content":"<h2 id=\"Web服务器配置\"><a href=\"#Web服务器配置\" class=\"headerlink\" title=\"Web服务器配置\"></a>Web服务器配置</h2><p><strong>配置之前需要先安装（在服务器管理器上添加角色）</strong><a id=\"more\"></a></p>\n<ul>\n<li><h4 id=\"基本配置：网站名称、物理路径（主目录）\"><a href=\"#基本配置：网站名称、物理路径（主目录）\" class=\"headerlink\" title=\"基本配置：网站名称、物理路径（主目录）\"></a>基本配置：网站名称、物理路径（主目录）</h4><p><img src=\"https://liucekai.github.io/images/08-1.png\" alt=\"\"></p>\n<p>路径为网页文档的路径，这里以默认网站举例，添加新网站操作一致</p>\n<p><img src=\"https://liucekai.github.io/images/08-2.png\" alt=\"\"></p>\n<p>绑定设置域名（即主机名），也可以绑定ip地址</p>\n</li>\n<li><h4 id=\"文档配置：默认文档、也可以添加，删除（主页）\"><a href=\"#文档配置：默认文档、也可以添加，删除（主页）\" class=\"headerlink\" title=\"文档配置：默认文档、也可以添加，删除（主页）\"></a>文档配置：默认文档、也可以添加，删除（主页）</h4><p><img src=\"https://liucekai.github.io/images/08-3.png\" alt=\"\"></p>\n<p>想用别的默认文档当网站主页可以自己添加</p>\n</li>\n<li><h4 id=\"身份验证配置：属于安全配置，一般设匿名身份验证\"><a href=\"#身份验证配置：属于安全配置，一般设匿名身份验证\" class=\"headerlink\" title=\"身份验证配置：属于安全配置，一般设匿名身份验证\"></a>身份验证配置：属于安全配置，一般设匿名身份验证</h4><p><img src=\"https://liucekai.github.io/images/08-4.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\"><a href=\"#IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\" class=\"headerlink\" title=\"IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围\"></a>IP限制配置：属于安全配置，允许或拒绝一个IP或者一个IP范围</h4><p><img src=\"https://liucekai.github.io/images/08-5.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>可以添加或删除IP规则</p>\n<p><img src=\"https://liucekai.github.io/images/08-6.png\" alt=\"\"></p>\n<p>输入环回地址或者本机IP访问也是一样</p>\n<p><img src=\"https://liucekai.github.io/images/08-7.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"FTP服务器配置\"><a href=\"#FTP服务器配置\" class=\"headerlink\" title=\"FTP服务器配置\"></a>FTP服务器配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果在添加web角色时勾选了ftp服务，则不需要重复添加，如果没有勾选，则在“角色”里找到“角色服务”点击“添加角色服务”</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-1.png\" alt=\"\"></p>\n<p>我是已经添加过了，所以可以看到</p>\n<p>接着打开IIS管理器，可以看到我们之前创建的web网站，然后新建ftp站点</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-2.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/ftp-3.png\" alt=\"\"></p>\n<p>物理路径作为你ftp站点的根目录</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-4.png\" alt=\"\"></p>\n<p>ftp站点不需要SSL</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-5.png\" alt=\"\"></p>\n<p>如果是公共下载站，允许匿名登录，这里先勾上（之后可以再次配置）</p>\n<p>创建好了之后，为了方便测试，给我们之前指定的物理路径c:ftproot下新建一个“新建文本文档”，里面内容是“ftproot”</p>\n<p>切换到克隆机上，浏览器内输入<a href=\"ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址）\">ftp://192.168.16.128（16.128是刚刚服务器主机的ip地址）</a></p>\n<p>发现可以访问（忘截图）</p>\n<p>第二种测试方法，使用专门的ftp工具</p>\n<p>第三种测试方法，cmd命令行输入 ftp 192.168.16.128即可连接上</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><img src=\"https://liucekai.github.io/images/ftp-6.png\" alt=\"\"></p>\n<ul>\n<li><h5 id=\"ip地址和域限制\"><a href=\"#ip地址和域限制\" class=\"headerlink\" title=\"ip地址和域限制\"></a>ip地址和域限制</h5></li>\n</ul>\n<p>效果和web的一样，指定ip或ip域允许访问或不能访问，当某Ip被拒绝时，访问ftp会被要求输入用户名和密码（因为我们安装站点时支持匿名访问和身份验证访问），但无论输入什么都不能访问，因为被限制了</p>\n<ul>\n<li><h5 id=\"SSL设置\"><a href=\"#SSL设置\" class=\"headerlink\" title=\"SSL设置\"></a>SSL设置</h5></li>\n<li><h5 id=\"FTP当前会话\"><a href=\"#FTP当前会话\" class=\"headerlink\" title=\"FTP当前会话\"></a>FTP当前会话</h5></li>\n</ul>\n<p><img src=\"https://liucekai.github.io/images/ftp-7.png\" alt=\"\"></p>\n<p>可以显示当前连接的用户的信息</p>\n<ul>\n<li><h5 id=\"身份验证设置\"><a href=\"#身份验证设置\" class=\"headerlink\" title=\"身份验证设置\"></a>身份验证设置</h5></li>\n</ul>\n<p>如果该ftp站点不是作为一个下载站，而是一个公司内部的共享站，则取消匿名访问，只设置身份验证访问</p>\n<p>如果这样的话，那么由于我们是一个域环境中的服务器，那么关于ftp用户的创建，需要在我们的域当中去完成</p>\n<h6 id=\"ftp用户创建\"><a href=\"#ftp用户创建\" class=\"headerlink\" title=\"ftp用户创建\"></a>ftp用户创建</h6><p>用户创建之前，你得保证你的计算机已经添加好了”Active directory域服务“角色并且在该角色中创建和了一个域，详情参考<a href=\"https://blog.51cto.com/12476193/2123191\" target=\"_blank\" rel=\"noopener\">https://blog.51cto.com/12476193/2123191</a></p>\n<p>域创建好之后，创建用户</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-8.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/ftp-9.png\" alt=\"\"></p>\n<p>创建好之后，在ftproot下创建两个对应用户名的文件夹ftp1和ftp2，里面分别放ftp1文本和ftp2文本。</p>\n<p>克隆机访问</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-10.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/ftp-11.png\" alt=\"\"></p>\n<p>登录用户ftp1发现，可以看到ftproot下所有文件，这样是不安全的，一个用户可以访问到其他用户的文件夹，所以我们要设置<strong>用户隔离</strong></p>\n<p>在设置用户隔离之前，先阅读”用户隔离帮助“</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-12.png\" alt=\"\"></p>\n<p>所以我们需要删除原来创建的ftp1和ftp2文件夹，在ftproot下创建一个cekai文件夹（因为我创建域的域名就叫cekai，打开active directory用户和计算机可以看到），然后再分别创建ftp1和ftp2文件夹，里面放置文件</p>\n<p>之后再到IIS里设置用户隔离</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-13.png\" alt=\"\"></p>\n<p>克隆机访问</p>\n<p><img src=\"https://liucekai.github.io/images/ftp-14.png\" alt=\"\"></p>\n<p>成功隔离</p>\n","slug":"server 2008","updated":"2020-06-04T02:00:00.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/04/server%202008/","excerpt":"Web服务器配置配置之前需要先安装（在服务器管理器上添加角色）","categories":[],"tags":[]},{"title":"redhat基本操作","date":"2020-06-03T11:37:36.000Z","path":"2020/06/03/redhat基本操作/","text":"redhat基本操作Init 3 进入非图形化界面 Startx 进入图形化界面 Init 5 进入图形化界面 Vim /etc/inittab编辑开机默认界面： Id:5:initdefault 改成 Id:3:initdefault :Wq!保存，Reboot重启，随后开机就是非图形化界面了 root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$ Pwd显示当前目录 最前面的/表示根目录 Cd 进入某目录（必须是完整的路径，即绝对路径） 除非在对应的路径下配合.一起用，相对路径（而且./可以省略） Cd ..返回上一级目录，..表示上一级，.表示当前 Cd -表示回到上一次待的位置 Cp复制，mv移动/剪切（Mv还有重命名的功能） Rm删除文件 rm -fr强制删除文件和文件夹 *表示所有 Shutdown -h 20二十分钟后关机 Shutdown -c取消关机 ~表示root目录，即家目录 Ls 显示当前目录的内容 Init 5：切换为图形化界面 不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹 Mkdir在当前位置新建文件夹 Touch 1 创建文件1","raw":"---\ntitle: redhat基本操作\ndate: 2020-06-03 19:37:36\n---\n\n\n\n## redhat基本操作\n\nInit 3 进入非图形化界面\n\nStartx 进入图形化界面\n\nInit 5 进入图形化界面<!-- more -->\n\nVim /etc/inittab编辑开机默认界面：\n\nId:5:initdefault 改成 Id:3:initdefault\n\n:Wq!保存，Reboot重启，随后开机就是非图形化界面了\n\n![](https://liucekai.github.io/images/r1-1.png)\n\n root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$\n\nPwd显示当前目录\n\n最前面的/表示根目录\n\nCd 进入某目录（必须是完整的路径，即绝对路径）\n\n![](https://liucekai.github.io/images/r1-2.png)\n\n除非在对应的路径下配合.一起用，相对路径（而且./可以省略）\n\n![](https://liucekai.github.io/images/r1-3.png)\n\nCd ..返回上一级目录，..表示上一级，.表示当前\n\nCd -表示回到上一次待的位置\n\n![](https://liucekai.github.io/images/r1-4.png)\n\nCp复制，mv移动/剪切（Mv还有重命名的功能）\n\n![](https://liucekai.github.io/images/r1-5.png)\n\n![](https://liucekai.github.io/images/r1-6.png)\n\nRm删除文件  rm -fr强制删除文件和文件夹\n\n![](https://liucekai.github.io/images/r1-7.png)\n\n*表示所有\n\n![](https://liucekai.github.io/images/r1-8.png)\n\nShutdown -h 20二十分钟后关机\n\nShutdown -c取消关机\n\n![](https://liucekai.github.io/images/r1-9.png)\n\n~表示root目录，即家目录\n\nLs 显示当前目录的内容\n\nInit 5：切换为图形化界面\n\n![](https://liucekai.github.io/images/r1-10.png)\n\n不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹\n\n\n\nMkdir在当前位置新建文件夹\n\n![](https://liucekai.github.io/images/r1-11.png)\n\nTouch 1  创建文件1","content":"<h2 id=\"redhat基本操作\"><a href=\"#redhat基本操作\" class=\"headerlink\" title=\"redhat基本操作\"></a>redhat基本操作</h2><p>Init 3 进入非图形化界面</p>\n<p>Startx 进入图形化界面</p>\n<p>Init 5 进入图形化界面<a id=\"more\"></a></p>\n<p>Vim /etc/inittab编辑开机默认界面：</p>\n<p>Id:5:initdefault 改成 Id:3:initdefault</p>\n<p>:Wq!保存，Reboot重启，随后开机就是非图形化界面了</p>\n<p><img src=\"https://liucekai.github.io/images/r1-1.png\" alt=\"\"></p>\n<p> root表示管理员（最高级用户），moni是主机名,desktop是当前所在位置，#代表最高权限，如果是普通用户则为$</p>\n<p>Pwd显示当前目录</p>\n<p>最前面的/表示根目录</p>\n<p>Cd 进入某目录（必须是完整的路径，即绝对路径）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-2.png\" alt=\"\"></p>\n<p>除非在对应的路径下配合.一起用，相对路径（而且./可以省略）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-3.png\" alt=\"\"></p>\n<p>Cd ..返回上一级目录，..表示上一级，.表示当前</p>\n<p>Cd -表示回到上一次待的位置</p>\n<p><img src=\"https://liucekai.github.io/images/r1-4.png\" alt=\"\"></p>\n<p>Cp复制，mv移动/剪切（Mv还有重命名的功能）</p>\n<p><img src=\"https://liucekai.github.io/images/r1-5.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/r1-6.png\" alt=\"\"></p>\n<p>Rm删除文件  rm -fr强制删除文件和文件夹</p>\n<p><img src=\"https://liucekai.github.io/images/r1-7.png\" alt=\"\"></p>\n<p>*表示所有</p>\n<p><img src=\"https://liucekai.github.io/images/r1-8.png\" alt=\"\"></p>\n<p>Shutdown -h 20二十分钟后关机</p>\n<p>Shutdown -c取消关机</p>\n<p><img src=\"https://liucekai.github.io/images/r1-9.png\" alt=\"\"></p>\n<p>~表示root目录，即家目录</p>\n<p>Ls 显示当前目录的内容</p>\n<p>Init 5：切换为图形化界面</p>\n<p><img src=\"https://liucekai.github.io/images/r1-10.png\" alt=\"\"></p>\n<p>不记得要进入的文件夹时按下tab键会显示当下有哪些文件夹</p>\n<p>Mkdir在当前位置新建文件夹</p>\n<p><img src=\"https://liucekai.github.io/images/r1-11.png\" alt=\"\"></p>\n<p>Touch 1  创建文件1</p>\n","slug":"redhat基本操作","updated":"2020-06-03T11:37:36.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/03/redhat%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"redhat基本操作Init 3 进入非图形化界面 Startx 进入图形化界面 Init 5 进入图形化界面","categories":[],"tags":[]},{"title":"1000人冗余型企业网","date":"2020-06-02T12:30:00.000Z","path":"2020/06/02/1000人三层架构冗余型企业网/","text":"需求分析 确保分支可以访问总部 企业内网划分多个vlan 出口配置NAT 禁止vlan5访问外网 所有设备，在任何位置都能telnet远程管理 设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡 所有用户均为自动获取ip地址，并配置相关dhcp安全技术 一定程度上实现负载均衡\\分担、链路冗余 在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问 设计原则 减少广播域大小，提高网络稳定性 减少设备收敛时间、将stp优化 提高内网设备安全性 acl合理控制 设备尽量实现负载均衡\\分担、链路冗余详细方案 拓扑展示 详细方案步骤一：底层eth-trunk 、vlan（含修剪）、trunketh-trunk配置： SW1 Int eth-trunk 2 mode lacp-static trunkport g0/0/2 trunkport g0/0/3 SW2 Int eth-trunk 2 mode lacp-static trunkport g0/0/2 trunkport g0/0/1 SW3 Int eth-trunk 1 mode lacp-static trunkport e0/0/4 trunkport e0/0/5 SW6 Int eth-trunk 1 mode lacp-static trunkport e0/0/1 trunkport e0/0/3 Vlan、trunk配置（一号楼） SW5: vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 999 interface Ethernet0/0/2 port link-type access port default vlan 2 SW6: vlan batch 2 to 5 200 999 interface Eth-Trunk1 port link-type trunk port trunk allow-pass vlan 3 999 interface Ethernet0/0/2 port link-type access port default vlan 3 SW3: vlan batch 2 to 5 200 999 interface Eth-Trunk1 port link-type trunk port trunk allow-pass vlan 3 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围） interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 2 to 3 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/3 port link-type trunk port trunk allow-pass vlan 2 999 vlan、trunk配置（2号楼） SW7 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface Ethernet0/0/2 port link-type access port default vlan 4 interface Ethernet0/0/3 port link-type access port default vlan 5 SW4 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 4 to 5 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 4 to 5 999 （这里已经隐含vlan修剪，不允许其他vlan的广播报文通过） interface Ethernet0/0/3 port link-type trunk port trunk allow-pass vlan 4 to 5 99 SW8 vlan batch 2 to 5 200 999 interface Ethernet0/0/1 port link-type trunk port trunk allow-pass vlan 200 999 interface Ethernet0/0/2 port link-type trunk port trunk allow-pass vlan 200 999 interface Ethernet0/0/3 port link-type access port default vlan 200 interface Ethernet0/0/4 port link-type access port default vlan 200 SW1 vlan batch 2 to 5 200 800 999（vlan 800是用于access口的，vlan只能从属一个access口） interface Eth-Trunk2 port link-type trunk port trunk allow-pass vlan 2 to 5 200 999 mode lacp-static interface GigabitEthernet0/0/1 port link-type trunk port trunk allow-pass vlan 2 to 3 999 interface GigabitEthernet0/0/4 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface GigabitEthernet0/0/5 port link-type trunk port trunk allow-pass vlan 200 999 interface GigabitEthernet0/0/6 port link-type access port default vlan 800 SW2 Vlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801） interface Eth-Trunk2 port link-type trunk port trunk allow-pass vlan 2 to 5 200 999 mode lacp-static interface GigabitEthernet0/0/3 port link-type trunk port trunk allow-pass vlan 200 999 interface GigabitEthernet0/0/4 port link-type trunk port trunk allow-pass vlan 4 to 5 999 interface GigabitEthernet0/0/5 port link-type trunk port trunk allow-pass vlan 2 to 3 999 interface GigabitEthernet0/0/6 port link-type access port default vlan 801 步骤二：MSTP（二层冗余）（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果） SW1 全局模式下 stp region-configuration（启用stp，进入STP配置） region-name aa（设置MSTP的域名为aa） revision-level 1（设置MSTP修订版本号为1） instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1） instance 2 vlan 4 to 5（将vlan 4 5映射到实例2） active region-configuration（激活以上的配置） 由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略 设置优先级 SW1 全局模式下 stp instance 1 root primary（把SW1设置为实例1的根桥） stp instance 2 root secondary（把SW1设置为实例2的备份桥） SW2 stp instance 1 root secondary stp instance 2 root primary 可以实现vlan 2 3 200的流量从sw1往上走 Vlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡 检查 发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过） SW4也达到预期 步骤三：VRRP（三层冗余）（这一步包含svi了） VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信 SW1 interface Vlanif2 ip address 192.168.2.254 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.2.1 vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器） interface Vlanif3 ip address 192.168.3.254 255.255.255.0 vrrp vrid 3 virtual-ip 192.168.3.1 vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器） interface Vlanif4 ip address 192.168.4.254 255.255.255.0 vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级） interface Vlanif5 ip address 192.168.5.254 255.255.255.0 vrrp vrid 5 virtual-ip 192.168.5.1 interface Vlanif200 ip address 192.168.200.254 255.255.255.0 vrrp vrid 200 virtual-ip 192.168.200.1 vrrp vrid 200 priority 105 SW2 interface Vlanif2 ip address 192.168.2.253 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.2.1 interface Vlanif3 ip address 192.168.3.253 255.255.255.0 vrrp vrid 3 virtual-ip 192.168.3.1 interface Vlanif4 ip address 192.168.4.253 255.255.255.0 vrrp vrid 4 virtual-ip 192.168.4.1 vrrp vrid 4 priority 105 interface Vlanif5 ip address 192.168.5.253 255.255.255.0 vrrp vrid 5 virtual-ip 192.168.5.1 vrrp vrid 5 priority 105 interface Vlanif200 ip address 192.168.200.253 255.255.255.0 vrrp vrid 200 virtual-ip 192.168.200.1 达到了预期 因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。 检查 还没做dhcp，先用静态ip检测一下: 补：vlan800和vlan801从属access口的ip配置: interface Vlanif800 ip address 192.168.12.2 255.255.255.0 interface Vlanif801 ip address 192.168.23.2 255.255.255.0 步骤四：BFD（检测引擎假死）引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来 本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上 在sw1和r1分别创建bfd并命名为bb SW1 [全局]Bfd [bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto Commit（bb是取名） R1 [全局]bfd [bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto commit 检查 bb上的track：** interface Vlanif2 vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口} vrrp vrid 2 track bfd-session session-name bb（track上联口） interface Vlanif3 vrrp vrid 3 track interface GigabitEthernet0/0/1 vrrp vrid 3 track bfd-session session-name bb interface Vlanif200 vrrp vrid 200 track interface GigabitEthernet0/0/1 vrrp vrid 200 track bfd-session session-name bb （这些几乎一样的配置可以通过刷脚本去配） 在sw2和r1分别创建bfd并命名为cc Sw2 bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto commit R1 bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto commit 检查 interface Vlanif4 vrrp vrid 4 track interface GigabitEthernet0/0/4 vrrp vrid 4 track bfd-session session-name cc interface Vlanif5 vrrp vrid 5 track interface GigabitEthernet0/0/4 vrrp vrid 5 track bfd-session session-name cc 步骤五：OSPF、NAT① ospf先查看有哪些直连网段 发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里 SW1 ospf 1 area 0.0.0.0 network 192.168.2.0 0.0.0.255 network 192.168.3.0 0.0.0.255 network 192.168.4.0 0.0.0.255 network 192.168.5.0 0.0.0.255 network 192.168.200.0 0.0.0.255 network 192.168.12.0 0.0.0.255 Sw2 ospf 1 area 0.0.0.0 network 192.168.2.0 0.0.0.255 network 192.168.3.0 0.0.0.255 network 192.168.4.0 0.0.0.255 network 192.168.5.0 0.0.0.255 network 192.168.200.0 0.0.0.255 network 192.168.12.0 0.0.0.255 给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关） 完了查看R1接口 注意：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略 R4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了 再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：ip route-static 0.0.0.0 0.0.0.0 192.168.200.1） 做完ospf之后，用户访问分支、服务器都没问题 ②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）R2、R3、R5运行rip： R2 rip 1 version 2（版本号为2） network 12.0.0.0（宣告主类，这里为A类） network 25.0.0.0 R3 rip 1 version 2 network 13.0.0.0 network 35.0.0.0 R5 rip 1 version 2 network 25.0.0.0 network 35.0.0.0 network 5.0.0.0 做完rip之后，查看电信路由器，发现已经学到了R5的路由 可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题 电信ping联通 此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证. 用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条 Sw1 ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选） 发送到Sw2时 ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65 有了到出口路由的缺省，还需要出口路由到运营商的缺省 R1 联通的缺省 ip route-static 0.0.0.0 0.0.0.0 13.1.1.2 电信的 ip route-static 0.0.0.0 0.0.0.0 12.1.1.2 即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去 Nat之easy ip acl 2000 rule permit source 192.168.0.0 0.0.255.255（） interface GigabitEthernet1/0/0 nat outbound 2000 interface GigabitEthernet0/0/2 nat outbound 2000 检测是否能到达外网并且路线是否能按照我们预想的走。 能到外网 但是tracert有点bug（模拟器的问题） 原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由 优化一下试试 对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1 对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2 优化之后，可以看到只有一条路由 测试发现还是有问题 这里先留个问题 起码路线是对的 检测冗余效果，去掉一些链路 这里收敛时间较长，后面优化一下 步骤六：DHCP中继（服务器做地址池）dhcp enable ip pool vlan2 gateway-list 192.168.2.1 network 192.168.2.0 mask 255.255.255.0 dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址） 一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置） excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需） 通过刷脚本配置其他池（别忘了排除） 接着在接口下启用dhcp（现实情况中不需要，直接用windows服务器或linux服务器做就行） interface Ethernet0/0/0 dhcp select global 这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继 Sw1上 dhcp enable interface Vlanif2 dhcp select relay dhcp relay server-ip 192.168.200.3 同样配置其他vlanif接口345，略 接着就可以了 在本项目中用服务器做地址池的好处有，支持备份，即使两台核心有一台挂了，一样可以拿到地址。 Dhcp安全技术：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备 （如TP-Link）扰乱我们的地址分配服务 在用户接入层交换机配置如下 SW5 [JR_sw5]dhcp enable [JR_sw5]dhcp snooping enable [JR_sw5]int vlanif 2 [JR_sw5-Vlanif2]dhcp snooping enable [JR_sw5]int e0/0/1 [JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任) SW6 [JR_sw6]dhcp enable [JR_sw6]dhcp snooping enable [JR_sw6]int vlanif 3 [JR_sw6-Vlanif3]dhcp snooping enable [JR_sw5]int eth-trunk 1 [JR_sw5-eth-trunk-1]dhcp snooping trusted SW7 [JR_sw7]dhcp enable [JR_sw7]dhcp snooping enable [JR_sw7]int vlanif 4 [JR_sw7-Vlanif4]dhcp snooping enable [JR_sw7]int vlanif 5 [JR_sw7-Vlanif5]dhcp snooping enable [JR_sw7]int e0/0/1 [JR_sw7-Ethernet0/0/1]dhcp snooping trusted 步骤七：NAT—Server（服务器端口映射）因为要求映射到联通公网，所以在R1的g1/0/0口上配置映射 interface GigabitEthernet1/0/0 nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface 也可以写成该接口ip地址13.1.1.1） 配置服务器的基本配置 为了测试，在外网添加一个客户端 IP7.7.7.7 网关7.7.7.1配置在R5上 步骤八：ACL访问控制列表acl number 3005 （3000之后都是高级acl） rule 5 permit ip source 192.168.5.0 0.0.0.255 destination 192.168.0.0 0.0.255.255 （先允许该vlan的用户能访问公司内网） rule 10 deny ip source 192.168.5.0 0.0.0.255 （再拒绝该vlan访问所有，这样搭配上一条的效果就是除了内网的地址其他什么都不能访问。） 出口路由器的入接口下启用acl（注意：一定是入接口，不能是出口，因为出口有nat转换，报文到出口的时候，是先进行nat转换再进行acl匹配的，转换了之后就没法与acl匹配了，源地址改变不受acl约束了，acl就不会起作用，所以一定是在入接口启用acl,并且该项目有两个入接口，两个都启用 [R1]int g0/0/1 [R1-GigabitEthernet0/0/1] traffic-filter inbound acl 3005 [R1]int g0/0/0 [R1-GigabitEthernet0/0/0] traffic-filter inbound acl 3005 步骤九：telnet远程管理配置所有内网的交换机、路由器上都得配置telnet账户密码及模式 sw1~sw8、R1、分支R4都得配如下 aaa local-user hcie privilege level 3 password cipher 123 local-user hcie service-type telnet quit user-interface vty 0 4 authentication-mode aaa protocol inbound telnet 然后三层设备R1R4不用配管理IP，因为路由器的接口上全是Ip,任何一个都可以被telnet连接上，也不用配回包缺省，我们之前已经做好了三层之间的路由（ospf） 三层sw1和sw2分别配上管理IP和虚拟的公共管理网关IP（所有设备管理流量的网关） 配二层交换机的管理IP及回包的缺省 Sw3 interface Vlanif999 ip address 192.168.255.3 255.255.255.0 ip route-static 0.0.0.0 0.0.0.0 192.168.255.1 如果不配置这条缺省，当这台设备需要被管理的时候，客户端发来的包他是没办法发回去的，因为该二层设备没有回到核心上的路由 SW4 interface Vlanif999 ip address 192.168.255.4 255.255.255.0 ip route-static 0.0.0.0 0.0.0.0 192.168.255.1 SW5 6 7 8 几乎都一样，只是ip不一样 由于模拟器的Pc不支持telnet，所以只能用dhcp路由器来测试一下 注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1 步骤十：stp优化相关技术① 在各接入交换机上的所有下联口（除了上联口之外的e口）启用边缘端口 Sw5（用批量分组去划分） [JR_sw5]port-group group-member e0/0/2 to e0/0/22 [JR_sw5-port-group]stp edged-port enable Sw6、7、8略 ② 两核心上联路由器的这两个接口取消stp的功能，以免接口down或up影响stp收敛 [HX_sw1]int g0/0/6 [HX_sw1-GigabitEthernet0/0/6]stp disable [HX_sw2]int g0/0/6 [HX_sw2-GigabitEthernet0/0/6]stp disable ③ 把eth-trunk链路的cost值配成静态的，避免某条链路down了之后重新计算cost值 先查看原来cost默认是多少 所以我们就静态成10000，保持一致 Eth-trunk2：sw1—sw2 Sw1 [HX_sw1]int Eth-Trunk 2 [HX_sw1-Eth-Trunk2]stp instance 1 cos [HX_sw1-Eth-Trunk2]stp instance 1 cost 10000（注意我们mstp是有两个实例的，别忘了这一点） [HX_sw1-Eth-Trunk2]stp instance 2 cost 10000 Sw2 [HX_sw2]int Eth-Trunk 2 [HX_sw2-Eth-Trunk2]stp ins [HX_sw2-Eth-Trunk2]stp instance 1 cos [HX_sw2-Eth-Trunk2]stp instance 1 cost 10000 [HX_sw2-Eth-Trunk2]stp instance 2 cost 10000 Eth-trunk1：sw5—sw6 Sw3 [HJ_sw3]int Eth-Trunk 1 [HJ_sw3-Eth-Trunk1]stp instance 1 cost 99999 [HJ_sw3-Eth-Trunk1]stp instance 2 cost 99999 Sw6. [JR_sw6]int Eth-Trunk 1 [JR_sw6-Eth-Trunk1]stp cost 99999(sw6没有配置mstp)","raw":"---\ntitle: 1000人冗余型企业网\ndate: 2020-06-2 20:30:00\nupdated: 2020-06-15 15:33:44\n---\n\n## 需求分析\n\n- 确保分支可以访问总部\n\n- 企业内网划分多个vlan\n\n- 出口配置NAT\n\n- 禁止vlan5访问外网\n\n- 所有设备，在任何位置都能telnet远程管理<!-- more -->\n\n- 设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡\n\n- 所有用户均为自动获取ip地址，并配置相关dhcp安全技术\n\n- 一定程度上实现负载均衡\\分担、链路冗余\n\n- 在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问\n\n------\n\n## 设计原则\n\n- 减少广播域大小，提高网络稳定性\n\n- 减少设备收敛时间、将stp优化\n\n- 提高内网设备安全性\n\n- acl合理控制\n\n- 设备尽量实现负载均衡\\分担、链路冗余详细方案\n\n------\n\n## 拓扑展示\n\n![](https://liucekai.github.io/images/tp1000.png)\n\n------\n\n## 详细方案\n\n### 步骤一：底层eth-trunk 、vlan（含修剪）、trunk\n\n**eth-trunk配置：**\n\n**SW1**\n\n`Int eth-trunk 2`\n\n`mode lacp-static`\n\n`trunkport g0/0/2`\n\n`trunkport g0/0/3`\n\n**SW2**\n\n`Int eth-trunk 2`\n\n`mode lacp-static`\n\n`trunkport g0/0/2`\n\n`trunkport g0/0/1`\n\n**SW3**\n\n`Int eth-trunk 1`\n\n`mode lacp-static`\n\n`trunkport e0/0/4`\n\n`trunkport e0/0/5`\n\n**SW6**\n\n`Int eth-trunk 1`\n\n`mode lacp-static`\n\n`trunkport e0/0/1`\n\n`trunkport e0/0/3`\n\n**Vlan、trunk配置（一号楼）**\n\n**SW5:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 2`\n\n**SW6:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Eth-Trunk1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 3 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 3`\n\n**SW3:**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Eth-Trunk1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 3 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围）`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 999`\n\n**vlan、trunk配置（2号楼）**\n\n**SW7**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 4`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type access`\n\n `port default vlan 5`\n\n \n\n**SW4**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n`（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 99`\n\n**SW8**\n\n`vlan batch 2 to 5 200 999`\n\n\n\n`interface Ethernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface Ethernet0/0/2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface Ethernet0/0/3`\n\n `port link-type access`\n\n `port default vlan 200`\n\n\n\n`interface Ethernet0/0/4`\n\n `port link-type access`\n\n `port default vlan 200`\n\n**SW1**\n\n`vlan batch 2 to 5 200 800 999`（vlan 800是用于access口的，vlan只能从属一个access口）\n\n\n\n`interface Eth-Trunk2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 5 200 999`\n\n `mode lacp-static`\n\n\n\n`interface GigabitEthernet0/0/1`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n\n\n`interface GigabitEthernet0/0/4`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface GigabitEthernet0/0/5`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface GigabitEthernet0/0/6`\n\n `port link-type access`\n\n `port default vlan 800`\n\n**SW2**\n\nVlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801）\n\n\n\n`interface Eth-Trunk2`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 5 200 999`\n\n `mode lacp-static`\n\n\n\n`interface GigabitEthernet0/0/3`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 200 999`\n\n\n\n`interface GigabitEthernet0/0/4`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 4 to 5 999`\n\n\n\n`interface GigabitEthernet0/0/5`\n\n `port link-type trunk`\n\n `port trunk allow-pass vlan 2 to 3 999`\n\n\n\n`interface GigabitEthernet0/0/6`\n\n `port link-type access`\n\n `port default vlan 801`\n\n------\n\n### 步骤二：MSTP（二层冗余）\n\n（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果）\n\n**SW1**\n\n**全局模式下**\n\n`stp region-configuration（启用stp，进入STP配置）`\n\n `region-name aa（设置MSTP的域名为aa）`\n\n `revision-level 1（设置MSTP修订版本号为1）`\n\n `instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1）`\n\n `instance 2 vlan 4 to 5（将vlan 4 5映射到实例2）`\n\n `active region-configuration（激活以上的配置）`\n\n**由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略**\n\n \n\n**设置优先级**\n\n**SW1**\n\n**全局模式下**   \n\n![b2-3](https://liucekai.github.io/images/b2-3.png)\n\n`stp instance 1 root primary（把SW1设置为实例1的根桥）`\n\n`stp instance 2 root secondary（把SW1设置为实例2的备份桥）`\n\n**SW2**\n\n`stp instance 1 root secondary`\n\n`stp instance 2 root primary`\n\n可以实现vlan 2 3 200的流量从sw1往上走\n\nVlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡\n\n检查\n\n发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过）\n\n![b2-1](https://liucekai.github.io/images/b2-1.jpg)\n\nSW4也达到预期\n\n![b2-2](https://liucekai.github.io/images/b2-2.png)\n\n\n\n------\n\n### 步骤三：VRRP（三层冗余）\n\n**（这一步包含svi了）**\n\n**VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信**\n\n**SW1**\n\n`interface Vlanif2`\n\n `ip address 192.168.2.254 255.255.255.0`\n\n `vrrp vrid 2 virtual-ip 192.168.2.1`\n\n `vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器）`\n\n\n\n`interface Vlanif3`\n\n `ip address 192.168.3.254 255.255.255.0`\n\n `vrrp vrid 3 virtual-ip 192.168.3.1`\n\n `vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器）`\n\n\n\n`interface Vlanif4`\n\n `ip address 192.168.4.254 255.255.255.0`\n\n `vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级）`\n\n\n\n`interface Vlanif5`\n\n `ip address 192.168.5.254 255.255.255.0`\n\n `vrrp vrid 5 virtual-ip 192.168.5.1`\n\n\n\n`interface Vlanif200`\n\n `ip address 192.168.200.254 255.255.255.0`\n\n `vrrp vrid 200 virtual-ip 192.168.200.1`\n\n `vrrp vrid 200 priority 105`\n\n \n\n**SW2**\n\n`interface Vlanif2`\n\n `ip address 192.168.2.253 255.255.255.0`\n\n `vrrp vrid 2 virtual-ip 192.168.2.1`\n\n\n\n`interface Vlanif3`\n\n `ip address 192.168.3.253 255.255.255.0`\n\n `vrrp vrid 3 virtual-ip 192.168.3.1`\n\n\n\n`interface Vlanif4`\n\n `ip address 192.168.4.253 255.255.255.0`\n\n `vrrp vrid 4 virtual-ip 192.168.4.1`\n\n `vrrp vrid 4 priority 105`\n\n\n\n`interface Vlanif5`\n\n `ip address 192.168.5.253 255.255.255.0`\n\n `vrrp vrid 5 virtual-ip 192.168.5.1`\n\n `vrrp vrid 5 priority 105`\n\n\n\n`interface Vlanif200`\n\n `ip address 192.168.200.253 255.255.255.0`\n\n `vrrp vrid 200 virtual-ip 192.168.200.1`\n\n![](https://liucekai.github.io/images/b3-1.png)\n\n![](https://liucekai.github.io/images/b3-2.png)\n\n达到了预期\n\n因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。\n\n**检查**\n\n还没做dhcp，先用静态ip检测一下:\n\n![](https://liucekai.github.io/images/b3-3.png)\n\n![](https://liucekai.github.io/images/b3-4.png)\n\n![](https://liucekai.github.io/images/b3-5.png)\n\n**补：vlan800和vlan801从属access口的ip配置**:\n\n`interface Vlanif800`\n\n `ip address 192.168.12.2 255.255.255.0`\n\n`interface Vlanif801`\n\n `ip address 192.168.23.2 255.255.255.0`\n\n------\n\n### 步骤四：BFD（检测引擎假死）\n\n引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来\n\n本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上\n\n**在sw1和r1分别创建bfd并命名为bb**\n\n**SW1**\n\n`[全局]Bfd`\n\n`[bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto`\n\n`Commit（bb是取名）`\n\n**R1**\n\n`[全局]bfd`\n\n`[bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto`\n\n `commit`\n\n**检查**\n\n![](https://liucekai.github.io/images/b4-1.png)\n\n![](https://liucekai.github.io/images/b4-2.png)\n\n**bb上的track：****\n\n`interface Vlanif2`\n\n`vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口}`\n\n`vrrp vrid 2 track bfd-session session-name bb（track上联口）`\n\n\n\n`interface Vlanif3`\n\n`vrrp vrid 3 track interface GigabitEthernet0/0/1`\n\n`vrrp vrid 3 track bfd-session session-name bb`\n\n\n\n`interface Vlanif200`\n\n`vrrp vrid 200 track interface GigabitEthernet0/0/1`\n\n`vrrp vrid 200 track bfd-session session-name bb`\n\n**（这些几乎一样的配置可以通过刷脚本去配）**\n\n**在sw2和r1分别创建bfd并命名为cc**\n\n**Sw2**\n\n`bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto`\n\n `commit`\n\n**R1**\n\n`bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto`\n\n `commit`\n\n**检查**\n\n![](https://liucekai.github.io/images/b4-3.png)\n\n`interface Vlanif4`\n\n`vrrp vrid 4 track interface GigabitEthernet0/0/4`\n\n`vrrp vrid 4 track bfd-session session-name cc`\n\n\n\n`interface Vlanif5`\n\n`vrrp vrid 5 track interface GigabitEthernet0/0/4`\n\n`vrrp vrid 5 track bfd-session session-name cc`\n\n------\n\n### 步骤五：OSPF、NAT\n\n#### **① ospf**\n\n先查看有哪些直连网段\n\n发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里\n\n![](https://liucekai.github.io/images/b5-1.png)\n\n**SW1**\n\n`ospf 1` \n\n`area 0.0.0.0`\n\n  `network 192.168.2.0 0.0.0.255`\n\n  `network 192.168.3.0 0.0.0.255`\n\n  `network 192.168.4.0 0.0.0.255`\n\n  `network 192.168.5.0 0.0.0.255`\n\n  `network 192.168.200.0 0.0.0.255`\n\n  `network 192.168.12.0 0.0.0.255`\n\n![](https://liucekai.github.io/images/b5-2.png)\n\n**Sw2**\n\n`ospf 1`\n\n`area 0.0.0.0`\n\n `network 192.168.2.0 0.0.0.255`\n\n `network 192.168.3.0 0.0.0.255`\n\n `network 192.168.4.0 0.0.0.255`\n\n `network 192.168.5.0 0.0.0.255`\n\n `network 192.168.200.0 0.0.0.255`\n\n `network 192.168.12.0 0.0.0.255`\n\n给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关）\n\n完了查看R1接口\n\n![](https://liucekai.github.io/images/b5-3.png)\n\n**注意**：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略\n\nR4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了\n\n![](https://liucekai.github.io/images/b5-4.png)\n\n![](https://liucekai.github.io/images/b5-5.png)\n\n![](https://liucekai.github.io/images/b5-6.png)\n\n![](https://liucekai.github.io/images/b5-7.png)\n\n再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：`ip route-static 0.0.0.0 0.0.0.0 192.168.200.1`）\n\n![](https://liucekai.github.io/images/b5-8.png)\n\n做完ospf之后，用户访问分支、服务器都没问题\n\n------\n\n#### **②NAT**（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\n\n**R2、R3、R5运行rip：**\n\n**R2**\n\n`rip 1`\n\n `version 2（版本号为2）`\n\n `network 12.0.0.0（宣告主类，这里为A类）`\n\n `network 25.0.0.0`\n\n**R3**\n\n`rip 1`\n\n `version 2`\n\n `network 13.0.0.0`\n\n `network 35.0.0.0`\n\n**R5**\n\n`rip 1`\n\n `version 2`\n\n `network 25.0.0.0`\n\n `network 35.0.0.0`\n\n `network 5.0.0.0`\n\n做完rip之后，查看电信路由器，发现已经**学到了R5的路由**\n\n![](https://liucekai.github.io/images/b5-9.png)\n\n可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题\n\n![](https://liucekai.github.io/images/b5-10.png)\n\n电信ping联通\n\n![](https://liucekai.github.io/images/b5-11.png)\n\n此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证.\n\n用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条\n\n**Sw1**\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.12.1`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选）`\n\n**发送到Sw2时**\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.23.1`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65`\n\n有了到出口路由的缺省，还需要出口路由到运营商的缺省\n\n**R1**\n\n**联通的缺省**\n\nip route-static 0.0.0.0 0.0.0.0 13.1.1.2\n\n**电信的**\n\nip route-static 0.0.0.0 0.0.0.0 12.1.1.2\n\n即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去\n\n![](https://liucekai.github.io/images/b5-12.png)\n\n**Nat之easy ip**\n\n`acl 2000`\n\n`rule permit source 192.168.0.0 0.0.255.255（）`\n\n`interface GigabitEthernet1/0/0`\n\n`nat outbound 2000`\n\n`interface GigabitEthernet0/0/2`\n\n`nat outbound 2000`\n\n![](https://liucekai.github.io/images/b5-13.png)\n\n![](https://liucekai.github.io/images/b5-14.png)\n\n检测是否能到达外网并且路线是否能按照我们预想的走。\n\n能到外网\n\n![](https://liucekai.github.io/images/b5-15.png)\n\n但是tracert有点bug（模拟器的问题）\n\n![](https://liucekai.github.io/images/b5-16.png)\n\n原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由\n\n![](https://liucekai.github.io/images/b5-17.png)\n\n![](https://liucekai.github.io/images/b5-18.png)\n\n优化一下试试\n\n对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1\n\n对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2\n\n![](https://liucekai.github.io/images/b5-19.png)\n\n![](https://liucekai.github.io/images/b5-20.png)\n\n优化之后，可以看到只有一条路由\n\n![](https://liucekai.github.io/images/b5-21.png)\n\n测试发现还是有问题\n\n![](https://liucekai.github.io/images/b5-22.png)\n\n**这里先留个问题**\n\n起码路线是对的\n\n![](https://liucekai.github.io/images/b5-23.png)\n\n![](https://liucekai.github.io/images/b5-24.png)\n\n![](https://liucekai.github.io/images/b5-25.png)\n\n检测冗余效果，去掉一些链路\n\n![](https://liucekai.github.io/images/b5-26.png)\n\n![](https://liucekai.github.io/images/b5-27.png)\n\n![](https://liucekai.github.io/images/b5-28.png)\n\n这里收敛时间较长，后面优化一下\n\n![](https://liucekai.github.io/images/b5-29.png)\n\n![](https://liucekai.github.io/images/b5-30.png)\n\n------\n\n### 步骤六：DHCP中继（服务器做地址池）\n\n`dhcp enable`\n\n`ip pool vlan2`\n\n `gateway-list 192.168.2.1`\n\n `network 192.168.2.0 mask 255.255.255.0`\n\n `dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址）`\n\n**一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置）**\n\n`excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需）`\n\n通过刷脚本配置其他池（别忘了排除）\n\n![](https://liucekai.github.io/images/b6-1.png)\n\n接着在**接口下启用dhcp**（现实情况中不需要，直接用windows服务器或linux服务器做就行）\n\n`interface Ethernet0/0/0`\n\n`dhcp select global`\n\n这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继\n\n**Sw1上**\n\n`dhcp enable`\n\n`interface Vlanif2`\n\n`dhcp select relay`\n\n `dhcp relay server-ip 192.168.200.3`\n\n 同样配置其他vlanif接口345，略\n\n接着就可以了\n\n![](https://liucekai.github.io/images/b6-2.png)\n\n![](https://liucekai.github.io/images/b6-3.png)\n\n在本项目中**用服务器做地址池**的好处有，**支持备份**，即使两台核心有一台挂了，一样可以拿到地址。\n\n**Dhcp安全技术**：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备\n\n（如TP-Link）扰乱我们的地址分配服务\n\n在用户接入层交换机配置如下\n\n**SW5**\n\n`[JR_sw5]dhcp enable` \n\n`[JR_sw5]dhcp snooping enable`\n\n`[JR_sw5]int vlanif 2`\n\n`[JR_sw5-Vlanif2]dhcp snooping enable`\n\n`[JR_sw5]int e0/0/1`\n\n`[JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任)`\n\n**SW6**\n\n`[JR_sw6]dhcp enable` \n\n`[JR_sw6]dhcp snooping enable`\n\n`[JR_sw6]int vlanif 3`\n\n`[JR_sw6-Vlanif3]dhcp snooping enable`\n\n`[JR_sw5]int eth-trunk 1`\n\n`[JR_sw5-eth-trunk-1]dhcp snooping trusted`\n\n**SW7**\n\n`[JR_sw7]dhcp enable` \n\n`[JR_sw7]dhcp snooping enable`\n\n`[JR_sw7]int vlanif 4`\n\n`[JR_sw7-Vlanif4]dhcp snooping enable`\n\n`[JR_sw7]int vlanif 5`\n\n`[JR_sw7-Vlanif5]dhcp snooping enable`\n\n`[JR_sw7]int e0/0/1`\n\n`[JR_sw7-Ethernet0/0/1]dhcp snooping trusted`\n\n![](https://liucekai.github.io/images/b6-4.png)\n\n------\n\n### 步骤七：NAT—Server（服务器端口映射）\n\n因为要求映射到联通公网，所以在**R1**的**g1/0/0口**上配置映射\n\n`interface GigabitEthernet1/0/0`\n\n`nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface`\n\n也可以写成该接口ip地址13.1.1.1）\n\n配置服务器的基本配置\n\n![](https://liucekai.github.io/images/b7-1.png)\n\n**为了测试，在外网添加一个客户端**\n\nIP7.7.7.7\n\n网关7.7.7.1配置在**R5**上\n\n![](https://liucekai.github.io/images/b7-2.png)\n\n------\n\n### 步骤八：ACL访问控制列表\n\n`acl number 3005 （3000之后都是高级acl）` \n\n `rule 5 permit ip source 192.168.5.0 0.0.0.255 destination 192.168.0.0 0.0.255.255 （先允许该vlan的用户能访问公司内网）`\n\n `rule 10 deny ip source 192.168.5.0 0.0.0.255 （再拒绝该vlan访问所有，这样搭配上一条的效果就是除了内网的地址其他什么都不能访问。）`\n\n出口路由器的入接口下启用acl（注意：一定是入接口，不能是出口，因为出口有nat转换，报文到出口的时候，是先进行nat转换再进行acl匹配的，转换了之后就没法与acl匹配了，源地址改变不受acl约束了，acl就不会起作用，所以一定是在入接口启用acl,并且该项目有两个入接口，两个都启用\n\n![](https://liucekai.github.io/images/b8-1.png)\n\n`[R1]int g0/0/1`\n\n`[R1-GigabitEthernet0/0/1] traffic-filter inbound acl 3005`\n\n`[R1]int g0/0/0`\n\n`[R1-GigabitEthernet0/0/0] traffic-filter inbound acl 3005`\n\n![](https://liucekai.github.io/images/b8-2.png)\n\n------\n\n### 步骤九：telnet远程管理配置\n\n**所有内网的交换机、路由器上都得配置telnet账户密码及模式**\n\n**sw1~sw8、R1、分支R4都得配如下**\n\n`aaa`\n\n`local-user hcie privilege level 3 password cipher 123`\n\n`local-user hcie service-type telnet` \n\n`quit`\n\n`user-interface vty 0 4`\n\n`authentication-mode aaa`\n\n`protocol inbound telnet`\n\n然后三层设备R1R4不用配管理IP，因为路由器的接口上全是Ip,任何一个都可以被telnet连接上，也不用配回包缺省，我们之前已经做好了三层之间的路由（ospf）\n\n三层sw1和sw2分别配上管理IP和虚拟的公共管理网关IP（所有设备管理流量的网关）\n\n![](https://liucekai.github.io/images/b9-1.png)\n\n![](https://liucekai.github.io/images/b9-2.png)\n\n**配二层交换机的管理IP及回包的缺省**\n\n**Sw3**\n\n`interface Vlanif999`\n\n `ip address 192.168.255.3 255.255.255.0`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.255.1`\n\n**如果不配置这条缺省，当这台设备需要被管理的时候，客户端发来的包他是没办法发回去的，因为该二层设备没有回到核心上的路由**\n\n**SW4**\n\n`interface Vlanif999`\n\n `ip address 192.168.255.4 255.255.255.0`\n\n`ip route-static 0.0.0.0 0.0.0.0 192.168.255.1`\n\n**SW5 6 7 8 几乎都一样，只是ip不一样**\n\n由于模拟器的Pc不支持telnet，所以只能用dhcp路由器来测试一下\n\n![](https://liucekai.github.io/images/b9-3.png)\n\n![](https://liucekai.github.io/images/b9-4.png)\n\n\n\n<u>**注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1**</u>\n\n------\n\n### 步骤十：stp优化相关技术\n\n①  在各接入交换机上的所有下联口（除了上联口之外的e口）启用边缘端口\n\n**Sw5**（用批量分组去划分）\n\n`[JR_sw5]port-group group-member e0/0/2 to e0/0/22` \n\n`[JR_sw5-port-group]stp edged-port enable`\n\n**Sw6、7、8略**\n\n② 两核心上联路由器的这两个接口取消stp的功能，以免接口down或up影响stp收敛\n\n`[HX_sw1]int g0/0/6`\n\n`[HX_sw1-GigabitEthernet0/0/6]stp disable`\n\n`[HX_sw2]int g0/0/6`\n\n`[HX_sw2-GigabitEthernet0/0/6]stp disable`\n\n③ 把eth-trunk链路的cost值配成静态的，避免某条链路down了之后重新计算cost值\n\n先查看原来cost默认是多少\n\n![](https://liucekai.github.io/images/b10-1.png)\n\n所以我们就静态成10000，保持一致\n\n**Eth-trunk2：sw1---sw2**\n\n**Sw1**\n\n`[HX_sw1]int Eth-Trunk 2`\n\n`[HX_sw1-Eth-Trunk2]stp instance 1 cos` \n\n`[HX_sw1-Eth-Trunk2]stp instance 1 cost 10000（注意我们mstp是有两个实例的，别忘了这一点）`\n\n`[HX_sw1-Eth-Trunk2]stp instance 2 cost 10000`\n\n**Sw2**\n\n`[HX_sw2]int Eth-Trunk 2`\n\n`[HX_sw2-Eth-Trunk2]stp ins` \n\n`[HX_sw2-Eth-Trunk2]stp instance 1 cos` \n\n`[HX_sw2-Eth-Trunk2]stp instance 1 cost 10000`\n\n`[HX_sw2-Eth-Trunk2]stp instance 2 cost 10000`\n\n \n\n**Eth-trunk1：sw5---sw6**\n\n![](https://liucekai.github.io/images/b10-2.png)\n\n**Sw3**\n\n`[HJ_sw3]int Eth-Trunk 1`\n\n`[HJ_sw3-Eth-Trunk1]stp instance 1 cost 99999`\n\n`[HJ_sw3-Eth-Trunk1]stp instance 2 cost 99999`\n\n **Sw6**.\n\n`[JR_sw6]int Eth-Trunk 1`\n\n`[JR_sw6-Eth-Trunk1]stp cost 99999(sw6没有配置mstp)`","content":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ul>\n<li><p>确保分支可以访问总部</p>\n</li>\n<li><p>企业内网划分多个vlan</p>\n</li>\n<li><p>出口配置NAT</p>\n</li>\n<li><p>禁止vlan5访问外网</p>\n</li>\n<li><p>所有设备，在任何位置都能telnet远程管理<a id=\"more\"></a></p>\n</li>\n<li><p>设置合理的stp优先级、边缘端口、使用stp优化技术加快stp收敛、并减少stp震荡</p>\n</li>\n<li><p>所有用户均为自动获取ip地址，并配置相关dhcp安全技术</p>\n</li>\n<li><p>一定程度上实现负载均衡\\分担、链路冗余</p>\n</li>\n<li><p>在企业出口将内网服务器的端口映射到电信公网，允许外网用户访问</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><ul>\n<li><p>减少广播域大小，提高网络稳定性</p>\n</li>\n<li><p>减少设备收敛时间、将stp优化</p>\n</li>\n<li><p>提高内网设备安全性</p>\n</li>\n<li><p>acl合理控制</p>\n</li>\n<li><p>设备尽量实现负载均衡\\分担、链路冗余详细方案</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"拓扑展示\"><a href=\"#拓扑展示\" class=\"headerlink\" title=\"拓扑展示\"></a>拓扑展示</h2><p><img src=\"https://liucekai.github.io/images/tp1000.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"详细方案\"><a href=\"#详细方案\" class=\"headerlink\" title=\"详细方案\"></a>详细方案</h2><h3 id=\"步骤一：底层eth-trunk-、vlan（含修剪）、trunk\"><a href=\"#步骤一：底层eth-trunk-、vlan（含修剪）、trunk\" class=\"headerlink\" title=\"步骤一：底层eth-trunk 、vlan（含修剪）、trunk\"></a>步骤一：底层eth-trunk 、vlan（含修剪）、trunk</h3><p><strong>eth-trunk配置：</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>Int eth-trunk 2</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport g0/0/2</code></p>\n<p><code>trunkport g0/0/3</code></p>\n<p><strong>SW2</strong></p>\n<p><code>Int eth-trunk 2</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport g0/0/2</code></p>\n<p><code>trunkport g0/0/1</code></p>\n<p><strong>SW3</strong></p>\n<p><code>Int eth-trunk 1</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport e0/0/4</code></p>\n<p><code>trunkport e0/0/5</code></p>\n<p><strong>SW6</strong></p>\n<p><code>Int eth-trunk 1</code></p>\n<p><code>mode lacp-static</code></p>\n<p><code>trunkport e0/0/1</code></p>\n<p><code>trunkport e0/0/3</code></p>\n<p><strong>Vlan、trunk配置（一号楼）</strong></p>\n<p><strong>SW5:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 2</code></p>\n<p><strong>SW6:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Eth-Trunk1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 3 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 3</code></p>\n<p><strong>SW3:</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Eth-Trunk1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 3 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过,减小广播域范围）</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 999</code></p>\n<p><strong>vlan、trunk配置（2号楼）</strong></p>\n<p><strong>SW7</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 4</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 5</code></p>\n<p><strong>SW4</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>（这里已经隐含vlan修剪，不允许其他vlan的广播报文通过）</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 99</code></p>\n<p><strong>SW8</strong></p>\n<p><code>vlan batch 2 to 5 200 999</code></p>\n<p><code>interface Ethernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 200</code></p>\n<p><code>interface Ethernet0/0/4</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 200</code></p>\n<p><strong>SW1</strong></p>\n<p><code>vlan batch 2 to 5 200 800 999</code>（vlan 800是用于access口的，vlan只能从属一个access口）</p>\n<p><code>interface Eth-Trunk2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p>\n<p> <code>mode lacp-static</code></p>\n<p><code>interface GigabitEthernet0/0/1</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>interface GigabitEthernet0/0/4</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface GigabitEthernet0/0/5</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface GigabitEthernet0/0/6</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 800</code></p>\n<p><strong>SW2</strong></p>\n<p>Vlan batch 2 to 5 200 801 999（vlan 800是用于access口的，vlan只能从属一个access口，所以这里创建801）</p>\n<p><code>interface Eth-Trunk2</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 5 200 999</code></p>\n<p> <code>mode lacp-static</code></p>\n<p><code>interface GigabitEthernet0/0/3</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 200 999</code></p>\n<p><code>interface GigabitEthernet0/0/4</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 4 to 5 999</code></p>\n<p><code>interface GigabitEthernet0/0/5</code></p>\n<p> <code>port link-type trunk</code></p>\n<p> <code>port trunk allow-pass vlan 2 to 3 999</code></p>\n<p><code>interface GigabitEthernet0/0/6</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 801</code></p>\n<hr>\n<h3 id=\"步骤二：MSTP（二层冗余）\"><a href=\"#步骤二：MSTP（二层冗余）\" class=\"headerlink\" title=\"步骤二：MSTP（二层冗余）\"></a>步骤二：MSTP（二层冗余）</h3><p>（MSTP存在的必要性：因为存在设备冗余，出现环路，为了使流量稳定发送并且实现负载分担，需要通过MSTP来做到，以提供二层冗余，STP做不到，STP只能阻塞一个口，MSTP可以通过多个实例来阻塞不同的口，以达到负载均衡的效果）</p>\n<p><strong>SW1</strong></p>\n<p><strong>全局模式下</strong></p>\n<p><code>stp region-configuration（启用stp，进入STP配置）</code></p>\n<p> <code>region-name aa（设置MSTP的域名为aa）</code></p>\n<p> <code>revision-level 1（设置MSTP修订版本号为1）</code></p>\n<p> <code>instance 1 vlan 2 to 3 200（将vlan 2 3 200 映射到实例1）</code></p>\n<p> <code>instance 2 vlan 4 to 5（将vlan 4 5映射到实例2）</code></p>\n<p> <code>active region-configuration（激活以上的配置）</code></p>\n<p><strong>由于MSTP关于域和实例的配置要做到所有汇聚、核心及服务组接入交换机的交换机保持一致，所以对SW2 3 4 8刷脚本，略</strong></p>\n<p><strong>设置优先级</strong></p>\n<p><strong>SW1</strong></p>\n<p><strong>全局模式下</strong>   </p>\n<p><img src=\"https://liucekai.github.io/images/b2-3.png\" alt=\"b2-3\"></p>\n<p><code>stp instance 1 root primary（把SW1设置为实例1的根桥）</code></p>\n<p><code>stp instance 2 root secondary（把SW1设置为实例2的备份桥）</code></p>\n<p><strong>SW2</strong></p>\n<p><code>stp instance 1 root secondary</code></p>\n<p><code>stp instance 2 root primary</code></p>\n<p>可以实现vlan 2 3 200的流量从sw1往上走</p>\n<p>Vlan 4 5的流量从sw2网上走，一定程度上实现负载分担/负载均衡</p>\n<p>检查</p>\n<p>发现sw3中确实是在实例1里阻塞了2口，达到预期效果（没显示实例2是因为该交换机上联口的trunk本就没让vlan 4 5 通过）</p>\n<p><img src=\"https://liucekai.github.io/images/b2-1.jpg\" alt=\"b2-1\"></p>\n<p>SW4也达到预期</p>\n<p><img src=\"https://liucekai.github.io/images/b2-2.png\" alt=\"b2-2\"></p>\n<hr>\n<h3 id=\"步骤三：VRRP（三层冗余）\"><a href=\"#步骤三：VRRP（三层冗余）\" class=\"headerlink\" title=\"步骤三：VRRP（三层冗余）\"></a>步骤三：VRRP（三层冗余）</h3><p><strong>（这一步包含svi了）</strong></p>\n<p><strong>VRRP的必要性：提供三层冗余，网关配置在一个公用虚拟接口上而不是配在某台交换机的接口上，这样即使其中一台核心交换机（master交换机）坏了，备份交换机也可以通信</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p> <code>ip address 192.168.2.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p>\n<p> <code>vrrp vrid 2 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p>\n<p><code>interface Vlanif3</code></p>\n<p> <code>ip address 192.168.3.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p>\n<p> <code>vrrp vrid 3 priority 105（把sw1设为master，优先级默认100，高的做主路由器）</code></p>\n<p><code>interface Vlanif4</code></p>\n<p> <code>ip address 192.168.4.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 4 virtual-ip 192.168.4.1（vlan4和5的master应设为sw2。所以在sw1上不修改优先级）</code></p>\n<p><code>interface Vlanif5</code></p>\n<p> <code>ip address 192.168.5.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p>\n<p><code>interface Vlanif200</code></p>\n<p> <code>ip address 192.168.200.254 255.255.255.0</code></p>\n<p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p>\n<p> <code>vrrp vrid 200 priority 105</code></p>\n<p><strong>SW2</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p> <code>ip address 192.168.2.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 2 virtual-ip 192.168.2.1</code></p>\n<p><code>interface Vlanif3</code></p>\n<p> <code>ip address 192.168.3.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 3 virtual-ip 192.168.3.1</code></p>\n<p><code>interface Vlanif4</code></p>\n<p> <code>ip address 192.168.4.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 4 virtual-ip 192.168.4.1</code></p>\n<p> <code>vrrp vrid 4 priority 105</code></p>\n<p><code>interface Vlanif5</code></p>\n<p> <code>ip address 192.168.5.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 5 virtual-ip 192.168.5.1</code></p>\n<p> <code>vrrp vrid 5 priority 105</code></p>\n<p><code>interface Vlanif200</code></p>\n<p> <code>ip address 192.168.200.253 255.255.255.0</code></p>\n<p> <code>vrrp vrid 200 virtual-ip 192.168.200.1</code></p>\n<p><img src=\"https://liucekai.github.io/images/b3-1.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-2.png\" alt=\"\"></p>\n<p>达到了预期</p>\n<p>因为我们在配置MSTP时，已经决定好各个vlan的预期走向，所以vrrp做三层冗余时也应该和MSTP一致，（这也是为什么MSTP和VRRP经常配合使用，细品），所以在配置VRRP主路由器时，SW1是vlan 2 3 200的master，SW2是备份。SW2是vlan 4 5的master，SW1是备份。</p>\n<p><strong>检查</strong></p>\n<p>还没做dhcp，先用静态ip检测一下:</p>\n<p><img src=\"https://liucekai.github.io/images/b3-3.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-4.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b3-5.png\" alt=\"\"></p>\n<p><strong>补：vlan800和vlan801从属access口的ip配置</strong>:</p>\n<p><code>interface Vlanif800</code></p>\n<p> <code>ip address 192.168.12.2 255.255.255.0</code></p>\n<p><code>interface Vlanif801</code></p>\n<p> <code>ip address 192.168.23.2 255.255.255.0</code></p>\n<hr>\n<h3 id=\"步骤四：BFD（检测引擎假死）\"><a href=\"#步骤四：BFD（检测引擎假死）\" class=\"headerlink\" title=\"步骤四：BFD（检测引擎假死）\"></a>步骤四：BFD（检测引擎假死）</h3><p>引擎假死：指示灯亮着但链路已经出现故障却由于是非出口的链路故障而没有检测出来</p>\n<p>本项目中，以sw1和r1之间为例，r1与sw1之间的这条链路，如果有其中一个接口出现了少见的问题，不处理报文等，但指示灯亮着，这时候bfd就起作用了，通过发送bfd帧检测到问题，然后就会把该链路断掉，从而把转发数据转移到另一台交换机上</p>\n<p><strong>在sw1和r1分别创建bfd并命名为bb</strong></p>\n<p><strong>SW1</strong></p>\n<p><code>[全局]Bfd</code></p>\n<p><code>[bfd]bfd bb bind peer-ip 192.168.12.1 source-ip 192.168.12.2 auto</code></p>\n<p><code>Commit（bb是取名）</code></p>\n<p><strong>R1</strong></p>\n<p><code>[全局]bfd</code></p>\n<p><code>[bfd]bfd bb bind peer-ip 192.168.12.2 source-ip 192.168.12.1 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>检查</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b4-1.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b4-2.png\" alt=\"\"></p>\n<p><strong>bb上的track：**</strong></p>\n<p><code>interface Vlanif2</code></p>\n<p><code>vrrp vrid 2 track interface GigabitEthernet0/0/1 {track下联口}</code></p>\n<p><code>vrrp vrid 2 track bfd-session session-name bb（track上联口）</code></p>\n<p><code>interface Vlanif3</code></p>\n<p><code>vrrp vrid 3 track interface GigabitEthernet0/0/1</code></p>\n<p><code>vrrp vrid 3 track bfd-session session-name bb</code></p>\n<p><code>interface Vlanif200</code></p>\n<p><code>vrrp vrid 200 track interface GigabitEthernet0/0/1</code></p>\n<p><code>vrrp vrid 200 track bfd-session session-name bb</code></p>\n<p><strong>（这些几乎一样的配置可以通过刷脚本去配）</strong></p>\n<p><strong>在sw2和r1分别创建bfd并命名为cc</strong></p>\n<p><strong>Sw2</strong></p>\n<p><code>bfd cc bind peer-ip 192.168.23.1 source-ip 192.168.23.2 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>R1</strong></p>\n<p><code>bfd cc bind peer-ip 192.168.23.2 source-ip 192.168.23.1 auto</code></p>\n<p> <code>commit</code></p>\n<p><strong>检查</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b4-3.png\" alt=\"\"></p>\n<p><code>interface Vlanif4</code></p>\n<p><code>vrrp vrid 4 track interface GigabitEthernet0/0/4</code></p>\n<p><code>vrrp vrid 4 track bfd-session session-name cc</code></p>\n<p><code>interface Vlanif5</code></p>\n<p><code>vrrp vrid 5 track interface GigabitEthernet0/0/4</code></p>\n<p><code>vrrp vrid 5 track bfd-session session-name cc</code></p>\n<hr>\n<h3 id=\"步骤五：OSPF、NAT\"><a href=\"#步骤五：OSPF、NAT\" class=\"headerlink\" title=\"步骤五：OSPF、NAT\"></a>步骤五：OSPF、NAT</h3><h4 id=\"①-ospf\"><a href=\"#①-ospf\" class=\"headerlink\" title=\"① ospf\"></a><strong>① ospf</strong></h4><p>先查看有哪些直连网段</p>\n<p>发现有2.0 3.0 4.0 5.0 200.0 12.0 ，需要将这些全部宣告到ospf里</p>\n<p><img src=\"https://liucekai.github.io/images/b5-1.png\" alt=\"\"></p>\n<p><strong>SW1</strong></p>\n<p><code>ospf 1</code> </p>\n<p><code>area 0.0.0.0</code></p>\n<p>  <code>network 192.168.2.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.3.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.4.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.5.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.200.0 0.0.0.255</code></p>\n<p>  <code>network 192.168.12.0 0.0.0.255</code></p>\n<p><img src=\"https://liucekai.github.io/images/b5-2.png\" alt=\"\"></p>\n<p><strong>Sw2</strong></p>\n<p><code>ospf 1</code></p>\n<p><code>area 0.0.0.0</code></p>\n<p> <code>network 192.168.2.0 0.0.0.255</code></p>\n<p> <code>network 192.168.3.0 0.0.0.255</code></p>\n<p> <code>network 192.168.4.0 0.0.0.255</code></p>\n<p> <code>network 192.168.5.0 0.0.0.255</code></p>\n<p> <code>network 192.168.200.0 0.0.0.255</code></p>\n<p> <code>network 192.168.12.0 0.0.0.255</code></p>\n<p>给R1配OSPF之前，先把这边所有路由器的接口都配上IP地址（电信R2\\联通R\\分支R4以及R4的网关）</p>\n<p>完了查看R1接口</p>\n<p><img src=\"https://liucekai.github.io/images/b5-3.png\" alt=\"\"></p>\n<p><strong>注意</strong>：这里只需要宣告192.168.12.0 192.168.23.0 14.1.1.0网段，12.0 13.0是连接运营商的网段，不需要用OSPF,宣告略</p>\n<p>R4宣告略，宣告完了这个分支R4就能通过OSPF学习到核心的所有路由，查看路由表检查，这样分支和总部就可以互访了</p>\n<p><img src=\"https://liucekai.github.io/images/b5-4.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-5.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-6.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-7.png\" alt=\"\"></p>\n<p>再给这边DHCP服务器配置下IP，并且作为一个服务器必须要有一个网关（这里用缺省路由代替网关，效果一样：<code>ip route-static 0.0.0.0 0.0.0.0 192.168.200.1</code>）</p>\n<p><img src=\"https://liucekai.github.io/images/b5-8.png\" alt=\"\"></p>\n<p>做完ospf之后，用户访问分支、服务器都没问题</p>\n<hr>\n<h4 id=\"②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\"><a href=\"#②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\" class=\"headerlink\" title=\"②NAT（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）\"></a><strong>②NAT</strong>（注：这里运营商与运营商之间的通信这里用rip模拟，实际情况并不是用rip）</h4><p><strong>R2、R3、R5运行rip：</strong></p>\n<p><strong>R2</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2（版本号为2）</code></p>\n<p> <code>network 12.0.0.0（宣告主类，这里为A类）</code></p>\n<p> <code>network 25.0.0.0</code></p>\n<p><strong>R3</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2</code></p>\n<p> <code>network 13.0.0.0</code></p>\n<p> <code>network 35.0.0.0</code></p>\n<p><strong>R5</strong></p>\n<p><code>rip 1</code></p>\n<p> <code>version 2</code></p>\n<p> <code>network 25.0.0.0</code></p>\n<p> <code>network 35.0.0.0</code></p>\n<p> <code>network 5.0.0.0</code></p>\n<p>做完rip之后，查看电信路由器，发现已经<strong>学到了R5的路由</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b5-9.png\" alt=\"\"></p>\n<p>可以ping通5.5.5.5，证明了公网路由（运营商之间的通信）没有问题</p>\n<p><img src=\"https://liucekai.github.io/images/b5-10.png\" alt=\"\"></p>\n<p>电信ping联通</p>\n<p><img src=\"https://liucekai.github.io/images/b5-11.png\" alt=\"\"></p>\n<p>此时用户还不能访问外网，因为核心上还没有配出去的路由，查看路由表可以验证.</p>\n<p>用户将到达外网的报文发送到sw1时，走缺省首选向上转发，备选走另一条</p>\n<p><strong>Sw1</strong></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1 preference 65（备选）</code></p>\n<p><strong>发送到Sw2时</strong></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.23.1</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.12.1 preference 65</code></p>\n<p>有了到出口路由的缺省，还需要出口路由到运营商的缺省</p>\n<p><strong>R1</strong></p>\n<p><strong>联通的缺省</strong></p>\n<p>ip route-static 0.0.0.0 0.0.0.0 13.1.1.2</p>\n<p><strong>电信的</strong></p>\n<p>ip route-static 0.0.0.0 0.0.0.0 12.1.1.2</p>\n<p>即使做好了各路缺省，也不行，因为NAT还没做，物理上是行得通（注意本项目中不需要做出口路由到达内网的缺省，因为本项目中出口路由配置了ospf，学习到了核心上的路由，所以回包是肯定没有问题的），但是由于没有nat转换，私网地址出不去</p>\n<p><img src=\"https://liucekai.github.io/images/b5-12.png\" alt=\"\"></p>\n<p><strong>Nat之easy ip</strong></p>\n<p><code>acl 2000</code></p>\n<p><code>rule permit source 192.168.0.0 0.0.255.255（）</code></p>\n<p><code>interface GigabitEthernet1/0/0</code></p>\n<p><code>nat outbound 2000</code></p>\n<p><code>interface GigabitEthernet0/0/2</code></p>\n<p><code>nat outbound 2000</code></p>\n<p><img src=\"https://liucekai.github.io/images/b5-13.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-14.png\" alt=\"\"></p>\n<p>检测是否能到达外网并且路线是否能按照我们预想的走。</p>\n<p>能到外网</p>\n<p><img src=\"https://liucekai.github.io/images/b5-15.png\" alt=\"\"></p>\n<p>但是tracert有点bug（模拟器的问题）</p>\n<p><img src=\"https://liucekai.github.io/images/b5-16.png\" alt=\"\"></p>\n<p>原因可能是因为R1回包时路径和来时路径不一致（因为我们之前只做好了出去的路线），查看路由表可以知道回包有两条路由</p>\n<p><img src=\"https://liucekai.github.io/images/b5-17.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-18.png\" alt=\"\"></p>\n<p>优化一下试试</p>\n<p>对sw1：增加ospf在vlanif 4 5上的cost值，这样R1回vlan4.5的包时就不会选择走sw1</p>\n<p>对sw2：增加ospf在vlanif 2 3上的cost值，这样R1回vlan2.3的包时就不会选择走sw2</p>\n<p><img src=\"https://liucekai.github.io/images/b5-19.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-20.png\" alt=\"\"></p>\n<p>优化之后，可以看到只有一条路由</p>\n<p><img src=\"https://liucekai.github.io/images/b5-21.png\" alt=\"\"></p>\n<p>测试发现还是有问题</p>\n<p><img src=\"https://liucekai.github.io/images/b5-22.png\" alt=\"\"></p>\n<p><strong>这里先留个问题</strong></p>\n<p>起码路线是对的</p>\n<p><img src=\"https://liucekai.github.io/images/b5-23.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-24.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-25.png\" alt=\"\"></p>\n<p>检测冗余效果，去掉一些链路</p>\n<p><img src=\"https://liucekai.github.io/images/b5-26.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-27.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-28.png\" alt=\"\"></p>\n<p>这里收敛时间较长，后面优化一下</p>\n<p><img src=\"https://liucekai.github.io/images/b5-29.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b5-30.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤六：DHCP中继（服务器做地址池）\"><a href=\"#步骤六：DHCP中继（服务器做地址池）\" class=\"headerlink\" title=\"步骤六：DHCP中继（服务器做地址池）\"></a>步骤六：DHCP中继（服务器做地址池）</h3><p><code>dhcp enable</code></p>\n<p><code>ip pool vlan2</code></p>\n<p> <code>gateway-list 192.168.2.1</code></p>\n<p> <code>network 192.168.2.0 mask 255.255.255.0</code></p>\n<p> <code>dns-list 114.114.114.114 8.8.8.8（主dns地址和备份dns地址）</code></p>\n<p><strong>一定要记得排除已经用过的地址（如果忘记排除的话，用户是有可能拿不到地址的，而且要先清空一下pool才能进行排除配置）</strong></p>\n<p><code>excluded-ip-address 192.168.2.249 192.168.2.254（排除多一些，以防不时之需）</code></p>\n<p>通过刷脚本配置其他池（别忘了排除）</p>\n<p><img src=\"https://liucekai.github.io/images/b6-1.png\" alt=\"\"></p>\n<p>接着在<strong>接口下启用dhcp</strong>（现实情况中不需要，直接用windows服务器或linux服务器做就行）</p>\n<p><code>interface Ethernet0/0/0</code></p>\n<p><code>dhcp select global</code></p>\n<p>这里配完用户是还不能直接拿到地址的，因为获取地址发送的是广播报文，三层设备的情况下两个不同vlan是不可能广播通信的，被隔离了，要解决这个问题就是用到了dhcp中继</p>\n<p><strong>Sw1上</strong></p>\n<p><code>dhcp enable</code></p>\n<p><code>interface Vlanif2</code></p>\n<p><code>dhcp select relay</code></p>\n<p> <code>dhcp relay server-ip 192.168.200.3</code></p>\n<p> 同样配置其他vlanif接口345，略</p>\n<p>接着就可以了</p>\n<p><img src=\"https://liucekai.github.io/images/b6-2.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b6-3.png\" alt=\"\"></p>\n<p>在本项目中<strong>用服务器做地址池</strong>的好处有，<strong>支持备份</strong>，即使两台核心有一台挂了，一样可以拿到地址。</p>\n<p><strong>Dhcp安全技术</strong>：为了使DHCP服务器为唯一服务器，防止其他用户自行接入的设备</p>\n<p>（如TP-Link）扰乱我们的地址分配服务</p>\n<p>在用户接入层交换机配置如下</p>\n<p><strong>SW5</strong></p>\n<p><code>[JR_sw5]dhcp enable</code> </p>\n<p><code>[JR_sw5]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int vlanif 2</code></p>\n<p><code>[JR_sw5-Vlanif2]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int e0/0/1</code></p>\n<p><code>[JR_sw5-Ethernet0/0/1]dhcp snooping trusted(上联口设为信任口，其他口默认为不信任)</code></p>\n<p><strong>SW6</strong></p>\n<p><code>[JR_sw6]dhcp enable</code> </p>\n<p><code>[JR_sw6]dhcp snooping enable</code></p>\n<p><code>[JR_sw6]int vlanif 3</code></p>\n<p><code>[JR_sw6-Vlanif3]dhcp snooping enable</code></p>\n<p><code>[JR_sw5]int eth-trunk 1</code></p>\n<p><code>[JR_sw5-eth-trunk-1]dhcp snooping trusted</code></p>\n<p><strong>SW7</strong></p>\n<p><code>[JR_sw7]dhcp enable</code> </p>\n<p><code>[JR_sw7]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int vlanif 4</code></p>\n<p><code>[JR_sw7-Vlanif4]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int vlanif 5</code></p>\n<p><code>[JR_sw7-Vlanif5]dhcp snooping enable</code></p>\n<p><code>[JR_sw7]int e0/0/1</code></p>\n<p><code>[JR_sw7-Ethernet0/0/1]dhcp snooping trusted</code></p>\n<p><img src=\"https://liucekai.github.io/images/b6-4.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤七：NAT—Server（服务器端口映射）\"><a href=\"#步骤七：NAT—Server（服务器端口映射）\" class=\"headerlink\" title=\"步骤七：NAT—Server（服务器端口映射）\"></a>步骤七：NAT—Server（服务器端口映射）</h3><p>因为要求映射到联通公网，所以在<strong>R1</strong>的<strong>g1/0/0口</strong>上配置映射</p>\n<p><code>interface GigabitEthernet1/0/0</code></p>\n<p><code>nat server protocol tcp global current-interface www inside 192.168.200.2 www（www=80，current-interface</code></p>\n<p>也可以写成该接口ip地址13.1.1.1）</p>\n<p>配置服务器的基本配置</p>\n<p><img src=\"https://liucekai.github.io/images/b7-1.png\" alt=\"\"></p>\n<p><strong>为了测试，在外网添加一个客户端</strong></p>\n<p>IP7.7.7.7</p>\n<p>网关7.7.7.1配置在<strong>R5</strong>上</p>\n<p><img src=\"https://liucekai.github.io/images/b7-2.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤八：ACL访问控制列表\"><a href=\"#步骤八：ACL访问控制列表\" class=\"headerlink\" title=\"步骤八：ACL访问控制列表\"></a>步骤八：ACL访问控制列表</h3><p><code>acl number 3005 （3000之后都是高级acl）</code> </p>\n<p> <code>rule 5 permit ip source 192.168.5.0 0.0.0.255 destination 192.168.0.0 0.0.255.255 （先允许该vlan的用户能访问公司内网）</code></p>\n<p> <code>rule 10 deny ip source 192.168.5.0 0.0.0.255 （再拒绝该vlan访问所有，这样搭配上一条的效果就是除了内网的地址其他什么都不能访问。）</code></p>\n<p>出口路由器的入接口下启用acl（注意：一定是入接口，不能是出口，因为出口有nat转换，报文到出口的时候，是先进行nat转换再进行acl匹配的，转换了之后就没法与acl匹配了，源地址改变不受acl约束了，acl就不会起作用，所以一定是在入接口启用acl,并且该项目有两个入接口，两个都启用</p>\n<p><img src=\"https://liucekai.github.io/images/b8-1.png\" alt=\"\"></p>\n<p><code>[R1]int g0/0/1</code></p>\n<p><code>[R1-GigabitEthernet0/0/1] traffic-filter inbound acl 3005</code></p>\n<p><code>[R1]int g0/0/0</code></p>\n<p><code>[R1-GigabitEthernet0/0/0] traffic-filter inbound acl 3005</code></p>\n<p><img src=\"https://liucekai.github.io/images/b8-2.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤九：telnet远程管理配置\"><a href=\"#步骤九：telnet远程管理配置\" class=\"headerlink\" title=\"步骤九：telnet远程管理配置\"></a>步骤九：telnet远程管理配置</h3><p><strong>所有内网的交换机、路由器上都得配置telnet账户密码及模式</strong></p>\n<p><strong>sw1~sw8、R1、分支R4都得配如下</strong></p>\n<p><code>aaa</code></p>\n<p><code>local-user hcie privilege level 3 password cipher 123</code></p>\n<p><code>local-user hcie service-type telnet</code> </p>\n<p><code>quit</code></p>\n<p><code>user-interface vty 0 4</code></p>\n<p><code>authentication-mode aaa</code></p>\n<p><code>protocol inbound telnet</code></p>\n<p>然后三层设备R1R4不用配管理IP，因为路由器的接口上全是Ip,任何一个都可以被telnet连接上，也不用配回包缺省，我们之前已经做好了三层之间的路由（ospf）</p>\n<p>三层sw1和sw2分别配上管理IP和虚拟的公共管理网关IP（所有设备管理流量的网关）</p>\n<p><img src=\"https://liucekai.github.io/images/b9-1.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b9-2.png\" alt=\"\"></p>\n<p><strong>配二层交换机的管理IP及回包的缺省</strong></p>\n<p><strong>Sw3</strong></p>\n<p><code>interface Vlanif999</code></p>\n<p> <code>ip address 192.168.255.3 255.255.255.0</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.255.1</code></p>\n<p><strong>如果不配置这条缺省，当这台设备需要被管理的时候，客户端发来的包他是没办法发回去的，因为该二层设备没有回到核心上的路由</strong></p>\n<p><strong>SW4</strong></p>\n<p><code>interface Vlanif999</code></p>\n<p> <code>ip address 192.168.255.4 255.255.255.0</code></p>\n<p><code>ip route-static 0.0.0.0 0.0.0.0 192.168.255.1</code></p>\n<p><strong>SW5 6 7 8 几乎都一样，只是ip不一样</strong></p>\n<p>由于模拟器的Pc不支持telnet，所以只能用dhcp路由器来测试一下</p>\n<p><img src=\"https://liucekai.github.io/images/b9-3.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/b9-4.png\" alt=\"\"></p>\n<p><u><strong>注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1</strong></u></p>\n<hr>\n<h3 id=\"步骤十：stp优化相关技术\"><a href=\"#步骤十：stp优化相关技术\" class=\"headerlink\" title=\"步骤十：stp优化相关技术\"></a>步骤十：stp优化相关技术</h3><p>①  在各接入交换机上的所有下联口（除了上联口之外的e口）启用边缘端口</p>\n<p><strong>Sw5</strong>（用批量分组去划分）</p>\n<p><code>[JR_sw5]port-group group-member e0/0/2 to e0/0/22</code> </p>\n<p><code>[JR_sw5-port-group]stp edged-port enable</code></p>\n<p><strong>Sw6、7、8略</strong></p>\n<p>② 两核心上联路由器的这两个接口取消stp的功能，以免接口down或up影响stp收敛</p>\n<p><code>[HX_sw1]int g0/0/6</code></p>\n<p><code>[HX_sw1-GigabitEthernet0/0/6]stp disable</code></p>\n<p><code>[HX_sw2]int g0/0/6</code></p>\n<p><code>[HX_sw2-GigabitEthernet0/0/6]stp disable</code></p>\n<p>③ 把eth-trunk链路的cost值配成静态的，避免某条链路down了之后重新计算cost值</p>\n<p>先查看原来cost默认是多少</p>\n<p><img src=\"https://liucekai.github.io/images/b10-1.png\" alt=\"\"></p>\n<p>所以我们就静态成10000，保持一致</p>\n<p><strong>Eth-trunk2：sw1—sw2</strong></p>\n<p><strong>Sw1</strong></p>\n<p><code>[HX_sw1]int Eth-Trunk 2</code></p>\n<p><code>[HX_sw1-Eth-Trunk2]stp instance 1 cos</code> </p>\n<p><code>[HX_sw1-Eth-Trunk2]stp instance 1 cost 10000（注意我们mstp是有两个实例的，别忘了这一点）</code></p>\n<p><code>[HX_sw1-Eth-Trunk2]stp instance 2 cost 10000</code></p>\n<p><strong>Sw2</strong></p>\n<p><code>[HX_sw2]int Eth-Trunk 2</code></p>\n<p><code>[HX_sw2-Eth-Trunk2]stp ins</code> </p>\n<p><code>[HX_sw2-Eth-Trunk2]stp instance 1 cos</code> </p>\n<p><code>[HX_sw2-Eth-Trunk2]stp instance 1 cost 10000</code></p>\n<p><code>[HX_sw2-Eth-Trunk2]stp instance 2 cost 10000</code></p>\n<p><strong>Eth-trunk1：sw5—sw6</strong></p>\n<p><img src=\"https://liucekai.github.io/images/b10-2.png\" alt=\"\"></p>\n<p><strong>Sw3</strong></p>\n<p><code>[HJ_sw3]int Eth-Trunk 1</code></p>\n<p><code>[HJ_sw3-Eth-Trunk1]stp instance 1 cost 99999</code></p>\n<p><code>[HJ_sw3-Eth-Trunk1]stp instance 2 cost 99999</code></p>\n<p> <strong>Sw6</strong>.</p>\n<p><code>[JR_sw6]int Eth-Trunk 1</code></p>\n<p><code>[JR_sw6-Eth-Trunk1]stp cost 99999(sw6没有配置mstp)</code></p>\n","slug":"1000人三层架构冗余型企业网","updated":"2020-06-15T07:33:44.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/1000%E4%BA%BA%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%86%97%E4%BD%99%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91/","excerpt":"需求分析 确保分支可以访问总部 企业内网划分多个vlan 出口配置NAT 禁止vlan5访问外网 所有设备，在任何位置都能telnet远程管理","categories":[],"tags":[]},{"title":"200-500人企业园区网","date":"2020-06-02T12:30:00.000Z","path":"2020/06/02/200-500人二层架构企业园区网/","text":"需求分析 设置合理的stp优先级、边缘端口、eth-trunk 企业内网划分多个vlan 所有设备，在任何位置都能telnet远程管理 出口配置NAT 所有用户均为自动获取ip地址 在企业出口将内网服务器的端口映射出去，允许外网用户访问 企业财务服务器，只允许财务部（vlan 30）的员工访问 设计原则 减少广播域大小，提高网络稳定性 减少设备收敛时间 提高内网设备安全性 拓扑展示 详细方案步骤一：STP优化、Eth-trunk配置核心交换机stp（配置为根桥） 配置边缘端口： Sw5的24个端口除了第23.24两个千兆口上接核心交换机不管，其他口全部配置边缘端口。 先查看各个端口信息dis int brief： Group-member e0/0/1 to e0/0/22对这些端口进行批量分组。Stp edged-port enable 批量对该分组内的所有端口进行配置（启用边缘接口:建议将连接pc或服务器的那些交换机接口即启用边缘端口，减少接口的收敛时间，告诉交换机此条路不需要检测环路） dis current-configuration查看当前交换机全局配置： 同上对sw2.sw3.sw4进行同样配置。 配置eth-trunk 进入eth-trunk口2，启用lacp模式，查看，并将g1口和g2口划入eth-trunk口2， 同样，把对端（核心交换机）的eth-trunk2启用lacp，而且也要把1口和4口也划进来。 完成两端的eth-trunk2相关配置之后，同样对sw3.sw4进行操作，由于他们都与sw1相连，所以sw1一共要进行三次启用lacp（分别在eth-trunk2/ eth-trunk3/ eth-trunk4）。 此时再查看eth-trunk口的信息就会发现，1。2口都已经被选择了，而不是unselected了,dis stp brief也能看到，两个口都处于转发状态，而不是只有一个口（因为两个口已经捆绑在一起了）。 修改cost为固定值：先用dis stp interface eth-trunk 2查看cost值是多少，看到默认为10000，所以建议在所有的eth-trunk 口下用stp cost 10000把cost 改10000，2.3.4.5都改为10000。 把sw2和sw3的eth-trunk配好之后，用dis eth-trunk在sw1上查看，会发现可以了。 再对sw4—sw1之间的eth-trunk4配： 再配5（略） 最后的成果是用dis eth-trunk在sw1上会看到eth-trunk2.3.4.5里的两个捆绑口都启用（selected）了，最后记得save。 步骤二：vlan和trunk先在sw2：创建vlan 10和vlan 20，并把对应的e2口和e3分别按照拓扑图划入 上图配错口了，不是e1口，而是e3口，不过问题不大，再添上。 interface Ethernet0/0/2 port link-type access port default vlan 10 interface Ethernet0/0/3 port link-type access port default vlan 20 然后配trunk,注意，这时是用之前配的eth-trunk 2 口配置trunk了，而不是在两个物理口配置了，因为两个物理口已经绑在一起了。 interface Eth-Trunk2 port link-type trunk port trunk allow-pass vlan 2 to 4094（vlan all也一样） 这两个操作对sw3.sw4.sw5同样操作。 需要注意的一点是，如sw3，两个e口都属于vlan30，这时候应该想到，如果有更多的口同属于一个vlan，是否可以批量进行配置，而不是一个口一个口的划分？答案是可以！前面也有讲到批量配置的方法，即： Port-group group member ethernet0/0/3 to Ethernet 0/0/22 然后再配置就能配置上所有的口。 配完几个接入交换机后，开始配核心交换机。 由于核心交换机同时接入好几个接入交换机，所以配置核心的时候和配置接口的时候是不太一样的，因为核心比较全局一点，要配的更多 关于vlan，接入的交换机有几个vlan，核心就要配几个vlan [sw1]vlan batch 10 20 30 40 200 接下来弄trunk（因为接入交换机上行是配置了trunk，那核心下行肯定也要配trunk） 而且可以用批量 [sw1]port-group group-member Eth-Trunk 2 to Eth-Trunk 5 [sw1-port-group]port link-type trunk [sw1-port-group]port trunk allow-pass vlan all 最后用dis vlan在核心上看 Dis port vlan active也可以看 可以了，关于vlan和trunk配到这。 补充：配置trunk的意义 默认情况下，如果没配置trunk，交换机的一个接口只能从属于一个vlan,即只允许该vlan的数据通过，配置了trunk，该接口就能通过多个vlan的数据，并在该数据进入trunk时打上相应的id或者说是tag，根据这一特性还可以实现vlan间路由之svi（改变id）。 步骤三：SVI配置以本项目为例（核心交换机做地址池）为了让Pc通过网关获取ip地址，需要将网关配置在核心交换机的vlanif上 所以首先，在sw1上配置各网关 添加ip时后面可以是24也可以是255.255.255.0 SW1 interface Vlanif10 ip address 192.168.10.1 255.255.255.0 interface Vlanif20 ip address 192.168.20.1 255.255.255.0 interface Vlanif30 ip address 192.168.30.1 255.255.255.0 interface Vlanif40 ip address 192.168.40.1 255.255.255.0 interface Vlanif200 ip address 192.168.200.1 255.255.255.0 SVI补充： 在没有svi时，不同vlan之间是不可以互相通信的，配置了svi之后，如本案例，pc1—》pc6（10.254—&gt;20.253），pc1通过trunk发给核心上的网关，到达网关之前由于是从trunk出去的所以带着id为10（因为是vlan10的用户）的报文，到达网关后（配置了svi），网关查看路由表里发现虚拟接口vlanif下有相应目的网段为20.0的路由，于是将原来带有id为10的报文里的id改为20！并根据路由发出去，最后接入交换机看到id为20的报文就发给了目的地址20.253，回包原理一样，svi实现了不同vlan间的路由（三层设备做中转的前提下，本例中核心做中转）,但是仅限于单播，广播依然不能互相通信，本质就是查看路由表，相应地转换单播报文的id。但不转换广播的，如果用户pc直接与核心交换机相连，没有接入交换机，也就是不需要trunk，那也就不存在id，也就不需要转换id一说了，当然这不现实,那此时svi也就仅仅提供了虚拟接口方便配置网关使两不同vlan之间通信。本例是由于有trunk，所以还提供了转换id 三层交换机和路由器三层对接： 将24口划入vlan800并配置为access接口，同时给vlan800配置ip地址254.2，使用这个ip与R1进行对接 SW1 Vlan 800 interface GigabitEthernet0/0/24 port link-type access port default vlan 800 interface Vlanif800 ip address 192.168.254.2 255.255.255.0 检验一下：做到这，pc到核心上，vlan,trunk,网关都做好了，应该能走pc-&gt;核心了，给pc手动配个固定的ip测试一下，因为现在还没有配置dhcp，所以先手动配一个，之后再通过dhcp获取 经测试，可以获取地址 步骤四：BFD（检测引擎假死）在sw1上开启dhcp，并分配地址池，有几个网段就分配几个地址池。 [sw1]dhcp enable ip pool xiaoshou_1 gateway-list 192.168.10.1 network 192.168.10.0 mask 255.255.255.0 dns-list 114.114.114.114 8.8.8.8 同样，配置xiaoshou_2，caiwu,jishu。 添加完地址池之后，还没完，还要在各个vlanif接口下（10.20.30.40）启用dhcp select。 interface Vlanif10 ip address 192.168.10.1 255.255.255.0 dhcp select global interface Vlanif20 ip address 192.168.20.1 255.255.255.0 dhcp select global interface Vlanif30 ip address 192.168.30.1 255.255.255.0 dhcp select global interface Vlanif40 ip address 192.168.40.1 255.255.255.0 dhcp select global 完成了，在PC上测试一下是否能自动获取了 可以看到能获取 步骤五：出口路由 nat（网络地址转换技术，翻译技术）先给出口路由器和运营商路由器按照拓扑配置接口ip地址 此时配置完所有的ip，测试pc能否访问外网，很显然还不行 因为虽然pc能够发送数据包到达核心层，但核心层（此时作为三层路由使用）与出口路由器还没有进行三层对接，即没有缺省路由到达出口路由器，所以这是一点， 还有一点，即使到了出口路由器，此时出去的是私网地址，不是公网（运营商网络）地址，访问外网时会被丢弃，所以还需要在出口路由处进行私网地址与公网地址的转换，也就是nat操作 先在核心上配缺省路由（特殊的静态路由），指向出口路由。 [sw1]ip route-static 0.0.0.0 0 192.168.254.1 而后出口路由也需要一条缺省路由指向运营商 [AR1]ip route-static 0.0.0.0 0 12.1.1.6 好了，数据包可以出去了，现在要注意思考的是，数据包怎么回来？运营商到出口路由，出口路由怎么把报文回馈到我们的内网？ 所以我们还是要通过静态路由告诉他，怎么回内网 由于内网的网段比较多，但都同属于192.168.0.0/16这个大网段，所以为了节省时间只需要配 [AR1]ip route-static 192.168.0.0 16 192.168.254.2 目的网段是内网里的所有网段，下一跳是核心交换机的g0/0/24口 做到这，起码在路由层面（交通）没什么问题了，能去能回 NAT: \\1. 静态nat、static nat:一对一，一个私网地址对应一个公网地址，外网的地址可以访问内网的主机（不是直接ping那个主机，而是ping那个路由或防火墙的外网那个口），缺点：有多少个私网地址就有多少个公网地址，假如我有一万个私网地址要用，难道我要向运营商买一万个公网地址？ Int g0/0/x(在外网口) Nat static global 12.1.1.2 inside 192.168.31.2 Global：全局公网地址 Local:内网私有地址 Inside:内网 内部 Outside：外网 外部 \\2. Nat之Easy ip：允许多个私网地址转换成一个公网地址，很常用、 出口路由全局：先写acl匹配内网私网地址段（这里的acl不是做访问控制列表） Acl number 2000 Rule 5 permit source 192.168.0.0 0.0.0.255 注意：acl做匹配范围时，没有默认隐含允许所有的规则 Int g0/0/x（公网接口，即外网口） Nat outbound 2000(2000是acl 的表号) 原理：内网私网出包时转换成外网口当前的ip地址 如果同时两个人a,b都上网，两个数据包同时出去，转换完了之后都变成一样的公网地址了对吧，那运营商回包的时候，他怎么知道哪个包是a的，哪个包是b要的呢。因为在出口路由转换的时候，就已经在两个包上分别附带上了‘小尾巴’（一个在数据包里的记录），在回来时，一看小尾巴就知道哪个是哪个了。就不会弄乱 所以本项目中，在出口路由采用easy ip [r1]acl 2000 [r1-acl-basic-2000]rule 5 permit source 192.168.0.0 0.0.255.255 外网口： interface GigabitEthernet0/0/1 nat outbound 2000 过程： Pc3-&gt;运营商——–192.168.30.2-&gt;9.9.9.9 上面这个数据包要先交给核心层的网关，核心层拿到之后查看路由表发现没有合适的路径，所以走缺省路由（前面配置过，指向r1的缺省路由），到达r1，r1拿到，查看路由表发现还是没有，所以还走缺省（也配置过，指向r2），然后经过外网口出去的时候，经nat转换，变成了12.1.1.1-&gt;9.9.9.9,然后就能到运营商了，运营商肯定会给你回馈报文，只要他拿到了，你不用担心他不会给你转发。运营商到你出口路由外网口的这段路你不用操心，运营商把包9.9.9.9-&gt;12.1.1.1送回来，到外网接口之后，再次转换地址变为9.9.9.9-&gt;192.168.30.2，然后r1拿到之后，这里就需要一条静态路由指向内网了，不然是找不到回家的路的，前面配置过了 步骤六：服务器端口映射基础配置配完了之后，点服务器信息 随便选个根目录，然后启动，就能模拟一个服务器的网站了 在出口路由的外网口： Int g0/0/1 nat server protocol tcp global 12.1.1.2 80 inside 192. 168.200.10 80 因为是网站所以用80端口，80也可以用www代替 完了之后要测试的话，得在外网加一台客户端才能测试 客户端地址7.7.7.7，网关7.7.7.1配置在运营商的与客户端相连的口上 之后在客户端信息输入地址12.1.1.2点击获取，就能发现可以访问web了 步骤七：访问控制列表（ACL）启动财务服务器，配置好ip地址192.168.200.20，网关192.168.200.1（之前已经在vlanif上配了网关地址了） 所以此时没配置acl，所有的pc都可以访问财务服务器（走ethtrunk和vlan） 做acl要在核心上做，因为看拓扑图可以知道，所有的pc访问财务的首条必经之路就是核心交换机，所以在sw1上做访问控制。 允许源地址为30网段的用户访问目的地为192.168.200.20的服务器 [sw1]acl 3000 [sw1-acl-adv-3000]rule permit ip source 192.168.30.0 0.0.0.255 destination 192.168.200.20 0 完了再来一条拒绝任何来源的用户访问财务 [sw1-acl-adv-3000]rule deny ip source any destination 192.168.200.20 0 放心，vlan30的用户不会受影响，因为permit的指令在前 做好规则之后，还得在相应的接口调用。即eth-trunk5上调用。 因为之前做了链路捆绑，所以在eth-trunk口上调用。如果没做，就还是在相应的物理口上调用 注：因为数据包是从eth-trunk5口出去，不是进来，所以是outbound 这样其他人就进不去财务了，只有30网段的人可以，而且不影响别人访问web，这个acl只对访问财务有限制。 步骤八：telnet远程管理配置telnet账户基本配置 telnet服务端(服务端为路由器时)配置： telnet server enable(华为设备默认开启，华三不默认) aaa（公用的模板：认证、授权、审计） local-user 用户名(chukou) password cipher 密码(lck981011) privilege level 3（配置用户名和密码，权限级别三级） local-user chukou service-type telnet（也在aaa里配） 指定该用户服务类型telnet User-interface vty 0 4 Authentication-mode aaa（认证的模式采用aaa） 大概就是先开启telnet，然后配置好aaa之后，再去选择认证模式为aaa，因为你要配好了才能选择嘛。 0~4表示同时允许5个人进行远程配置 测试：由于ensp模拟器的pc不支持telnet的命令，测不了，，所以只能拿sw1来测试（交换机做客户端） PC、路由器做客户端时，也一样 &lt;R1&gt;telnet 服务端ip地址 输入用户名密码，即可登录进去 难的是交换机 三层交换机还好，和上面一样，二层交换机由于没有ip地址，麻烦一些（要实现telnet必须要有ip地址） 由于前面关于telnet的配置都是一样的，无论是交换机还是路由器都是那样，所以在所有交换机上先配置好关于telnet的，再在二层交换机上解决ip的问题 配完了之后，得用一台路由器模拟pc，不然没有办法测telnet的功能（二层交换机不能telnet别人） Dhcp enable Int e0/0/1 Ip add dhcp-alloc 试着telnet sw1三层交换机： 可以成功，没问题，剩下的就是二层的问题了 二层交换机（一般都是接入交换机）配置管理地址： 首先说明，为了网络的稳定性和安全性，使得管理的可靠性，不让用户的上网业务流量出问题，我们将管理流量与用户的上网业务流量分离，比如vlan30是用户上网的网段，就不能把telnet划入进去，应该用一个专门的管理vlan来管理、承载telnet的管理流量，如vlan999。且将管理ip地址配置在一个网段即可，也就是说统一vlan999的网段，如统一为192.168.253.0/24 在所有交换机上创建vlan999，并添加管理ip地址，使用svi的方法添加Ip地址。 Sw1（配置管理ip地址，同时又是其他管理Ip地址的网关） Sw2（配置管理ip地址） Sw3.4.5略 配好了，有了ip，有了网关，是否能telnet呢？先ping一下，如果ping都ping不通，更不可能telnet 分析，20.2—&gt;253.4 先到网关20.1（查看路由表可以看到有缺省路由到网关的，毋庸置疑），网关也可以到253.4（253.4属于vlan1即253.0，而我们之前的trunk允许通过所有vlan，路由表也可以看到，所以可达），可以在出口抓包看 但是sw4没有回包路由，他只是个二层交换机，查看路由表可以发现只有到达253网段的直连，所以对于20.2这个目的地址他是不知道怎么转发的，所以要配置一条缺省路由让他先回到核心交换机上 Ip route-static 0.0.0.0 0 192.168.253.1 这样一来，即使路由表没有对应的路由，也可以走缺省回到核心（缺省路由：目的地址为任意），回到核心就行了，核心上有回到20网段的路由，所以就可以回包了 这样就可以管理sw4了，对其他二层也一样，只需一条回包的缺省路由即可。 注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1 步骤九：Vlan 修剪（这一步其中可以在配置底层trunk、vlan的时候就可以一起做，即配置的时候不要allow-pass vlan all,要根据具体需求通过vlan广播） 刚开始做trunk的时候是允许所有vlan通过的，这样会使广播域变大（当用户发送一个广播，会让这个广播跑到所有的trunk链路里去，即使发不到所有的用户上，也能在一定程度上影响网络稳定性）为了减小广播域，减少广播报文在trunk链路上的发送范围，我们需要做vlan修剪，让各个trunk链路上该通过的vlan通过，而不是所有 Sw2：应通过10、20、999 Sw3：应通过30、999 Sw4、5略 核心：上行和下行相对应： 最后，测试 上外网：Pc1—&gt;9.9.9.9 试试vlan间路由：pc1—&gt;pc5（vlan10—&gt;vlan40） 访问web:pc1—&gt;192.168.200.10 试试telnet远程管理别的二层、三层交换机 因为模拟器的pc不支持telnet，所以只能ping来测试，效果也一样","raw":"---\ntitle: 200-500人企业园区网\ndate: 2020-06-2 20:30:00\nupdated: 2020-06-14 15:33:44\n---\n\n## 需求分析\n\n- 设置合理的stp优先级、边缘端口、eth-trunk\n- 企业内网划分多个vlan\n- 所有设备，在任何位置都能telnet远程管理\n- 出口配置NAT<!-- more -->\n- 所有用户均为自动获取ip地址\n- 在企业出口将内网服务器的端口映射出去，允许外网用户访问\n- 企业财务服务器，只允许财务部（vlan 30）的员工访问\n\n------\n\n## 设计原则\n\n- 减少广播域大小，提高网络稳定性\n- 减少设备收敛时间\n- 提高内网设备安全性\n\n------\n\n## 拓扑展示\n\n![](https://liucekai.github.io/images/tp200.png)\n\n------\n\n## 详细方案\n\n### 步骤一：STP优化、Eth-trunk\n\n配置核心交换机stp（配置为根桥）\n\n![](https://liucekai.github.io/images/c1-1.png)\n\n配置边缘端口：\n\nSw5的24个端口除了第23.24两个千兆口上接核心交换机不管，其他口全部配置边缘端口。\n\n先查看各个端口信息dis int brief：\n\n![](https://liucekai.github.io/images/c1-2.png)\n\nGroup-member e0/0/1 to e0/0/22对这些端口进行批量分组。Stp edged-port enable 批量对该分组内的所有端口进行配置（启用边缘接口:建议将连接pc或服务器的那些交换机接口即启用边缘端口，减少接口的收敛时间，告诉交换机此条路不需要检测环路）\n\n![](https://liucekai.github.io/images/c1-3.png)\n\ndis current-configuration查看当前交换机全局配置：\n\n![](https://liucekai.github.io/images/c1-4.png)\n\n同上对sw2.sw3.sw4进行同样配置。\n\n配置eth-trunk\n\n![](https://liucekai.github.io/images/c1-5.png)\n\n进入eth-trunk口2，启用lacp模式，查看，并将g1口和g2口划入eth-trunk口2，\n\n同样，把对端（核心交换机）的eth-trunk2启用lacp，而且也要把1口和4口也划进来。\n\n<!--静态LACP模式-->\n\n<!--静态LACP模式是一种利用LACP协议进行聚合参数协商、确定活动接口和非活动接口的链路聚合方式。该模式下，需手工创建Eth-Trunk，手工加入Eth-Trunk成员接口，由LACP协议协商确定活动接口和非活动接口。-->\n\n<!--静态LACP模式也称为M∶N模式。这种方式同时可以实现链路负载分担和链路冗余备份的双重功能。在链路聚合组中M条链路处于活动状态，这些链路负责转发数据并进行负载分担，另外N条链路处于非活动状态作为备份链路，不转发数据。当M条链路中有链路出现故障时，系统会从N条备份链路中选择优先级最高的接替出现故障的链路，同时这条替换故障链路的备份链路状态变为活动状态开始转发数据。-->\n\n<!--静态LACP模式与手工负载分担模式的主要区别为：静态LACP模式有备份链路，而手工负载分担模式所有成员接口均处于转发状态，分担负载流量。-->\n\n<!--和静态LACP模式相对应的还包括动态LACP模式。动态LACP模式的链路聚合，从Eth-Trunk的创建到加入成员接口都不需要人工的干预，由LACP协议自动协商完成。虽然这种方式对于用户来说很简单，但由于这种方式过于灵活，不便于管理，所以S5700上不支持动态LACP模式链路聚合。-->\n\n \n\n完成两端的eth-trunk2相关配置之后，同样对sw3.sw4进行操作，由于他们都与sw1相连，所以sw1一共要进行三次启用lacp（分别在eth-trunk2/ eth-trunk3/ eth-trunk4）。\n\n![](https://liucekai.github.io/images/c1-6.png)\n\n此时再查看eth-trunk口的信息就会发现，1。2口都已经被选择了，而不是unselected了,dis stp brief也能看到，两个口都处于转发状态，而不是只有一个口（因为两个口已经捆绑在一起了）。\n\n![](https://liucekai.github.io/images/c1-7.png)\n\n修改cost为固定值：先用dis stp interface eth-trunk 2查看cost值是多少，看到默认为10000，所以建议在所有的eth-trunk 口下用stp cost 10000把cost 改10000，2.3.4.5都改为10000。\n\n把sw2和sw3的eth-trunk配好之后，用dis eth-trunk在sw1上查看，会发现可以了。\n\n![](https://liucekai.github.io/images/c1-8.png)\n\n![](https://liucekai.github.io/images/c1-9.png)\n\n再对sw4---sw1之间的eth-trunk4配：\n\n![](https://liucekai.github.io/images/c1-10.png)\n\n![](https://liucekai.github.io/images/c1-11.png)\n\n再配5（略）\n\n最后的成果是用dis eth-trunk在sw1上会看到eth-trunk2.3.4.5里的两个捆绑口都启用（selected）了，最后记得save。\n\n------\n\n### 步骤二：vlan和trunk\n\n先在sw2：创建vlan 10和vlan 20，并把对应的e2口和e3分别按照拓扑图划入\n\n![](https://liucekai.github.io/images/c1-12.png)\n\n上图配错口了，不是e1口，而是e3口，不过问题不大，再添上。\n\n`interface Ethernet0/0/2`\n\n `port link-type access`\n\n `port default vlan 10`\n\n \n\n`interface Ethernet0/0/3`\n\n `port link-type access`\n\n `port default vlan 20`\n\n然后配trunk,注意，这时是用之前配的eth-trunk 2 口配置trunk了，而不是在两个物理口配置了，因为两个物理口已经绑在一起了。\n\n![](https://liucekai.github.io/images/c1-13.png)\n\n`interface Eth-Trunk2`\n\n`port link-type trunk`\n\n`port trunk allow-pass vlan 2 to 4094`（vlan all也一样）\n\n这两个操作对sw3.sw4.sw5同样操作。\n\n需要注意的一点是，如sw3，两个e口都属于vlan30，这时候应该想到，如果有更多的口同属于一个vlan，是否可以批量进行配置，而不是一个口一个口的划分？答案是可以！前面也有讲到批量配置的方法，即：\n\n`Port-group group member ethernet0/0/3 to Ethernet 0/0/22`\n\n然后再配置就能配置上所有的口。\n\n配完几个接入交换机后，开始配核心交换机。\n\n由于核心交换机同时接入好几个接入交换机，所以配置核心的时候和配置接口的时候是不太一样的，因为核心比较全局一点，要配的更多\n\n关于vlan，接入的交换机有几个vlan，核心就要配几个vlan\n\n[sw1]vlan batch 10 20 30 40 200\n\n接下来弄trunk（因为接入交换机上行是配置了trunk，那核心下行肯定也要配trunk）\n\n而且可以用批量\n\n ![](https://liucekai.github.io/images/c1-14.png)\n\n`[sw1]port-group group-member Eth-Trunk 2 to Eth-Trunk 5`\n\n`[sw1-port-group]port link-type trunk`\n\n`[sw1-port-group]port trunk allow-pass vlan all`\n\n最后用dis vlan在核心上看\n\n ![](https://liucekai.github.io/images/c1-15.png)\n\nDis port vlan active也可以看\n\n ![](https://liucekai.github.io/images/c1-16.png)\n\n可以了，关于vlan和trunk配到这。\n\n**补充：配置trunk的意义**\n\n默认情况下，如果没配置trunk，交换机的一个接口只能从属于一个vlan,即只允许该vlan的数据通过，配置了trunk，该接口就能通过多个vlan的数据，并在该数据进入trunk时打上相应的id或者说是tag，根据这一特性还可以实现vlan间路由之svi（改变id）。\n\n------\n\n### 步骤三：SVI配置\n\n以本项目为例（核心交换机做地址池）为了让Pc通过网关获取ip地址，需要将网关配置在核心交换机的vlanif上\n\n**所以首先，在sw1上配置各网关**\n\n ![](https://liucekai.github.io/images/c1-17.png)\n\n添加ip时后面可以是24也可以是255.255.255.0\n\n**SW1**\n\n`interface Vlanif10`\n\n `ip address 192.168.10.1 255.255.255.0`\n\n`interface Vlanif20`\n\n `ip address 192.168.20.1 255.255.255.0`\n\n`interface Vlanif30`\n\n `ip address 192.168.30.1 255.255.255.0`\n\n`interface Vlanif40`\n\n `ip address 192.168.40.1 255.255.255.0`\n\n`interface Vlanif200`\n\n `ip address 192.168.200.1 255.255.255.0`\n\n**SVI补充：**\n\n在没有svi时，不同vlan之间是不可以互相通信的，配置了svi之后，如本案例，pc1---》pc6（10.254--->20.253），pc1通过trunk发给核心上的网关，到达网关之前由于是从trunk出去的所以带着id为10（因为是vlan10的用户）的报文，到达网关后（配置了svi），网关查看路由表里发现虚拟接口vlanif下有相应目的网段为20.0的路由，于是将原来带有id为10的报文里的id改为20！并根据路由发出去，最后接入交换机看到id为20的报文就发给了目的地址20.253，回包原理一样，svi实现了不同vlan间的路由（三层设备做中转的前提下，本例中核心做中转）,但是仅限于单播，广播依然不能互相通信，本质就是查看路由表，相应地转换单播报文的id。但不转换广播的，如果用户pc直接与核心交换机相连，没有接入交换机，也就是不需要trunk，那也就不存在id，也就不需要转换id一说了，当然这不现实,那此时svi也就仅仅提供了虚拟接口方便配置网关使两不同vlan之间通信。本例是由于有trunk，所以还提供了转换id\n\n三层交换机和路由器三层对接：\n\n ![](https://liucekai.github.io/images/c1-18.png)\n\n将24口划入vlan800并配置为access接口，同时给vlan800配置ip地址254.2，使用这个ip与R1进行对接\n\n ![](https://liucekai.github.io/images/c1-19.png)\n\n**SW1**\n\n`Vlan 800`\n\n`interface GigabitEthernet0/0/24`\n\n`port link-type access`\n\n`port default vlan 800`\n\n`interface Vlanif800`\n\n `ip address 192.168.254.2 255.255.255.0`\n\n ![](https://liucekai.github.io/images/c1-20.png)\n\n检验一下：做到这，pc到核心上，vlan,trunk,网关都做好了，应该能走pc->核心了，给pc手动配个固定的ip测试一下，因为现在还没有配置dhcp，所以先手动配一个，之后再通过dhcp获取\n\n ![](https://liucekai.github.io/images/c1-21.png)\n\n经测试，可以获取地址\n\n------\n\n### 步骤四：BFD（检测引擎假死）\n\n在sw1上开启dhcp，并分配地址池，有几个网段就分配几个地址池。\n\n`[sw1]dhcp enable`\n\n ![](https://liucekai.github.io/images/c4-1.png)\n\n`ip pool xiaoshou_1`\n\n `gateway-list 192.168.10.1`\n\n `network 192.168.10.0 mask 255.255.255.0`\n\n `dns-list 114.114.114.114 8.8.8.8`\n\n同样，配置xiaoshou_2，caiwu,jishu。\n\n添加完地址池之后，还没完，还要在各个vlanif接口下（10.20.30.40）启用dhcp select。\n\n ![](https://liucekai.github.io/images/c4-2.png)\n\n`interface Vlanif10`\n\n `ip address 192.168.10.1 255.255.255.0`\n\n `dhcp select global`\n\n`interface Vlanif20`\n\n `ip address 192.168.20.1 255.255.255.0`\n\n `dhcp select global`\n\n`interface Vlanif30`\n\n `ip address 192.168.30.1 255.255.255.0`\n\n `dhcp select global`\n\n`interface Vlanif40`\n\n `ip address 192.168.40.1 255.255.255.0`\n\n `dhcp select global`\n\n完成了，在PC上测试一下是否能自动获取了\n\n ![](https://liucekai.github.io/images/c4-3.png)\n\n可以看到能获取\n\n------\n\n### 步骤五：出口路由 nat（网络地址转换技术，翻译技术）\n\n先给出口路由器和运营商路由器按照拓扑配置接口ip地址\n\n ![](https://liucekai.github.io/images/c5-1.png)\n\n ![](https://liucekai.github.io/images/c5-2.png)\n\n此时配置完所有的ip，测试pc能否访问外网，很显然还不行\n\n ![](https://liucekai.github.io/images/c5-3.png)\n\n因为虽然pc能够发送数据包到达核心层，但核心层（此时作为三层路由使用）与出口路由器还没有进行三层对接，即没有缺省路由到达出口路由器，所以这是一点，\n\n还有一点，即使到了出口路由器，此时出去的是私网地址，不是公网（运营商网络）地址，访问外网时会被丢弃，所以还需要在出口路由处进行私网地址与公网地址的转换，也就是nat操作\n\n**先在核心上配缺省路由（特殊的静态路由），指向出口路由。**\n\n`[sw1]ip route-static 0.0.0.0 0 192.168.254.1`\n\n**而后出口路由也需要一条缺省路由指向运营商**\n\n`[AR1]ip route-static 0.0.0.0 0 12.1.1.6`\n\n好了，数据包可以出去了，现在要注意思考的是，**数据包怎么回来？**运营商到出口路由，出口路由怎么把报文回馈到我们的内网？\n\n**所以我们还是要通过静态路由告诉他，怎么回内网**\n\n由于内网的网段比较多，但都同属于192.168.0.0/16这个大网段，所以为了节省时间只需要配\n\n`[AR1]ip route-static 192.168.0.0 16 192.168.254.2`\n\n目的网段是内网里的所有网段，下一跳是核心交换机的g0/0/24口\n\n做到这，起码在路由层面（交通）没什么问题了，能去能回\n\n \n\n**NAT:**\n\n\\1. 静态nat、static nat:一对一，一个私网地址对应一个公网地址，外网的地址可以访问内网的主机（不是直接ping那个主机，而是ping那个路由或防火墙的外网那个口），缺点：有多少个私网地址就有多少个公网地址，假如我有一万个私网地址要用，难道我要向运营商买一万个公网地址？\n\nInt g0/0/x(在外网口)\n\n Nat static global 12.1.1.2 inside 192.168.31.2\n\n \n\nGlobal：全局公网地址\n\nLocal:内网私有地址\n\nInside:内网 内部\n\nOutside：外网 外部\n\n\\2. Nat之Easy ip：允许多个私网地址转换成一个公网地址，很常用、\n\n出口路由全局：先写acl匹配内网私网地址段（这里的acl不是做访问控制列表）\n\n`Acl number 2000`\n\n `Rule 5 permit source 192.168.0.0 0.0.0.255`\n\n注意：acl做匹配范围时，没有默认隐含允许所有的规则\n\n \n\n`Int g0/0/x（公网接口，即外网口）`\n\n `Nat outbound 2000(2000是acl 的表号)`\n\n原理：内网私网出包时转换成外网口当前的ip地址\n\n如果同时两个人a,b都上网，两个数据包同时出去，转换完了之后都变成一样的公网地址了对吧，那运营商回包的时候，他怎么知道哪个包是a的，哪个包是b要的呢。因为在出口路由转换的时候，就已经在两个包上分别附带上了‘小尾巴’（一个在数据包里的记录），在回来时，一看小尾巴就知道哪个是哪个了。就不会弄乱\n\n \n\n**所以本项目中，在出口路由采用easy ip**\n\n`[r1]acl 2000`\n\n`[r1-acl-basic-2000]rule 5 permit source 192.168.0.0 0.0.255.255`\n\n外网口：\n\ni`nterface GigabitEthernet0/0/1`\n\n`nat outbound 2000`\n\n ![](https://liucekai.github.io/images/c5-4.png)\n\n过程：\n\nPc3->运营商--------192.168.30.2->9.9.9.9\n\n上面这个数据包要先交给核心层的网关，核心层拿到之后查看路由表发现没有合适的路径，所以走缺省路由（前面配置过，指向r1的缺省路由），到达r1，r1拿到，查看路由表发现还是没有，所以还走缺省（也配置过，指向r2），然后经过外网口出去的时候，经nat转换，变成了12.1.1.1->9.9.9.9,然后就能到运营商了，运营商肯定会给你回馈报文，只要他拿到了，你不用担心他不会给你转发。运营商到你出口路由外网口的这段路你不用操心，运营商把包9.9.9.9->12.1.1.1送回来，到外网接口之后，再次转换地址变为9.9.9.9->192.168.30.2，然后r1拿到之后，这里就需要一条静态路由指向内网了，不然是找不到回家的路的，前面配置过了\n\n------\n\n### 步骤六：服务器端口映射\n\n基础配置配完了之后，点服务器信息\n\n ![](https://liucekai.github.io/images/c6-1.png)\n\n随便选个根目录，然后启动，就能模拟一个服务器的网站了\n\n在出口路由的外网口：\n\n`Int g0/0/1`\n\n`nat server protocol tcp global 12.1.1.2 80 inside 192.`\n\n`168.200.10 80`\n\n因为是网站所以用80端口，80也可以用www代替\n\n完了之后要测试的话，得在外网加一台客户端才能测试\n\n ![](https://liucekai.github.io/images/c6-2.png)\n\n客户端地址7.7.7.7，网关7.7.7.1配置在运营商的与客户端相连的口上\n\n ![](https://liucekai.github.io/images/c6-3.png)\n\n之后在客户端信息输入地址12.1.1.2点击获取，就能发现可以访问web了\n\n ![](https://liucekai.github.io/images/c6-4.png)\n\n------\n\n### 步骤七：访问控制列表（ACL）\n\n启动财务服务器，配置好ip地址192.168.200.20，网关192.168.200.1（之前已经在vlanif上配了网关地址了）\n\n所以此时没配置acl，所有的pc都可以访问财务服务器（走ethtrunk和vlan）\n\n ![](https://liucekai.github.io/images/c7-1.png)\n\n做acl要在核心上做，因为看拓扑图可以知道，所有的pc访问财务的首条必经之路就是核心交换机，所以在sw1上做访问控制。\n\n允许源地址为30网段的用户访问目的地为192.168.200.20的服务器\n\n`[sw1]acl 3000`\n\n`[sw1-acl-adv-3000]rule permit ip source 192.168.30.0 0.0.0.255 destination 192.168.200.20 0`\n\n`完了再来一条拒绝任何来源的用户访问财务`\n\n`[sw1-acl-adv-3000]rule deny ip source any` \n\n`destination 192.168.200.20 0`\n\n放心，vlan30的用户不会受影响，因为permit的指令在前\n\n做好规则之后，还得在相应的接口调用。即eth-trunk5上调用。\n\n ![](https://liucekai.github.io/images/c7-2.png)\n\n因为之前做了链路捆绑，所以在eth-trunk口上调用。如果没做，就还是在相应的物理口上调用\n\n注：因为数据包是从eth-trunk5口出去，不是进来，所以是outbound\n\n ![](https://liucekai.github.io/images/c7-3.png)\n\n这样其他人就进不去财务了，只有30网段的人可以，而且不影响别人访问web，这个acl只对访问财务有限制。\n\n------\n\n### 步骤八：telnet远程管理配置\n\n**telnet账户基本配置**\n\ntelnet服务端(服务端为路由器时)配置：\n\n`telnet server enable(华为设备默认开启，华三不默认)`\n\n`aaa（公用的模板：认证、授权、审计）`\n\n`local-user 用户名(chukou) password cipher` \n\n`密码(lck981011) privilege level 3（配置用户名和密码，权限级别三级）`\n\n`local-user chukou service-type telnet（也在aaa里配）`\n\n指定该用户服务类型telnet\n\n ![](https://liucekai.github.io/images/c8-1.png)\n\n`User-interface vty 0 4`\n\n `Authentication-mode aaa（认证的模式采用aaa）`\n\n ![](https://liucekai.github.io/images/c8-2.png)\n\n大概就是先开启telnet，然后配置好aaa之后，再去选择认证模式为aaa，因为你要配好了才能选择嘛。\n\n0~4表示同时允许5个人进行远程配置\n\n测试：由于ensp模拟器的pc不支持telnet的命令，测不了，，所以只能拿sw1来测试（交换机做客户端）\n\n ![](https://liucekai.github.io/images/c8-3.png)\n\n**PC、路由器做客户端时，也一样**\n\n`<R1>telnet 服务端ip地址`\n\n输入用户名密码，即可登录进去\n\n**难的是交换机**\n\n**三层交换机还好，和上面一样，二层交换机由于没有ip地址，麻烦一些（要实现telnet必须要有ip地址）**\n\n由于前面关于telnet的配置都是一样的，无论是交换机还是路由器都是那样，所以在所有交换机上先配置好关于telnet的，再在二层交换机上解决ip的问题\n\n配完了之后，得用一台路由器模拟pc，不然没有办法测telnet的功能（二层交换机不能telnet别人）\n\n ![](https://liucekai.github.io/images/c8-4.png)\n\n ![](https://liucekai.github.io/images/c8-5.png)\n\n`Dhcp enable`\n\n`Int e0/0/1`\n\n`Ip add dhcp-alloc`\n\n试着telnet sw1三层交换机：\n\n ![](https://liucekai.github.io/images/c8-6.png)\n\n可以成功，没问题，剩下的就是二层的问题了\n\n二层交换机（一般都是接入交换机）配置管理地址：\n\n首先说明，为了网络的稳定性和安全性，使得管理的可靠性，不让用户的上网业务流量出问题，我们将管理流量与用户的上网业务流量分离，比如vlan30是用户上网的网段，就不能把telnet划入进去，应该用一个专门的管理vlan来管理、承载telnet的管理流量，如vlan999。且将管理ip地址配置在一个网段即可，也就是说统一vlan999的网段，如统一为192.168.253.0/24\n\n \n\n在所有交换机上创建vlan999，并添加管理ip地址，使用svi的方法添加Ip地址。\n\n**Sw1**（配置管理ip地址，同时又是其他管理Ip地址的网关）\n\n ![](https://liucekai.github.io/images/c8-7.png)\n\n**Sw2**（配置管理ip地址）\n\n ![](https://liucekai.github.io/images/c8-8.png)\n\n**Sw3.4.5略**\n\n配好了，有了ip，有了网关，是否能telnet呢？先ping一下，如果ping都ping不通，更不可能telnet\n\n ![](https://liucekai.github.io/images/c8-9.png)\n\n**分析，20.2--->253.4**\n\n先到网关20.1（查看路由表可以看到有缺省路由到网关的，毋庸置疑），网关也可以到253.4（253.4属于vlan1即253.0，而我们之前的trunk允许通过所有vlan，路由表也可以看到，所以可达），可以在出口抓包看\n\n ![](https://liucekai.github.io/images/c8-10.png)\n\n但是sw4没有回包路由，他只是个二层交换机，查看路由表可以发现只有到达253网段的直连，所以对于20.2这个目的地址他是不知道怎么转发的，所以要配置一条缺省路由让他先回到核心交换机上\n\n ![](https://liucekai.github.io/images/c8-11.png)\n\n`Ip route-static 0.0.0.0 0 192.168.253.1`\n\n这样一来，即使路由表没有对应的路由，也可以走缺省回到核心（缺省路由：目的地址为任意），回到核心就行了，核心上有回到20网段的路由，所以就可以回包了\n\n ![](https://liucekai.github.io/images/c8-12.png)\n\n ![](https://liucekai.github.io/images/c8-13.png)\n\n这样就可以管理sw4了，对其他二层也一样，只需一条回包的缺省路由即可。\n\n\n\n<u>**注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1**</u>\n\n------\n\n### 步骤九：Vlan 修剪\n\n（这一步其中可以在配置底层trunk、vlan的时候就可以一起做，即配置的时候不要allow-pass vlan all,要根据具体需求通过vlan广播）\n\n刚开始做trunk的时候是允许所有vlan通过的，这样会使广播域变大（当用户发送一个广播，会让这个广播跑到所有的trunk链路里去，即使发不到所有的用户上，也能在一定程度上影响网络稳定性）为了减小广播域，减少广播报文在trunk链路上的发送范围，我们需要做vlan修剪，让各个trunk链路上该通过的vlan通过，而不是所有\n\nSw2：应通过10、20、999\n\n ![](https://liucekai.github.io/images/c9-1.png)\n\nSw3：应通过30、999\n\n ![](https://liucekai.github.io/images/c9-2.png)\n\nSw4、5略\n\n核心：上行和下行相对应：\n\n ![](https://liucekai.github.io/images/c9-3.png)\n\n最后，测试\n\n上外网：Pc1--->9.9.9.9\n\n ![](https://liucekai.github.io/images/c9-4.png)\n\n试试vlan间路由：pc1--->pc5（vlan10--->vlan40）\n\n ![](https://liucekai.github.io/images/c9-5.png)\n\n访问web:pc1--->192.168.200.10\n\n ![](https://liucekai.github.io/images/c9-6.png)\n\n试试telnet远程管理别的二层、三层交换机\n\n ![](https://liucekai.github.io/images/c9-7.png)\n\n ![](https://liucekai.github.io/images/c9-8.png)\n\n因为模拟器的pc不支持telnet，所以只能ping来测试，效果也一样","content":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ul>\n<li>设置合理的stp优先级、边缘端口、eth-trunk</li>\n<li>企业内网划分多个vlan</li>\n<li>所有设备，在任何位置都能telnet远程管理</li>\n<li>出口配置NAT<a id=\"more\"></a></li>\n<li>所有用户均为自动获取ip地址</li>\n<li>在企业出口将内网服务器的端口映射出去，允许外网用户访问</li>\n<li>企业财务服务器，只允许财务部（vlan 30）的员工访问</li>\n</ul>\n<hr>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><ul>\n<li>减少广播域大小，提高网络稳定性</li>\n<li>减少设备收敛时间</li>\n<li>提高内网设备安全性</li>\n</ul>\n<hr>\n<h2 id=\"拓扑展示\"><a href=\"#拓扑展示\" class=\"headerlink\" title=\"拓扑展示\"></a>拓扑展示</h2><p><img src=\"https://liucekai.github.io/images/tp200.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"详细方案\"><a href=\"#详细方案\" class=\"headerlink\" title=\"详细方案\"></a>详细方案</h2><h3 id=\"步骤一：STP优化、Eth-trunk\"><a href=\"#步骤一：STP优化、Eth-trunk\" class=\"headerlink\" title=\"步骤一：STP优化、Eth-trunk\"></a>步骤一：STP优化、Eth-trunk</h3><p>配置核心交换机stp（配置为根桥）</p>\n<p><img src=\"https://liucekai.github.io/images/c1-1.png\" alt=\"\"></p>\n<p>配置边缘端口：</p>\n<p>Sw5的24个端口除了第23.24两个千兆口上接核心交换机不管，其他口全部配置边缘端口。</p>\n<p>先查看各个端口信息dis int brief：</p>\n<p><img src=\"https://liucekai.github.io/images/c1-2.png\" alt=\"\"></p>\n<p>Group-member e0/0/1 to e0/0/22对这些端口进行批量分组。Stp edged-port enable 批量对该分组内的所有端口进行配置（启用边缘接口:建议将连接pc或服务器的那些交换机接口即启用边缘端口，减少接口的收敛时间，告诉交换机此条路不需要检测环路）</p>\n<p><img src=\"https://liucekai.github.io/images/c1-3.png\" alt=\"\"></p>\n<p>dis current-configuration查看当前交换机全局配置：</p>\n<p><img src=\"https://liucekai.github.io/images/c1-4.png\" alt=\"\"></p>\n<p>同上对sw2.sw3.sw4进行同样配置。</p>\n<p>配置eth-trunk</p>\n<p><img src=\"https://liucekai.github.io/images/c1-5.png\" alt=\"\"></p>\n<p>进入eth-trunk口2，启用lacp模式，查看，并将g1口和g2口划入eth-trunk口2，</p>\n<p>同样，把对端（核心交换机）的eth-trunk2启用lacp，而且也要把1口和4口也划进来。</p>\n<!--静态LACP模式-->\n\n<!--静态LACP模式是一种利用LACP协议进行聚合参数协商、确定活动接口和非活动接口的链路聚合方式。该模式下，需手工创建Eth-Trunk，手工加入Eth-Trunk成员接口，由LACP协议协商确定活动接口和非活动接口。-->\n\n<!--静态LACP模式也称为M∶N模式。这种方式同时可以实现链路负载分担和链路冗余备份的双重功能。在链路聚合组中M条链路处于活动状态，这些链路负责转发数据并进行负载分担，另外N条链路处于非活动状态作为备份链路，不转发数据。当M条链路中有链路出现故障时，系统会从N条备份链路中选择优先级最高的接替出现故障的链路，同时这条替换故障链路的备份链路状态变为活动状态开始转发数据。-->\n\n<!--静态LACP模式与手工负载分担模式的主要区别为：静态LACP模式有备份链路，而手工负载分担模式所有成员接口均处于转发状态，分担负载流量。-->\n\n<!--和静态LACP模式相对应的还包括动态LACP模式。动态LACP模式的链路聚合，从Eth-Trunk的创建到加入成员接口都不需要人工的干预，由LACP协议自动协商完成。虽然这种方式对于用户来说很简单，但由于这种方式过于灵活，不便于管理，所以S5700上不支持动态LACP模式链路聚合。-->\n\n\n\n<p>完成两端的eth-trunk2相关配置之后，同样对sw3.sw4进行操作，由于他们都与sw1相连，所以sw1一共要进行三次启用lacp（分别在eth-trunk2/ eth-trunk3/ eth-trunk4）。</p>\n<p><img src=\"https://liucekai.github.io/images/c1-6.png\" alt=\"\"></p>\n<p>此时再查看eth-trunk口的信息就会发现，1。2口都已经被选择了，而不是unselected了,dis stp brief也能看到，两个口都处于转发状态，而不是只有一个口（因为两个口已经捆绑在一起了）。</p>\n<p><img src=\"https://liucekai.github.io/images/c1-7.png\" alt=\"\"></p>\n<p>修改cost为固定值：先用dis stp interface eth-trunk 2查看cost值是多少，看到默认为10000，所以建议在所有的eth-trunk 口下用stp cost 10000把cost 改10000，2.3.4.5都改为10000。</p>\n<p>把sw2和sw3的eth-trunk配好之后，用dis eth-trunk在sw1上查看，会发现可以了。</p>\n<p><img src=\"https://liucekai.github.io/images/c1-8.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/c1-9.png\" alt=\"\"></p>\n<p>再对sw4—sw1之间的eth-trunk4配：</p>\n<p><img src=\"https://liucekai.github.io/images/c1-10.png\" alt=\"\"></p>\n<p><img src=\"https://liucekai.github.io/images/c1-11.png\" alt=\"\"></p>\n<p>再配5（略）</p>\n<p>最后的成果是用dis eth-trunk在sw1上会看到eth-trunk2.3.4.5里的两个捆绑口都启用（selected）了，最后记得save。</p>\n<hr>\n<h3 id=\"步骤二：vlan和trunk\"><a href=\"#步骤二：vlan和trunk\" class=\"headerlink\" title=\"步骤二：vlan和trunk\"></a>步骤二：vlan和trunk</h3><p>先在sw2：创建vlan 10和vlan 20，并把对应的e2口和e3分别按照拓扑图划入</p>\n<p><img src=\"https://liucekai.github.io/images/c1-12.png\" alt=\"\"></p>\n<p>上图配错口了，不是e1口，而是e3口，不过问题不大，再添上。</p>\n<p><code>interface Ethernet0/0/2</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 10</code></p>\n<p><code>interface Ethernet0/0/3</code></p>\n<p> <code>port link-type access</code></p>\n<p> <code>port default vlan 20</code></p>\n<p>然后配trunk,注意，这时是用之前配的eth-trunk 2 口配置trunk了，而不是在两个物理口配置了，因为两个物理口已经绑在一起了。</p>\n<p><img src=\"https://liucekai.github.io/images/c1-13.png\" alt=\"\"></p>\n<p><code>interface Eth-Trunk2</code></p>\n<p><code>port link-type trunk</code></p>\n<p><code>port trunk allow-pass vlan 2 to 4094</code>（vlan all也一样）</p>\n<p>这两个操作对sw3.sw4.sw5同样操作。</p>\n<p>需要注意的一点是，如sw3，两个e口都属于vlan30，这时候应该想到，如果有更多的口同属于一个vlan，是否可以批量进行配置，而不是一个口一个口的划分？答案是可以！前面也有讲到批量配置的方法，即：</p>\n<p><code>Port-group group member ethernet0/0/3 to Ethernet 0/0/22</code></p>\n<p>然后再配置就能配置上所有的口。</p>\n<p>配完几个接入交换机后，开始配核心交换机。</p>\n<p>由于核心交换机同时接入好几个接入交换机，所以配置核心的时候和配置接口的时候是不太一样的，因为核心比较全局一点，要配的更多</p>\n<p>关于vlan，接入的交换机有几个vlan，核心就要配几个vlan</p>\n<p>[sw1]vlan batch 10 20 30 40 200</p>\n<p>接下来弄trunk（因为接入交换机上行是配置了trunk，那核心下行肯定也要配trunk）</p>\n<p>而且可以用批量</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-14.png\" alt=\"\"></p>\n<p><code>[sw1]port-group group-member Eth-Trunk 2 to Eth-Trunk 5</code></p>\n<p><code>[sw1-port-group]port link-type trunk</code></p>\n<p><code>[sw1-port-group]port trunk allow-pass vlan all</code></p>\n<p>最后用dis vlan在核心上看</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-15.png\" alt=\"\"></p>\n<p>Dis port vlan active也可以看</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-16.png\" alt=\"\"></p>\n<p>可以了，关于vlan和trunk配到这。</p>\n<p><strong>补充：配置trunk的意义</strong></p>\n<p>默认情况下，如果没配置trunk，交换机的一个接口只能从属于一个vlan,即只允许该vlan的数据通过，配置了trunk，该接口就能通过多个vlan的数据，并在该数据进入trunk时打上相应的id或者说是tag，根据这一特性还可以实现vlan间路由之svi（改变id）。</p>\n<hr>\n<h3 id=\"步骤三：SVI配置\"><a href=\"#步骤三：SVI配置\" class=\"headerlink\" title=\"步骤三：SVI配置\"></a>步骤三：SVI配置</h3><p>以本项目为例（核心交换机做地址池）为了让Pc通过网关获取ip地址，需要将网关配置在核心交换机的vlanif上</p>\n<p><strong>所以首先，在sw1上配置各网关</strong></p>\n<p> <img src=\"https://liucekai.github.io/images/c1-17.png\" alt=\"\"></p>\n<p>添加ip时后面可以是24也可以是255.255.255.0</p>\n<p><strong>SW1</strong></p>\n<p><code>interface Vlanif10</code></p>\n<p> <code>ip address 192.168.10.1 255.255.255.0</code></p>\n<p><code>interface Vlanif20</code></p>\n<p> <code>ip address 192.168.20.1 255.255.255.0</code></p>\n<p><code>interface Vlanif30</code></p>\n<p> <code>ip address 192.168.30.1 255.255.255.0</code></p>\n<p><code>interface Vlanif40</code></p>\n<p> <code>ip address 192.168.40.1 255.255.255.0</code></p>\n<p><code>interface Vlanif200</code></p>\n<p> <code>ip address 192.168.200.1 255.255.255.0</code></p>\n<p><strong>SVI补充：</strong></p>\n<p>在没有svi时，不同vlan之间是不可以互相通信的，配置了svi之后，如本案例，pc1—》pc6（10.254—&gt;20.253），pc1通过trunk发给核心上的网关，到达网关之前由于是从trunk出去的所以带着id为10（因为是vlan10的用户）的报文，到达网关后（配置了svi），网关查看路由表里发现虚拟接口vlanif下有相应目的网段为20.0的路由，于是将原来带有id为10的报文里的id改为20！并根据路由发出去，最后接入交换机看到id为20的报文就发给了目的地址20.253，回包原理一样，svi实现了不同vlan间的路由（三层设备做中转的前提下，本例中核心做中转）,但是仅限于单播，广播依然不能互相通信，本质就是查看路由表，相应地转换单播报文的id。但不转换广播的，如果用户pc直接与核心交换机相连，没有接入交换机，也就是不需要trunk，那也就不存在id，也就不需要转换id一说了，当然这不现实,那此时svi也就仅仅提供了虚拟接口方便配置网关使两不同vlan之间通信。本例是由于有trunk，所以还提供了转换id</p>\n<p>三层交换机和路由器三层对接：</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-18.png\" alt=\"\"></p>\n<p>将24口划入vlan800并配置为access接口，同时给vlan800配置ip地址254.2，使用这个ip与R1进行对接</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-19.png\" alt=\"\"></p>\n<p><strong>SW1</strong></p>\n<p><code>Vlan 800</code></p>\n<p><code>interface GigabitEthernet0/0/24</code></p>\n<p><code>port link-type access</code></p>\n<p><code>port default vlan 800</code></p>\n<p><code>interface Vlanif800</code></p>\n<p> <code>ip address 192.168.254.2 255.255.255.0</code></p>\n<p> <img src=\"https://liucekai.github.io/images/c1-20.png\" alt=\"\"></p>\n<p>检验一下：做到这，pc到核心上，vlan,trunk,网关都做好了，应该能走pc-&gt;核心了，给pc手动配个固定的ip测试一下，因为现在还没有配置dhcp，所以先手动配一个，之后再通过dhcp获取</p>\n<p> <img src=\"https://liucekai.github.io/images/c1-21.png\" alt=\"\"></p>\n<p>经测试，可以获取地址</p>\n<hr>\n<h3 id=\"步骤四：BFD（检测引擎假死）\"><a href=\"#步骤四：BFD（检测引擎假死）\" class=\"headerlink\" title=\"步骤四：BFD（检测引擎假死）\"></a>步骤四：BFD（检测引擎假死）</h3><p>在sw1上开启dhcp，并分配地址池，有几个网段就分配几个地址池。</p>\n<p><code>[sw1]dhcp enable</code></p>\n<p> <img src=\"https://liucekai.github.io/images/c4-1.png\" alt=\"\"></p>\n<p><code>ip pool xiaoshou_1</code></p>\n<p> <code>gateway-list 192.168.10.1</code></p>\n<p> <code>network 192.168.10.0 mask 255.255.255.0</code></p>\n<p> <code>dns-list 114.114.114.114 8.8.8.8</code></p>\n<p>同样，配置xiaoshou_2，caiwu,jishu。</p>\n<p>添加完地址池之后，还没完，还要在各个vlanif接口下（10.20.30.40）启用dhcp select。</p>\n<p> <img src=\"https://liucekai.github.io/images/c4-2.png\" alt=\"\"></p>\n<p><code>interface Vlanif10</code></p>\n<p> <code>ip address 192.168.10.1 255.255.255.0</code></p>\n<p> <code>dhcp select global</code></p>\n<p><code>interface Vlanif20</code></p>\n<p> <code>ip address 192.168.20.1 255.255.255.0</code></p>\n<p> <code>dhcp select global</code></p>\n<p><code>interface Vlanif30</code></p>\n<p> <code>ip address 192.168.30.1 255.255.255.0</code></p>\n<p> <code>dhcp select global</code></p>\n<p><code>interface Vlanif40</code></p>\n<p> <code>ip address 192.168.40.1 255.255.255.0</code></p>\n<p> <code>dhcp select global</code></p>\n<p>完成了，在PC上测试一下是否能自动获取了</p>\n<p> <img src=\"https://liucekai.github.io/images/c4-3.png\" alt=\"\"></p>\n<p>可以看到能获取</p>\n<hr>\n<h3 id=\"步骤五：出口路由-nat（网络地址转换技术，翻译技术）\"><a href=\"#步骤五：出口路由-nat（网络地址转换技术，翻译技术）\" class=\"headerlink\" title=\"步骤五：出口路由 nat（网络地址转换技术，翻译技术）\"></a>步骤五：出口路由 nat（网络地址转换技术，翻译技术）</h3><p>先给出口路由器和运营商路由器按照拓扑配置接口ip地址</p>\n<p> <img src=\"https://liucekai.github.io/images/c5-1.png\" alt=\"\"></p>\n<p> <img src=\"https://liucekai.github.io/images/c5-2.png\" alt=\"\"></p>\n<p>此时配置完所有的ip，测试pc能否访问外网，很显然还不行</p>\n<p> <img src=\"https://liucekai.github.io/images/c5-3.png\" alt=\"\"></p>\n<p>因为虽然pc能够发送数据包到达核心层，但核心层（此时作为三层路由使用）与出口路由器还没有进行三层对接，即没有缺省路由到达出口路由器，所以这是一点，</p>\n<p>还有一点，即使到了出口路由器，此时出去的是私网地址，不是公网（运营商网络）地址，访问外网时会被丢弃，所以还需要在出口路由处进行私网地址与公网地址的转换，也就是nat操作</p>\n<p><strong>先在核心上配缺省路由（特殊的静态路由），指向出口路由。</strong></p>\n<p><code>[sw1]ip route-static 0.0.0.0 0 192.168.254.1</code></p>\n<p><strong>而后出口路由也需要一条缺省路由指向运营商</strong></p>\n<p><code>[AR1]ip route-static 0.0.0.0 0 12.1.1.6</code></p>\n<p>好了，数据包可以出去了，现在要注意思考的是，<strong>数据包怎么回来？</strong>运营商到出口路由，出口路由怎么把报文回馈到我们的内网？</p>\n<p><strong>所以我们还是要通过静态路由告诉他，怎么回内网</strong></p>\n<p>由于内网的网段比较多，但都同属于192.168.0.0/16这个大网段，所以为了节省时间只需要配</p>\n<p><code>[AR1]ip route-static 192.168.0.0 16 192.168.254.2</code></p>\n<p>目的网段是内网里的所有网段，下一跳是核心交换机的g0/0/24口</p>\n<p>做到这，起码在路由层面（交通）没什么问题了，能去能回</p>\n<p><strong>NAT:</strong></p>\n<p>\\1. 静态nat、static nat:一对一，一个私网地址对应一个公网地址，外网的地址可以访问内网的主机（不是直接ping那个主机，而是ping那个路由或防火墙的外网那个口），缺点：有多少个私网地址就有多少个公网地址，假如我有一万个私网地址要用，难道我要向运营商买一万个公网地址？</p>\n<p>Int g0/0/x(在外网口)</p>\n<p> Nat static global 12.1.1.2 inside 192.168.31.2</p>\n<p>Global：全局公网地址</p>\n<p>Local:内网私有地址</p>\n<p>Inside:内网 内部</p>\n<p>Outside：外网 外部</p>\n<p>\\2. Nat之Easy ip：允许多个私网地址转换成一个公网地址，很常用、</p>\n<p>出口路由全局：先写acl匹配内网私网地址段（这里的acl不是做访问控制列表）</p>\n<p><code>Acl number 2000</code></p>\n<p> <code>Rule 5 permit source 192.168.0.0 0.0.0.255</code></p>\n<p>注意：acl做匹配范围时，没有默认隐含允许所有的规则</p>\n<p><code>Int g0/0/x（公网接口，即外网口）</code></p>\n<p> <code>Nat outbound 2000(2000是acl 的表号)</code></p>\n<p>原理：内网私网出包时转换成外网口当前的ip地址</p>\n<p>如果同时两个人a,b都上网，两个数据包同时出去，转换完了之后都变成一样的公网地址了对吧，那运营商回包的时候，他怎么知道哪个包是a的，哪个包是b要的呢。因为在出口路由转换的时候，就已经在两个包上分别附带上了‘小尾巴’（一个在数据包里的记录），在回来时，一看小尾巴就知道哪个是哪个了。就不会弄乱</p>\n<p><strong>所以本项目中，在出口路由采用easy ip</strong></p>\n<p><code>[r1]acl 2000</code></p>\n<p><code>[r1-acl-basic-2000]rule 5 permit source 192.168.0.0 0.0.255.255</code></p>\n<p>外网口：</p>\n<p>i<code>nterface GigabitEthernet0/0/1</code></p>\n<p><code>nat outbound 2000</code></p>\n<p> <img src=\"https://liucekai.github.io/images/c5-4.png\" alt=\"\"></p>\n<p>过程：</p>\n<p>Pc3-&gt;运营商——–192.168.30.2-&gt;9.9.9.9</p>\n<p>上面这个数据包要先交给核心层的网关，核心层拿到之后查看路由表发现没有合适的路径，所以走缺省路由（前面配置过，指向r1的缺省路由），到达r1，r1拿到，查看路由表发现还是没有，所以还走缺省（也配置过，指向r2），然后经过外网口出去的时候，经nat转换，变成了12.1.1.1-&gt;9.9.9.9,然后就能到运营商了，运营商肯定会给你回馈报文，只要他拿到了，你不用担心他不会给你转发。运营商到你出口路由外网口的这段路你不用操心，运营商把包9.9.9.9-&gt;12.1.1.1送回来，到外网接口之后，再次转换地址变为9.9.9.9-&gt;192.168.30.2，然后r1拿到之后，这里就需要一条静态路由指向内网了，不然是找不到回家的路的，前面配置过了</p>\n<hr>\n<h3 id=\"步骤六：服务器端口映射\"><a href=\"#步骤六：服务器端口映射\" class=\"headerlink\" title=\"步骤六：服务器端口映射\"></a>步骤六：服务器端口映射</h3><p>基础配置配完了之后，点服务器信息</p>\n<p> <img src=\"https://liucekai.github.io/images/c6-1.png\" alt=\"\"></p>\n<p>随便选个根目录，然后启动，就能模拟一个服务器的网站了</p>\n<p>在出口路由的外网口：</p>\n<p><code>Int g0/0/1</code></p>\n<p><code>nat server protocol tcp global 12.1.1.2 80 inside 192.</code></p>\n<p><code>168.200.10 80</code></p>\n<p>因为是网站所以用80端口，80也可以用www代替</p>\n<p>完了之后要测试的话，得在外网加一台客户端才能测试</p>\n<p> <img src=\"https://liucekai.github.io/images/c6-2.png\" alt=\"\"></p>\n<p>客户端地址7.7.7.7，网关7.7.7.1配置在运营商的与客户端相连的口上</p>\n<p> <img src=\"https://liucekai.github.io/images/c6-3.png\" alt=\"\"></p>\n<p>之后在客户端信息输入地址12.1.1.2点击获取，就能发现可以访问web了</p>\n<p> <img src=\"https://liucekai.github.io/images/c6-4.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"步骤七：访问控制列表（ACL）\"><a href=\"#步骤七：访问控制列表（ACL）\" class=\"headerlink\" title=\"步骤七：访问控制列表（ACL）\"></a>步骤七：访问控制列表（ACL）</h3><p>启动财务服务器，配置好ip地址192.168.200.20，网关192.168.200.1（之前已经在vlanif上配了网关地址了）</p>\n<p>所以此时没配置acl，所有的pc都可以访问财务服务器（走ethtrunk和vlan）</p>\n<p> <img src=\"https://liucekai.github.io/images/c7-1.png\" alt=\"\"></p>\n<p>做acl要在核心上做，因为看拓扑图可以知道，所有的pc访问财务的首条必经之路就是核心交换机，所以在sw1上做访问控制。</p>\n<p>允许源地址为30网段的用户访问目的地为192.168.200.20的服务器</p>\n<p><code>[sw1]acl 3000</code></p>\n<p><code>[sw1-acl-adv-3000]rule permit ip source 192.168.30.0 0.0.0.255 destination 192.168.200.20 0</code></p>\n<p><code>完了再来一条拒绝任何来源的用户访问财务</code></p>\n<p><code>[sw1-acl-adv-3000]rule deny ip source any</code> </p>\n<p><code>destination 192.168.200.20 0</code></p>\n<p>放心，vlan30的用户不会受影响，因为permit的指令在前</p>\n<p>做好规则之后，还得在相应的接口调用。即eth-trunk5上调用。</p>\n<p> <img src=\"https://liucekai.github.io/images/c7-2.png\" alt=\"\"></p>\n<p>因为之前做了链路捆绑，所以在eth-trunk口上调用。如果没做，就还是在相应的物理口上调用</p>\n<p>注：因为数据包是从eth-trunk5口出去，不是进来，所以是outbound</p>\n<p> <img src=\"https://liucekai.github.io/images/c7-3.png\" alt=\"\"></p>\n<p>这样其他人就进不去财务了，只有30网段的人可以，而且不影响别人访问web，这个acl只对访问财务有限制。</p>\n<hr>\n<h3 id=\"步骤八：telnet远程管理配置\"><a href=\"#步骤八：telnet远程管理配置\" class=\"headerlink\" title=\"步骤八：telnet远程管理配置\"></a>步骤八：telnet远程管理配置</h3><p><strong>telnet账户基本配置</strong></p>\n<p>telnet服务端(服务端为路由器时)配置：</p>\n<p><code>telnet server enable(华为设备默认开启，华三不默认)</code></p>\n<p><code>aaa（公用的模板：认证、授权、审计）</code></p>\n<p><code>local-user 用户名(chukou) password cipher</code> </p>\n<p><code>密码(lck981011) privilege level 3（配置用户名和密码，权限级别三级）</code></p>\n<p><code>local-user chukou service-type telnet（也在aaa里配）</code></p>\n<p>指定该用户服务类型telnet</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-1.png\" alt=\"\"></p>\n<p><code>User-interface vty 0 4</code></p>\n<p> <code>Authentication-mode aaa（认证的模式采用aaa）</code></p>\n<p> <img src=\"https://liucekai.github.io/images/c8-2.png\" alt=\"\"></p>\n<p>大概就是先开启telnet，然后配置好aaa之后，再去选择认证模式为aaa，因为你要配好了才能选择嘛。</p>\n<p>0~4表示同时允许5个人进行远程配置</p>\n<p>测试：由于ensp模拟器的pc不支持telnet的命令，测不了，，所以只能拿sw1来测试（交换机做客户端）</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-3.png\" alt=\"\"></p>\n<p><strong>PC、路由器做客户端时，也一样</strong></p>\n<p><code>&lt;R1&gt;telnet 服务端ip地址</code></p>\n<p>输入用户名密码，即可登录进去</p>\n<p><strong>难的是交换机</strong></p>\n<p><strong>三层交换机还好，和上面一样，二层交换机由于没有ip地址，麻烦一些（要实现telnet必须要有ip地址）</strong></p>\n<p>由于前面关于telnet的配置都是一样的，无论是交换机还是路由器都是那样，所以在所有交换机上先配置好关于telnet的，再在二层交换机上解决ip的问题</p>\n<p>配完了之后，得用一台路由器模拟pc，不然没有办法测telnet的功能（二层交换机不能telnet别人）</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-4.png\" alt=\"\"></p>\n<p> <img src=\"https://liucekai.github.io/images/c8-5.png\" alt=\"\"></p>\n<p><code>Dhcp enable</code></p>\n<p><code>Int e0/0/1</code></p>\n<p><code>Ip add dhcp-alloc</code></p>\n<p>试着telnet sw1三层交换机：</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-6.png\" alt=\"\"></p>\n<p>可以成功，没问题，剩下的就是二层的问题了</p>\n<p>二层交换机（一般都是接入交换机）配置管理地址：</p>\n<p>首先说明，为了网络的稳定性和安全性，使得管理的可靠性，不让用户的上网业务流量出问题，我们将管理流量与用户的上网业务流量分离，比如vlan30是用户上网的网段，就不能把telnet划入进去，应该用一个专门的管理vlan来管理、承载telnet的管理流量，如vlan999。且将管理ip地址配置在一个网段即可，也就是说统一vlan999的网段，如统一为192.168.253.0/24</p>\n<p>在所有交换机上创建vlan999，并添加管理ip地址，使用svi的方法添加Ip地址。</p>\n<p><strong>Sw1</strong>（配置管理ip地址，同时又是其他管理Ip地址的网关）</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-7.png\" alt=\"\"></p>\n<p><strong>Sw2</strong>（配置管理ip地址）</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-8.png\" alt=\"\"></p>\n<p><strong>Sw3.4.5略</strong></p>\n<p>配好了，有了ip，有了网关，是否能telnet呢？先ping一下，如果ping都ping不通，更不可能telnet</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-9.png\" alt=\"\"></p>\n<p><strong>分析，20.2—&gt;253.4</strong></p>\n<p>先到网关20.1（查看路由表可以看到有缺省路由到网关的，毋庸置疑），网关也可以到253.4（253.4属于vlan1即253.0，而我们之前的trunk允许通过所有vlan，路由表也可以看到，所以可达），可以在出口抓包看</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-10.png\" alt=\"\"></p>\n<p>但是sw4没有回包路由，他只是个二层交换机，查看路由表可以发现只有到达253网段的直连，所以对于20.2这个目的地址他是不知道怎么转发的，所以要配置一条缺省路由让他先回到核心交换机上</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-11.png\" alt=\"\"></p>\n<p><code>Ip route-static 0.0.0.0 0 192.168.253.1</code></p>\n<p>这样一来，即使路由表没有对应的路由，也可以走缺省回到核心（缺省路由：目的地址为任意），回到核心就行了，核心上有回到20网段的路由，所以就可以回包了</p>\n<p> <img src=\"https://liucekai.github.io/images/c8-12.png\" alt=\"\"></p>\n<p> <img src=\"https://liucekai.github.io/images/c8-13.png\" alt=\"\"></p>\n<p>这样就可以管理sw4了，对其他二层也一样，只需一条回包的缺省路由即可。</p>\n<p><u><strong>注意：这一个步骤我犯了个错误，真正的二层交换机只有一个默认vlan1可以用作管理vlan，没有别的vlan，而我在ensp上没有找到二层交换机，只有三层交换机，所以才会创建成功vlan999,真正的二层交换机只有一个默认vlan1</strong></u></p>\n<hr>\n<h3 id=\"步骤九：Vlan-修剪\"><a href=\"#步骤九：Vlan-修剪\" class=\"headerlink\" title=\"步骤九：Vlan 修剪\"></a>步骤九：Vlan 修剪</h3><p>（这一步其中可以在配置底层trunk、vlan的时候就可以一起做，即配置的时候不要allow-pass vlan all,要根据具体需求通过vlan广播）</p>\n<p>刚开始做trunk的时候是允许所有vlan通过的，这样会使广播域变大（当用户发送一个广播，会让这个广播跑到所有的trunk链路里去，即使发不到所有的用户上，也能在一定程度上影响网络稳定性）为了减小广播域，减少广播报文在trunk链路上的发送范围，我们需要做vlan修剪，让各个trunk链路上该通过的vlan通过，而不是所有</p>\n<p>Sw2：应通过10、20、999</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-1.png\" alt=\"\"></p>\n<p>Sw3：应通过30、999</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-2.png\" alt=\"\"></p>\n<p>Sw4、5略</p>\n<p>核心：上行和下行相对应：</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-3.png\" alt=\"\"></p>\n<p>最后，测试</p>\n<p>上外网：Pc1—&gt;9.9.9.9</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-4.png\" alt=\"\"></p>\n<p>试试vlan间路由：pc1—&gt;pc5（vlan10—&gt;vlan40）</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-5.png\" alt=\"\"></p>\n<p>访问web:pc1—&gt;192.168.200.10</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-6.png\" alt=\"\"></p>\n<p>试试telnet远程管理别的二层、三层交换机</p>\n<p> <img src=\"https://liucekai.github.io/images/c9-7.png\" alt=\"\"></p>\n<p> <img src=\"https://liucekai.github.io/images/c9-8.png\" alt=\"\"></p>\n<p>因为模拟器的pc不支持telnet，所以只能ping来测试，效果也一样</p>\n","slug":"200-500人二层架构企业园区网","updated":"2020-06-14T07:33:44.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/200-500%E4%BA%BA%E4%BA%8C%E5%B1%82%E6%9E%B6%E6%9E%84%E4%BC%81%E4%B8%9A%E5%9B%AD%E5%8C%BA%E7%BD%91/","excerpt":"需求分析 设置合理的stp优先级、边缘端口、eth-trunk 企业内网划分多个vlan 所有设备，在任何位置都能telnet远程管理 出口配置NAT","categories":[],"tags":[]},{"title":"我的第一个博客","date":"2020-06-02T05:37:36.000Z","path":"2020/06/02/test-my-site/","text":"","raw":"---\ntitle: 我的第一个博客\ndate: 2020-06-02 13:37:36\ntags:\n---\n","content":"","slug":"test-my-site","updated":"2020-06-02T05:37:36.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/test-my-site/","excerpt":"","categories":[],"tags":[]},{"title":"综合布线","date":"2020-06-02T05:37:36.000Z","path":"2020/06/02/综合布线/","text":"智能大厦简介智能在于5A（automatic 自动） BA楼宇自动化：系统集成、楼宇自控系统 OA办公自动化：集成管理系统、触摸查询 FA消防自动化：消防报警系统、背景音乐系统… SA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统 CA通信自动化：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、综合布线系统 虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合 综合布线系统—子系统工作区子系统（服务区子系统）由跳线与信息插座所连接的终端设备组成 信息插座：墙面型、地面型、桌面型等 终端设备：电话机、计算机、传真机、报警探头、摄像机、监视器、各种传感器件、各种音响设备 水平子系统（配线子系统）工作区信息插座模块、模块到楼层管理间的连接缆线、配线架、跳线等组成，实现工作区与管理间之间的连接 管理间子系统垂直子系统（干线子系统）用于连接管理间子系统与设备间子系统， 注意事项： 垂直子系统使用光缆 垂直子系统应为星型拓扑结构垂直子系统干线光缆的拐弯处不要用直角拐弯 干线电缆和光缆布线的交接不应超过两次 从楼层配线到建筑群配线架之间只应有一个配线架 设备间子系统进线间子系统建筑群子系统 综合布线系统—线缆双绞线的数据传输1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用） T568A和T568B线序图 直通线缆、交叉线缆应用场景（以前）​ 直通线缆 交叉线缆 交换机&lt;—&gt;路由器 交换机&lt;—&gt;交换机 交换机&lt;—&gt;PC 交换机&lt;—&gt;集线器 交换机&lt;—&gt;服务器 集线器&lt;—&gt;路由器 集线器&lt;—&gt;PC 路由器&lt;—&gt;路由器 集线器&lt;—&gt;服务器 路由器&lt;—&gt;PC ​ PC&lt;—&gt;PC 图 现在随着技术的发展，新一代的网络设备，比如三层交换机之间可以支持直通电缆，路由器之间也可以支持直通电缆了，甚至路由器和pc也可以","raw":"---\ntitle: 综合布线\ndate: 2020-06-02 13:37:36\n---\n\n### 智能大厦简介\n\n智能在于5A（automatic 自动）\n\nBA楼宇自动化：系统集成、楼宇自控系统\n\nOA办公自动化：集成管理系统、触摸查询\n\nFA消防自动化：消防报警系统、背景音乐系统...<!-- more -->\n\nSA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统\n\n**CA通信自动化**：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、**综合布线系统**\n\n**虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合**\n\n------\n\n### 综合布线系统---子系统\n\n#### 工作区子系统（服务区子系统）\n\n由跳线与信息插座所连接的终端设备组成\n\n信息插座：墙面型、地面型、桌面型等\n\n终端设备：电话机、计算机、传真机、报警探头、摄像机、监视器、各种传感器件、各种音响设备\n\n#### 水平子系统（配线子系统）\n\n工作区信息插座模块、模块到楼层管理间的连接缆线、配线架、跳线等组成，实现**工作区与管理间之间的连接**\n\n#### 管理间子系统\n\n#### 垂直子系统（干线子系统）\n\n用于连接管理间子系统与设备间子系统，\n\n注意事项：\n\n垂直子系统使用光缆\n\n垂直子系统应为星型拓扑结构垂直子系统干线光缆的拐弯处不要用直角拐弯\n\n干线电缆和光缆布线的交接不应超过两次\n\n从楼层配线到建筑群配线架之间只应有一个配线架\n\n#### 设备间子系统\n\n#### 进线间子系统\n\n#### 建筑群子系统\n\n------\n\n### 综合布线系统---线缆\n\n#### **双绞线的数据传输**\n\n1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）\n\n![](https://liucekai.github.io/images/zh1.png)\n\n#### T568A和T568B线序\n\n图\n\n#### 直通线缆、交叉线缆应用场景（以前）\n\n​        直通线缆                              交叉线缆\n\n交换机<--->路由器              交换机<--->交换机\n\n交换机<--->PC                     交换机<--->集线器\n\n交换机<--->服务器              集线器<--->路由器\n\n集线器<--->PC                     路由器<--->路由器\n\n集线器<--->服务器              路由器<--->PC\n\n​                                             PC<--->PC\n\n图\n\n<u>**现在随着技术的发展，新一代的网络设备，比如三层交换机之间可以支持直通电缆，路由器之间也可以支持直通电缆了**</u><u>**，甚至路由器和pc也可以**</u>","content":"<h3 id=\"智能大厦简介\"><a href=\"#智能大厦简介\" class=\"headerlink\" title=\"智能大厦简介\"></a>智能大厦简介</h3><p>智能在于5A（automatic 自动）</p>\n<p>BA楼宇自动化：系统集成、楼宇自控系统</p>\n<p>OA办公自动化：集成管理系统、触摸查询</p>\n<p>FA消防自动化：消防报警系统、背景音乐系统…<a id=\"more\"></a></p>\n<p>SA安保自动化：一卡通系统、防盗报警系统、电子巡更系统、电视监控系统</p>\n<p><strong>CA通信自动化</strong>：UPS系统、视频会议系统、有线电视系统、计算机网络系统、语音通信系统、<strong>综合布线系统</strong></p>\n<p><strong>虽然综合布线系统只是CA下的一个子系统，但他保证了建筑其他子系统的有效结合</strong></p>\n<hr>\n<h3 id=\"综合布线系统—子系统\"><a href=\"#综合布线系统—子系统\" class=\"headerlink\" title=\"综合布线系统—子系统\"></a>综合布线系统—子系统</h3><h4 id=\"工作区子系统（服务区子系统）\"><a href=\"#工作区子系统（服务区子系统）\" class=\"headerlink\" title=\"工作区子系统（服务区子系统）\"></a>工作区子系统（服务区子系统）</h4><p>由跳线与信息插座所连接的终端设备组成</p>\n<p>信息插座：墙面型、地面型、桌面型等</p>\n<p>终端设备：电话机、计算机、传真机、报警探头、摄像机、监视器、各种传感器件、各种音响设备</p>\n<h4 id=\"水平子系统（配线子系统）\"><a href=\"#水平子系统（配线子系统）\" class=\"headerlink\" title=\"水平子系统（配线子系统）\"></a>水平子系统（配线子系统）</h4><p>工作区信息插座模块、模块到楼层管理间的连接缆线、配线架、跳线等组成，实现<strong>工作区与管理间之间的连接</strong></p>\n<h4 id=\"管理间子系统\"><a href=\"#管理间子系统\" class=\"headerlink\" title=\"管理间子系统\"></a>管理间子系统</h4><h4 id=\"垂直子系统（干线子系统）\"><a href=\"#垂直子系统（干线子系统）\" class=\"headerlink\" title=\"垂直子系统（干线子系统）\"></a>垂直子系统（干线子系统）</h4><p>用于连接管理间子系统与设备间子系统，</p>\n<p>注意事项：</p>\n<p>垂直子系统使用光缆</p>\n<p>垂直子系统应为星型拓扑结构垂直子系统干线光缆的拐弯处不要用直角拐弯</p>\n<p>干线电缆和光缆布线的交接不应超过两次</p>\n<p>从楼层配线到建筑群配线架之间只应有一个配线架</p>\n<h4 id=\"设备间子系统\"><a href=\"#设备间子系统\" class=\"headerlink\" title=\"设备间子系统\"></a>设备间子系统</h4><h4 id=\"进线间子系统\"><a href=\"#进线间子系统\" class=\"headerlink\" title=\"进线间子系统\"></a>进线间子系统</h4><h4 id=\"建筑群子系统\"><a href=\"#建筑群子系统\" class=\"headerlink\" title=\"建筑群子系统\"></a>建筑群子系统</h4><hr>\n<h3 id=\"综合布线系统—线缆\"><a href=\"#综合布线系统—线缆\" class=\"headerlink\" title=\"综合布线系统—线缆\"></a>综合布线系统—线缆</h3><h4 id=\"双绞线的数据传输\"><a href=\"#双绞线的数据传输\" class=\"headerlink\" title=\"双绞线的数据传输\"></a><strong>双绞线的数据传输</strong></h4><p>1236工作，4578不工作（由于线与线之间会发生干扰，所以两两互绕，4578虽然不工作，但起的是隔离的作用）</p>\n<p><img src=\"https://liucekai.github.io/images/zh1.png\" alt=\"\"></p>\n<h4 id=\"T568A和T568B线序\"><a href=\"#T568A和T568B线序\" class=\"headerlink\" title=\"T568A和T568B线序\"></a>T568A和T568B线序</h4><p>图</p>\n<h4 id=\"直通线缆、交叉线缆应用场景（以前）\"><a href=\"#直通线缆、交叉线缆应用场景（以前）\" class=\"headerlink\" title=\"直通线缆、交叉线缆应用场景（以前）\"></a>直通线缆、交叉线缆应用场景（以前）</h4><p>​        直通线缆                              交叉线缆</p>\n<p>交换机&lt;—&gt;路由器              交换机&lt;—&gt;交换机</p>\n<p>交换机&lt;—&gt;PC                     交换机&lt;—&gt;集线器</p>\n<p>交换机&lt;—&gt;服务器              集线器&lt;—&gt;路由器</p>\n<p>集线器&lt;—&gt;PC                     路由器&lt;—&gt;路由器</p>\n<p>集线器&lt;—&gt;服务器              路由器&lt;—&gt;PC</p>\n<p>​                                             PC&lt;—&gt;PC</p>\n<p>图</p>\n<p><u><strong>现在随着技术的发展，新一代的网络设备，比如三层交换机之间可以支持直通电缆，路由器之间也可以支持直通电缆了</strong></u><u><strong>，甚至路由器和pc也可以</strong></u></p>\n","slug":"综合布线","updated":"2020-06-02T05:37:36.000Z","comments":true,"link":"","permalink":"https://liucekai.github.io/2020/06/02/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF/","excerpt":"智能大厦简介智能在于5A（automatic 自动） BA楼宇自动化：系统集成、楼宇自控系统 OA办公自动化：集成管理系统、触摸查询 FA消防自动化：消防报警系统、背景音乐系统…","categories":[],"tags":[]}],"categories":[],"tags":[]}